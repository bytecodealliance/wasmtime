test compile precise-output
target x86_64

function %f0(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
    v3 = select.i32 v0, v1, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   movq    %rdx, %rax
;   cmovnzl %esi, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   movq %rdx, %rax
;   cmovnel %esi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f1(i8) -> i32 {
block0(v0: i8):
    brif v0, block1, block2
block1:
    v1 = iconst.i32 1
    return v1
block2:
    v2 = iconst.i32 2
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   jnz     label2; j label1
; block1:
;   movl    $2, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   jne 0x17
; block2: ; offset 0xd
;   movl $2, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
; block3: ; offset 0x17
;   movl $1, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f2(i8) -> i32 {
block0(v0: i8):
    brif v0, block2, block1
block1:
    v1 = iconst.i32 1
    return v1
block2:
    v2 = iconst.i32 2
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   jnz     label2; j label1
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $2, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   jne 0x17
; block2: ; offset 0xd
;   movl $1, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
; block3: ; offset 0x17
;   movl $2, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i32 1
  v2 = load.i32 v0
  v3 = icmp eq v1, v2
  brif v3, block1, block2
block1:
  v4 = iconst.i32 1
  return v4
block2:
  v5 = iconst.i32 1
  return v5
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    0(%rdi), %edx
;   cmpl    $1, %edx
;   jz      label2; j label1
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl (%rdi), %edx ; trap: heap_oob
;   cmpl $1, %edx
;   je 0x19
; block2: ; offset 0xf
;   movl $1, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
; block3: ; offset 0x19
;   movl $1, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f4(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i32 1
  v2 = load.i32 v0
  v3 = icmp eq v2, v1
  brif v3, block1, block2
block1:
  v4 = iconst.i32 1
  return v4
block2:
  v5 = iconst.i32 1
  return v5
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    0(%rdi), %edx
;   cmpl    $1, %edx
;   jz      label2; j label1
; block1:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
; block2:
;   movl    $1, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl (%rdi), %edx ; trap: heap_oob
;   cmpl $1, %edx
;   je 0x19
; block2: ; offset 0xf
;   movl $1, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
; block3: ; offset 0x19
;   movl $1, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_x_slt_0_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp slt v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrq    $63, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   shrq $0x3f, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_x_slt_0_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp slt v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrl    $31, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   shrl $0x1f, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_0_sgt_x_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp sgt v1, v0
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrq    $63, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   shrq $0x3f, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_0_sgt_x_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp sgt v1, v0
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrl    $31, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   shrl $0x1f, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_0_sle_x_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp sle v1, v0
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   notq %rdi
;   movq    %rdi, %rax
;   shrq    $63, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   notq %rdi
;   movq %rdi, %rax
;   shrq $0x3f, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_0_sle_x_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp sle v1, v0
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   notq %rdi
;   movq    %rdi, %rax
;   shrl    $31, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   notq %rdi
;   movq %rdi, %rax
;   shrl $0x1f, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_x_sge_x_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp sge v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   notq %rdi
;   movq    %rdi, %rax
;   shrq    $63, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   notq %rdi
;   movq %rdi, %rax
;   shrq $0x3f, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %test_x_sge_x_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp sge v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   notq %rdi
;   movq    %rdi, %rax
;   shrl    $31, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   notq %rdi
;   movq %rdi, %rax
;   shrl $0x1f, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

