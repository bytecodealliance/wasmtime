test compile precise-output
target x86_64 has_avx

function %f3(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   uninit  %xmm2
;   vxorps  %xmm2, %xmm2, %xmm4
;   vcvtsi2ssl %edi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vxorps %xmm2, %xmm2, %xmm4
;   vcvtsi2ssl %edi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f4(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   uninit  %xmm2
;   vxorps  %xmm2, %xmm2, %xmm4
;   vcvtsi2ssq %rdi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vxorps %xmm2, %xmm2, %xmm4
;   vcvtsi2ssq %rdi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f7(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   uninit  %xmm2
;   vxorpd  %xmm2, %xmm2, %xmm4
;   vcvtsi2sdl %edi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vxorpd %xmm2, %xmm2, %xmm4
;   vcvtsi2sdl %edi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f8(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   uninit  %xmm2
;   vxorpd  %xmm2, %xmm2, %xmm4
;   vcvtsi2sdq %rdi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vxorpd %xmm2, %xmm2, %xmm4
;   vcvtsi2sdq %rdi, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %u64x2_to_f64x2(i64x2) -> f64x2 {
block0(v0: i64x2):
  v1 = fcvt_from_uint.f64x2 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpand   %xmm0, const(0), %xmm2
;   vpor    %xmm2, const(1), %xmm4
;   vpsrlq  %xmm0, $32, %xmm6
;   vpor    %xmm6, const(2), %xmm0
;   vsubpd  %xmm0, const(3), %xmm2
;   vaddpd %xmm2, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpand 0x34(%rip), %xmm0, %xmm2
;   vpor 0x3c(%rip), %xmm2, %xmm4
;   vpsrlq $0x20, %xmm0, %xmm6
;   vpor 0x3f(%rip), %xmm6, %xmm0
;   vsubpd 0x47(%rip), %xmm0, %xmm2
;   vaddpd %xmm2, %xmm4, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)

function %i64x2_to_f64x2(i64x2) -> f64x2 {
block0(v0: i64x2):
  v1 = fcvt_from_sint.f64x2 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   uninit  %xmm2
;   vxorpd  %xmm2, %xmm2, %xmm4
;   vmovq %xmm0, %r9
;   vcvtsi2sdq %r9, %xmm4, %xmm1
;   vpshufd $0xee, %xmm0, %xmm2
;   vmovq %xmm2, %rcx
;   vcvtsi2sdq %rcx, %xmm4, %xmm6
;   vunpcklpd %xmm1, %xmm6, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vxorpd %xmm2, %xmm2, %xmm4
;   vmovq %xmm0, %r9
;   vcvtsi2sdq %r9, %xmm4, %xmm1
;   vpshufd $0xee, %xmm0, %xmm2
;   vmovq %xmm2, %rcx
;   vcvtsi2sdq %rcx, %xmm4, %xmm6
;   vunpcklpd %xmm6, %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

