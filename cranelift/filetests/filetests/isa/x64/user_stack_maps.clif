test compile precise-output
set unwind_info=false
set enable_multi_ret_implicit_sret
set enable_probestack=false
target x86_64

function %foo() system_v {
    ss0 = explicit_slot 12, align = 4
    sig0 = (i32) system_v
    fn0 = colocated u0:0 sig0

block0:
    v0 = iconst.i32 0
    v1 = iconst.i32 1
    v2 = iconst.i32 2
    v3 = iconst.i32 3

    stack_store v0, ss0
    stack_store v1, ss0+4
    stack_store v2, ss0+8
    call fn0(v0), stack_map=[i32 @ ss0+0, i32 @ ss0+4, i32 @ ss0+8]

    stack_store v1, ss0
    stack_store v2, ss0+4
    call fn0(v0), stack_map=[i32 @ ss0+0, i32 @ ss0+4]

    stack_store v2, ss0
    call fn0(v1), stack_map=[i32 @ ss0+0]

    call fn0(v2)

    return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x30, %rsp
;   movq %rbx, 0x10(%rsp)
;   movq %r14, 0x18(%rsp)
;   movq %r15, 0x20(%rsp)
; block0:
;   uninit  %rdi
;   xorl %edi, %edi
;   movq %rdi, %r14
;   movl $0x1, %r15d
;   movl $0x2, %ebx
;   leaq <offset:1>+(%rsp), %rsi
;   movl $0x0, (%rsi)
;   leaq <offset:1>+4(%rsp), %rdi
;   movl $0x1, (%rdi)
;   leaq <offset:1>+8(%rsp), %rax
;   movl $0x2, (%rax)
;   movq %r14, %rdi
;   call    User(userextname0)
;   ; UserStackMap { by_type: [(types::I32, CompoundBitSet {0, 4, 8})], sp_to_sized_stack_slots: None }
;   leaq <offset:1>+(%rsp), %rdx
;   movl $0x1, (%rdx)
;   leaq <offset:1>+4(%rsp), %r8
;   movl $0x2, (%r8)
;   movq %r14, %rdi
;   call    User(userextname0)
;   ; UserStackMap { by_type: [(types::I32, CompoundBitSet {0, 4})], sp_to_sized_stack_slots: None }
;   leaq <offset:1>+(%rsp), %r10
;   movl $0x2, (%r10)
;   movq %r15, %rdi
;   call    User(userextname0)
;   ; UserStackMap { by_type: [(types::I32, CompoundBitSet {0})], sp_to_sized_stack_slots: None }
;   movq %rbx, %rdi
;   call    User(userextname0)
;   movq 0x10(%rsp), %rbx
;   movq 0x18(%rsp), %r14
;   movq 0x20(%rsp), %r15
;   addq $0x30, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x30, %rsp
;   movq %rbx, 0x10(%rsp)
;   movq %r14, 0x18(%rsp)
;   movq %r15, 0x20(%rsp)
; block1: ; offset 0x17
;   xorl %edi, %edi
;   movq %rdi, %r14
;   movl $1, %r15d
;   movl $2, %ebx
;   leaq (%rsp), %rsi
;   movl $0, (%rsi)
;   leaq 4(%rsp), %rdi
;   movl $1, (%rdi)
;   leaq 8(%rsp), %rax
;   movl $2, (%rax)
;   movq %r14, %rdi
;   callq 0x4f ; reloc_external CallPCRel4 u0:0 -4
;   leaq (%rsp), %rdx
;   movl $1, (%rdx)
;   leaq 4(%rsp), %r8
;   movl $2, (%r8)
;   movq %r14, %rdi
;   callq 0x6d ; reloc_external CallPCRel4 u0:0 -4
;   leaq (%rsp), %r10
;   movl $2, (%r10)
;   movq %r15, %rdi
;   callq 0x80 ; reloc_external CallPCRel4 u0:0 -4
;   movq %rbx, %rdi
;   callq 0x88 ; reloc_external CallPCRel4 u0:0 -4
;   movq 0x10(%rsp), %rbx
;   movq 0x18(%rsp), %r14
;   movq 0x20(%rsp), %r15
;   addq $0x30, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %different_types(i8, i16, i32, i64, f32, f64) -> i8, i16, i32, i64, f32, f64 {
    ss0 = explicit_slot 1
    ss1 = explicit_slot 2, align = 2
    ss2 = explicit_slot 8, align = 4
    ss3 = explicit_slot 16, align = 8
    ss4 = explicit_slot 48, align = 16
    sig0 = () system_v
    fn0 = colocated u0:0 sig0

block0(v0: i8, v1: i16, v2: i32, v3: i64, v4: f32, v5: f64):
    stack_store v0, ss0
    stack_store v1, ss1
    stack_store v2, ss2
    stack_store v4, ss2+4
    stack_store v3, ss3
    stack_store v5, ss3+8
    call fn0(), stack_map=[i8 @ ss0+0, i16 @ ss1+0, i32 @ ss2+0, f32 @ ss2+4, i64 @ ss3+0, f64 @ ss3+8]
    return v0, v1, v2, v3, v4, v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xb0, %rsp
;   movq %rbx, 0x80(%rsp)
;   movq %r12, 0x88(%rsp)
;   movq %r13, 0x90(%rsp)
;   movq %r14, 0x98(%rsp)
;   movq %r15, 0xa0(%rsp)
; block0:
;   movq %rdi, %r13
;   leaq <offset:1>+(%rsp), %r9
;   movb %sil, (%r9)
;   movq %rsi, %r15
;   leaq <offset:1>+8(%rsp), %r9
;   movw %dx, (%r9)
;   movq %rdx, %r12
;   leaq <offset:1>+0x10(%rsp), %r9
;   movl %ecx, (%r9)
;   movq %rcx, %rbx
;   leaq <offset:1>+0x14(%rsp), %r10
;   movss %xmm0, (%r10)
;   movdqu %xmm0, <offset:1>+0x60(%rsp)
;   leaq <offset:1>+0x18(%rsp), %r11
;   movq %r8, (%r11)
;   movq %r8, %r14
;   leaq <offset:1>+0x20(%rsp), %rsi
;   movsd %xmm1, (%rsi)
;   movdqu %xmm1, <offset:1>+0x70(%rsp)
;   call    User(userextname0)
;   ; UserStackMap { by_type: [(types::I8, CompoundBitSet {0}), (types::I16, CompoundBitSet {8}), (types::I32, CompoundBitSet {16}), (types::F32, CompoundBitSet {20}), (types::I64, CompoundBitSet {24}), (types::F64, CompoundBitSet {32})], sp_to_sized_stack_slots: None }
;   movq %rbx, %rcx
;   movq %r13, %rdi
;   movl %ecx, (%rdi)
;   movq %r14, %r8
;   movq %r8, 8(%rdi)
;   movq %r15, %rax
;   movq %r12, %rdx
;   movdqu <offset:1>+0x60(%rsp), %xmm0
;   movdqu <offset:1>+0x70(%rsp), %xmm1
;   movq 0x80(%rsp), %rbx
;   movq 0x88(%rsp), %r12
;   movq 0x90(%rsp), %r13
;   movq 0x98(%rsp), %r14
;   movq 0xa0(%rsp), %r15
;   addq $0xb0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xb0, %rsp
;   movq %rbx, 0x80(%rsp)
;   movq %r12, 0x88(%rsp)
;   movq %r13, 0x90(%rsp)
;   movq %r14, 0x98(%rsp)
;   movq %r15, 0xa0(%rsp)
; block1: ; offset 0x33
;   movq %rdi, %r13
;   leaq (%rsp), %r9
;   movb %sil, (%r9)
;   movq %rsi, %r15
;   leaq 8(%rsp), %r9
;   movw %dx, (%r9)
;   movq %rdx, %r12
;   leaq 0x10(%rsp), %r9
;   movl %ecx, (%r9)
;   movq %rcx, %rbx
;   leaq 0x14(%rsp), %r10
;   movss %xmm0, (%r10)
;   movdqu %xmm0, 0x60(%rsp)
;   leaq 0x18(%rsp), %r11
;   movq %r8, (%r11)
;   movq %r8, %r14
;   leaq 0x20(%rsp), %rsi
;   movsd %xmm1, (%rsi)
;   movdqu %xmm1, 0x70(%rsp)
;   callq 0x86 ; reloc_external CallPCRel4 u0:0 -4
;   movq %rbx, %rcx
;   movq %r13, %rdi
;   movl %ecx, (%rdi)
;   movq %r14, %r8
;   movq %r8, 8(%rdi)
;   movq %r15, %rax
;   movq %r12, %rdx
;   movdqu 0x60(%rsp), %xmm0
;   movdqu 0x70(%rsp), %xmm1
;   movq 0x80(%rsp), %rbx
;   movq 0x88(%rsp), %r12
;   movq 0x90(%rsp), %r13
;   movq 0x98(%rsp), %r14
;   movq 0xa0(%rsp), %r15
;   addq $0xb0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

