test compile precise-output
target x86_64 sse42 has_avx

function %f1(i8x16) -> i8 {
block0(v0: i8x16):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrb $1, %xmm0, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrb $1, %xmm0, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f2(i16x8) -> i16 {
block0(v0: i16x8):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrw $1, %xmm0, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrw $1, %xmm0, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i32x4) -> i32 {
block0(v0: i32x4):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrd $1, %xmm0, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrd $1, %xmm0, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f4(i64x2) -> i64 {
block0(v0: i64x2):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrq $1, %xmm0, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrq $1, %xmm0, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f5(f32x4) -> f32 {
block0(v0: f32x4):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpshufd $0x1, %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpshufd $1, %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f6(f64x2) -> f64 {
block0(v0: f64x2):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpshufd $0xee, %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpshufd $0xee, %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %extract_i8x16_lane0_to_memory(i8x16, i64) {
block0(v0: i8x16, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrb $0, %xmm0, 0(%rdi)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrb $0, %xmm0, (%rdi) ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %extract_i16x8_lane0_to_memory(i16x8, i64) {
block0(v0: i16x8, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrw $0, %xmm0, 0(%rdi)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrw $0, %xmm0, (%rdi) ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %extract_i32x4_lane0_to_memory(i32x4, i64) {
block0(v0: i32x4, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrd $0, %xmm0, 0(%rdi)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrd $0, %xmm0, (%rdi) ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %extract_f32x4_lane0_to_memory(f32x4, i64) {
block0(v0: f32x4, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovss  %xmm0, 0(%rdi)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovss %xmm0, (%rdi) ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %extract_i64x2_lane0_to_memory(i64x2, i64) {
block0(v0: i64x2, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpextrq $0, %xmm0, 0(%rdi)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpextrq $0, %xmm0, (%rdi) ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %extract_f64x2_lane0_to_memory(f64x2, i64) {
block0(v0: f64x2, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovsd  %xmm0, 0(%rdi)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovsd %xmm0, (%rdi) ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

