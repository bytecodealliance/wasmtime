test compile precise-output
set enable_probestack=true
set probestack_strategy=inline
; This is the default and is equivalent to a page size of 4096
set probestack_size_log2=12
target x86_64


; If the stack size is just one page, we can avoid the stack probe entirely
function %single_page() -> i64 system_v {
ss0 = explicit_slot 2048

block0:
  v1 = stack_addr.i64 ss0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq $0x800, %rsp
; block0:
;   lea     rsp(0 + virtual offset), %rax
;   addq $0x800, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x800, %rsp
; block1: ; offset 0xb
;   leaq (%rsp), %rax
;   addq $0x800, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %unrolled() -> i64 system_v {
ss0 = explicit_slot 12288

block0:
  v1 = stack_addr.i64 ss0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq $0x1000, %rsp
;   movl    %esp, 0(%rsp)
;   subq $0x1000, %rsp
;   movl    %esp, 0(%rsp)
;   subq $0x1000, %rsp
;   movl    %esp, 0(%rsp)
;   addq $0x3000, %rsp
;   subq $0x3000, %rsp
; block0:
;   lea     rsp(0 + virtual offset), %rax
;   addq $0x3000, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x1000, %rsp
;   movl %esp, (%rsp)
;   subq $0x1000, %rsp
;   movl %esp, (%rsp)
;   subq $0x1000, %rsp
;   movl %esp, (%rsp)
;   addq $0x3000, %rsp
;   subq $0x3000, %rsp
; block1: ; offset 0x30
;   leaq (%rsp), %rax
;   addq $0x3000, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %large() -> i64 system_v {
ss0 = explicit_slot 100000

block0:
  v1 = stack_addr.i64 ss0
  return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   stack_probe_loop %r11, frame_size=100000, guard_size=4096
;   subq $0x186a0, %rsp
; block0:
;   lea     rsp(0 + virtual offset), %rax
;   addq $0x186a0, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   movq %rsp, %r11
;   subq $0x19000, %r11
;   subq $0x1000, %rsp
;   movl %esp, (%rsp)
;   cmpq %rsp, %r11
;   jne 0xe
;   addq $0x19000, %rsp
;   subq $0x186a0, %rsp
; block1: ; offset 0x2f
;   leaq (%rsp), %rax
;   addq $0x186a0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

