test compile precise-output
target x86_64 sse41

function %imul_swiden_hi_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
    v2 = swiden_high v0
    v3 = swiden_high v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   palignr $8, %xmm0, %xmm0, %xmm0
;   pmovsxbw %xmm0, %xmm0
;   palignr $8, %xmm1, %xmm1, %xmm1
;   pmovsxbw %xmm1, %xmm1
;   pmullw  %xmm0, %xmm1, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   palignr $8, %xmm0, %xmm0
;   pmovsxbw %xmm0, %xmm0
;   palignr $8, %xmm1, %xmm1
;   pmovsxbw %xmm1, %xmm1
;   pmullw %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_swiden_hi_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1: i16x8):
    v2 = swiden_high v0
    v3 = swiden_high v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm5
;   pmullw  %xmm5, %xmm1, %xmm5
;   pmulhw  %xmm0, %xmm1, %xmm0
;   movdqa  %xmm0, %xmm2
;   movdqa  %xmm5, %xmm0
;   punpckhwd %xmm0, %xmm2, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movdqa %xmm0, %xmm5
;   pmullw %xmm1, %xmm5
;   pmulhw %xmm1, %xmm0
;   movdqa %xmm0, %xmm2
;   movdqa %xmm5, %xmm0
;   punpckhwd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_swiden_hi_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = swiden_high v0
    v3 = swiden_high v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pshufd  $250, %xmm0, %xmm0
;   pshufd  $250, %xmm1, %xmm5
;   pmuldq  %xmm0, %xmm5, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pshufd $0xfa, %xmm0, %xmm0
;   pshufd $0xfa, %xmm1, %xmm5
;   pmuldq %xmm5, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_swiden_low_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
    v2 = swiden_low v0
    v3 = swiden_low v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pmovsxbw %xmm0, %xmm0
;   pmovsxbw %xmm1, %xmm5
;   pmullw  %xmm0, %xmm5, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovsxbw %xmm0, %xmm0
;   pmovsxbw %xmm1, %xmm5
;   pmullw %xmm5, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_swiden_low_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1: i16x8):
    v2 = swiden_low v0
    v3 = swiden_low v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm5
;   pmullw  %xmm5, %xmm1, %xmm5
;   pmulhw  %xmm0, %xmm1, %xmm0
;   movdqa  %xmm0, %xmm2
;   movdqa  %xmm5, %xmm0
;   punpcklwd %xmm0, %xmm2, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movdqa %xmm0, %xmm5
;   pmullw %xmm1, %xmm5
;   pmulhw %xmm1, %xmm0
;   movdqa %xmm0, %xmm2
;   movdqa %xmm5, %xmm0
;   punpcklwd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_swiden_low_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = swiden_low v0
    v3 = swiden_low v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pshufd  $80, %xmm0, %xmm0
;   pshufd  $80, %xmm1, %xmm5
;   pmuldq  %xmm0, %xmm5, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pshufd $0x50, %xmm0, %xmm0
;   pshufd $0x50, %xmm1, %xmm5
;   pmuldq %xmm5, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_uwiden_hi_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
    v2 = uwiden_high v0
    v3 = uwiden_high v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   uninit  %xmm2
;   pxor %xmm2, %xmm2
;   punpckhbw %xmm0, %xmm2, %xmm0
;   uninit  %xmm2
;   pxor %xmm2, %xmm2
;   punpckhbw %xmm1, %xmm2, %xmm1
;   pmullw  %xmm0, %xmm1, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pxor %xmm2, %xmm2
;   punpckhbw %xmm2, %xmm0
;   pxor %xmm2, %xmm2
;   punpckhbw %xmm2, %xmm1
;   pmullw %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_uwiden_hi_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1: i16x8):
    v2 = uwiden_high v0
    v3 = uwiden_high v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm5
;   pmullw  %xmm5, %xmm1, %xmm5
;   pmulhuw %xmm0, %xmm1, %xmm0
;   movdqa  %xmm0, %xmm2
;   movdqa  %xmm5, %xmm0
;   punpckhwd %xmm0, %xmm2, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movdqa %xmm0, %xmm5
;   pmullw %xmm1, %xmm5
;   pmulhuw %xmm1, %xmm0
;   movdqa %xmm0, %xmm2
;   movdqa %xmm5, %xmm0
;   punpckhwd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_uwiden_hi_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = uwiden_high v0
    v3 = uwiden_high v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pshufd  $250, %xmm0, %xmm0
;   pshufd  $250, %xmm1, %xmm5
;   pmuludq %xmm0, %xmm5, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pshufd $0xfa, %xmm0, %xmm0
;   pshufd $0xfa, %xmm1, %xmm5
;   pmuludq %xmm5, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_uwiden_low_i8x16(i8x16, i8x16) -> i16x8 {
block0(v0: i8x16, v1: i8x16):
    v2 = uwiden_low v0
    v3 = uwiden_low v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pmovzxbw %xmm0, %xmm0
;   pmovzxbw %xmm1, %xmm5
;   pmullw  %xmm0, %xmm5, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovzxbw %xmm0, %xmm0
;   pmovzxbw %xmm1, %xmm5
;   pmullw %xmm5, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_uwiden_low_i16x8(i16x8, i16x8) -> i32x4 {
block0(v0: i16x8, v1: i16x8):
    v2 = uwiden_low v0
    v3 = uwiden_low v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movdqa  %xmm0, %xmm5
;   pmullw  %xmm5, %xmm1, %xmm5
;   pmulhuw %xmm0, %xmm1, %xmm0
;   movdqa  %xmm0, %xmm2
;   movdqa  %xmm5, %xmm0
;   punpcklwd %xmm0, %xmm2, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movdqa %xmm0, %xmm5
;   pmullw %xmm1, %xmm5
;   pmulhuw %xmm1, %xmm0
;   movdqa %xmm0, %xmm2
;   movdqa %xmm5, %xmm0
;   punpcklwd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_uwiden_low_i32x4(i32x4, i32x4) -> i64x2 {
block0(v0: i32x4, v1: i32x4):
    v2 = uwiden_low v0
    v3 = uwiden_low v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   pshufd  $80, %xmm0, %xmm0
;   pshufd  $80, %xmm1, %xmm5
;   pmuludq %xmm0, %xmm5, %xmm0
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pshufd $0x50, %xmm0, %xmm0
;   pshufd $0x50, %xmm1, %xmm5
;   pmuludq %xmm5, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

