test compile precise-output
target x86_64 sse42 has_avx has_avx2

function %splat_i8(i8) -> i8x16 {
block0(v0: i8):
  v1 = splat.i8x16 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovd %edi, %xmm2
;   vpbroadcastb %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovd %edi, %xmm2
;   vpbroadcastb %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %splat_i16(i16) -> i16x8 {
block0(v0: i16):
  v1 = splat.i16x8 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovd %edi, %xmm2
;   vpbroadcastw %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovd %edi, %xmm2
;   vpbroadcastw %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %splat_i32(i32) -> i32x4 {
block0(v0: i32):
  v1 = splat.i32x4 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovd %edi, %xmm2
;   vpbroadcastd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovd %edi, %xmm2
;   vpbroadcastd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %splat_i64(i64) -> i64x2 {
block0(v0: i64):
  v1 = splat.i64x2 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovq %rdi, %xmm2
;   vpshufd $0x44, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovq %rdi, %xmm2
;   vpshufd $0x44, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %splat_f32(f32) -> f32x4 {
block0(v0: f32):
  v1 = splat.f32x4 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vbroadcastss %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vbroadcastss %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %splat_f64(f64) -> f64x2 {
block0(v0: f64):
  v1 = splat.f64x2 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpshufd $0x44, %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpshufd $0x44, %xmm0, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load_splat_i8(i64) -> i8x16 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = splat.i8x16 v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpbroadcastb 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpbroadcastb (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load_splat_i16(i64) -> i16x8 {
block0(v0: i64):
  v1 = load.i16 v0
  v2 = splat.i16x8 v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vpbroadcastw 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vpbroadcastw (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load_splat_i32(i64) -> i32x4 {
block0(v0: i64):
  v1 = load.i32 v0
  v2 = splat.i32x4 v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vbroadcastss 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vbroadcastss (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load_splat_i64(i64) -> i64x2 {
block0(v0: i64):
  v1 = load.i64 v0
  v2 = splat.i64x2 v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovddup (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovddup (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load_splat_f32(i64) -> f32x4 {
block0(v0: i64):
  v1 = load.f32 v0
  v2 = splat.f32x4 v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vbroadcastss 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vbroadcastss (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %load_splat_f64(i64) -> f64x2 {
block0(v0: i64):
  v1 = load.f64 v0
  v2 = splat.f64x2 v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vmovddup (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vmovddup (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

