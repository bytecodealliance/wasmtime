test compile precise-output
target x86_64 sse41

function %uload8x8(i64) -> i16x8 {
block0(v0: i64):
  v1 = uload8x8 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   pmovzxbw (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovzxbw (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload8x8(i64) -> i16x8 {
block0(v0: i64):
  v1 = sload8x8 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   pmovsxbw (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovsxbw (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload16x4(i64) -> i32x4 {
block0(v0: i64):
  v1 = uload16x4 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   pmovzxwd (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovzxwd (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload16x4(i64) -> i32x4 {
block0(v0: i64):
  v1 = sload16x4 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   pmovsxwd (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovsxwd (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %uload32x2(i64) -> i64x2 {
block0(v0: i64):
  v1 = uload32x2 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   pmovzxdq (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovzxdq (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %sload32x2(i64) -> i64x2 {
block0(v0: i64):
  v1 = sload32x2 v0
  return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   pmovsxdq (%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   pmovsxdq (%rdi), %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

