test compile precise-output
set preserve_frame_pointers=true
target x86_64

;;;; Test passing `i64`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_i64(i64) -> i64 tail {
block0(v0: i64):
    v1 = iadd_imm.i64 v0, 10
    return v1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   leaq 0xa(%rdi), %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   leaq 0xa(%rdi), %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %call_i64(i64) -> i64 tail {
    sig0 = (i64) -> i64 tail
    fn0 = %callee_i64(i64) -> i64 tail

block0(v0: i64):
    v1 = func_addr.i64 fn0
    return_call_indirect sig0, v1(v0)
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   load_ext_name %callee_i64+0, %r10
;   return_call_unknown %r10 (0) tmp=%r11 %rdi=%rdi
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0, %r10 ; reloc_external Abs8 %callee_i64 0
;   movq %rbp, %rsp
;   popq %rbp
;   jmpq *%r10

;;;; Test colocated tail calls ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %colocated_i64(i64) -> i64 tail {
    sig0 = (i64) -> i64 tail
    fn0 = colocated %callee_i64(i64) -> i64 tail

block0(v0: i64):
    v1 = func_addr.i64 fn0
    return_call_indirect sig0, v1(v0)
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   load_ext_name %callee_i64+0, %r10
;   return_call_unknown %r10 (0) tmp=%r11 %rdi=%rdi
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   leaq (%rip), %r10 ; reloc_external CallPCRel4 %callee_i64 -4
;   movq %rbp, %rsp
;   popq %rbp
;   jmpq *%r10

;;;; Test passing `f64`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_f64(f64) -> f64 tail {
block0(v0: f64):
    v1 = f64const 0x10.0
    v2 = fadd.f64 v0, v1
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   addsd (%rip), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   addsd 0x14(%rip), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %dh, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)

function %call_f64(f64) -> f64 tail {
    sig0 = (f64) -> f64 tail
    fn0 = %callee_f64(f64) -> f64 tail

block0(v0: f64):
    v1 = func_addr.i64 fn0
    return_call_indirect sig0, v1(v0)
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   load_ext_name %callee_f64+0, %r10
;   return_call_unknown %r10 (0) tmp=%r11 %xmm0=%xmm0
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0, %r10 ; reloc_external Abs8 %callee_f64 0
;   movq %rbp, %rsp
;   popq %rbp
;   jmpq *%r10

;;;; Test passing `i8`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_i8(i8) -> i8 tail {
block0(v0: i8):
    v1 = iconst.i8 0
    v2 = icmp eq v0, v1
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   testb %dil, %dil
;   setz    %al
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   sete %al
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %call_i8(i8) -> i8 tail {
    sig0 = (i8) -> i8 tail
    fn0 = %callee_i8(i8) -> i8 tail

block0(v0: i8):
    v1 = func_addr.i64 fn0
    return_call_indirect sig0, v1(v0)
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   load_ext_name %callee_i8+0, %r10
;   return_call_unknown %r10 (0) tmp=%r11 %rdi=%rdi
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movabsq $0, %r10 ; reloc_external Abs8 %callee_i8 0
;   movq %rbp, %rsp
;   popq %rbp
;   jmpq *%r10

;;;; Test passing many arguments on stack ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %tail_caller_stack_args() -> i64 tail {
    fn0 = %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    v26 = func_addr.i64 fn0
    return_call_indirect sig0, v26(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xa0, %rsp
;   movq %rsp, %rbp
;   movq 0xa0(%rsp), %r11
;   movq %r11, (%rsp)
;   movq 0xa8(%rsp), %r11
;   movq %r11, 8(%rsp)
;   subq $0xa0, %rsp
;   movq %rbx, 0x70(%rsp)
;   movq %r12, 0x78(%rsp)
;   movq %r13, 0x80(%rsp)
;   movq %r14, 0x88(%rsp)
;   movq %r15, 0x90(%rsp)
; block0:
;   movl $0xa, %esi
;   movq %rsi, <offset:1>+0x68(%rsp)
;   movl $0xf, %edx
;   movq %rdx, <offset:1>+0x60(%rsp)
;   movl $0x14, %ecx
;   movq %rcx, <offset:1>+0x58(%rsp)
;   movl $0x19, %r8d
;   movq %r8, <offset:1>+0x50(%rsp)
;   movl $0x1e, %r9d
;   movq %r9, <offset:1>+0x48(%rsp)
;   movl $0x23, %r9d
;   movq %r9, <offset:1>+0x40(%rsp)
;   movl $0x28, %eax
;   movl $0x2d, %r10d
;   movl $0x32, %r11d
;   movl $0x37, %r13d
;   movl $0x3c, %r14d
;   movl $0x41, %r15d
;   movl $0x46, %ebx
;   movl $0x4b, %r12d
;   movl $0x50, %edi
;   movl $0x55, %esi
;   movq %rsi, <offset:1>+0x38(%rsp)
;   movl $0x5a, %edx
;   movl $0x5f, %ecx
;   movl $0x64, %r8d
;   movl $0x69, %r9d
;   movl $0x6e, %esi
;   movq %rsi, <offset:1>+0x30(%rsp)
;   movl $0x73, %esi
;   movq %rsi, <offset:1>+0x28(%rsp)
;   movl $0x78, %esi
;   movq %rsi, <offset:1>+0x20(%rsp)
;   movl $0x7d, %esi
;   movq %rsi, <offset:1>+0x18(%rsp)
;   movl $0x82, %esi
;   movq %rsi, <offset:1>+0x10(%rsp)
;   movl $0x87, %esi
;   movq %rsi, <offset:1>+8(%rsp)
;   load_ext_name %tail_callee_stack_args+0, %rsi
;   movq %rsi, <offset:1>+(%rsp)
;   movq %rax, <offset:0>+-0xa0(%rbp)
;   movq %r10, <offset:0>+-0x98(%rbp)
;   movq %r11, <offset:0>+-0x90(%rbp)
;   movq %r13, <offset:0>+-0x88(%rbp)
;   movq %r14, <offset:0>+-0x80(%rbp)
;   movq %r15, <offset:0>+-0x78(%rbp)
;   movq %rbx, <offset:0>+-0x70(%rbp)
;   movq %r12, <offset:0>+-0x68(%rbp)
;   movq %rdi, <offset:0>+-0x60(%rbp)
;   movq <offset:1>+0x38(%rsp), %rdi
;   movq %rdi, <offset:0>+-0x58(%rbp)
;   movq %rdx, <offset:0>+-0x50(%rbp)
;   movq %rcx, <offset:0>+-0x48(%rbp)
;   movq %r8, <offset:0>+-0x40(%rbp)
;   movq %r9, <offset:0>+-0x38(%rbp)
;   movq <offset:1>+0x30(%rsp), %rsi
;   movq %rsi, <offset:0>+-0x30(%rbp)
;   movq <offset:1>+0x28(%rsp), %rsi
;   movq %rsi, <offset:0>+-0x28(%rbp)
;   movq <offset:1>+0x20(%rsp), %rsi
;   movq %rsi, <offset:0>+-0x20(%rbp)
;   movq <offset:1>+0x18(%rsp), %rsi
;   movq %rsi, <offset:0>+-0x18(%rbp)
;   movq <offset:1>+0x10(%rsp), %rsi
;   movq %rsi, <offset:0>+-0x10(%rbp)
;   movq <offset:1>+8(%rsp), %rsi
;   movq %rsi, <offset:0>+-8(%rbp)
;   movq <offset:1>+0x50(%rsp), %rcx
;   movq <offset:1>+0x58(%rsp), %rdx
;   movq <offset:1>+0x60(%rsp), %rsi
;   movq <offset:1>+0x68(%rsp), %rdi
;   movq <offset:1>+0x48(%rsp), %r8
;   movq <offset:1>+0x40(%rsp), %r9
;   movq <offset:1>+(%rsp), %r10
;   return_call_unknown %r10 (160) tmp=%r11 %rdi=%rdi %rsi=%rsi %rdx=%rdx %rcx=%rcx %r8=%r8 %r9=%r9
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xa0, %rsp
;   movq %rsp, %rbp
;   movq 0xa0(%rsp), %r11
;   movq %r11, (%rsp)
;   movq 0xa8(%rsp), %r11
;   movq %r11, 8(%rsp)
;   subq $0xa0, %rsp
;   movq %rbx, 0x70(%rsp)
;   movq %r12, 0x78(%rsp)
;   movq %r13, 0x80(%rsp)
;   movq %r14, 0x88(%rsp)
;   movq %r15, 0x90(%rsp)
; block1: ; offset 0x50
;   movl $0xa, %esi
;   movq %rsi, 0x68(%rsp)
;   movl $0xf, %edx
;   movq %rdx, 0x60(%rsp)
;   movl $0x14, %ecx
;   movq %rcx, 0x58(%rsp)
;   movl $0x19, %r8d
;   movq %r8, 0x50(%rsp)
;   movl $0x1e, %r9d
;   movq %r9, 0x48(%rsp)
;   movl $0x23, %r9d
;   movq %r9, 0x40(%rsp)
;   movl $0x28, %eax
;   movl $0x2d, %r10d
;   movl $0x32, %r11d
;   movl $0x37, %r13d
;   movl $0x3c, %r14d
;   movl $0x41, %r15d
;   movl $0x46, %ebx
;   movl $0x4b, %r12d
;   movl $0x50, %edi
;   movl $0x55, %esi
;   movq %rsi, 0x38(%rsp)
;   movl $0x5a, %edx
;   movl $0x5f, %ecx
;   movl $0x64, %r8d
;   movl $0x69, %r9d
;   movl $0x6e, %esi
;   movq %rsi, 0x30(%rsp)
;   movl $0x73, %esi
;   movq %rsi, 0x28(%rsp)
;   movl $0x78, %esi
;   movq %rsi, 0x20(%rsp)
;   movl $0x7d, %esi
;   movq %rsi, 0x18(%rsp)
;   movl $0x82, %esi
;   movq %rsi, 0x10(%rsp)
;   movl $0x87, %esi
;   movq %rsi, 8(%rsp)
;   movabsq $0, %rsi ; reloc_external Abs8 %tail_callee_stack_args 0
;   movq %rsi, (%rsp)
;   movq %rax, 0x10(%rbp)
;   movq %r10, 0x18(%rbp)
;   movq %r11, 0x20(%rbp)
;   movq %r13, 0x28(%rbp)
;   movq %r14, 0x30(%rbp)
;   movq %r15, 0x38(%rbp)
;   movq %rbx, 0x40(%rbp)
;   movq %r12, 0x48(%rbp)
;   movq %rdi, 0x50(%rbp)
;   movq 0x38(%rsp), %rdi
;   movq %rdi, 0x58(%rbp)
;   movq %rdx, 0x60(%rbp)
;   movq %rcx, 0x68(%rbp)
;   movq %r8, 0x70(%rbp)
;   movq %r9, 0x78(%rbp)
;   movq 0x30(%rsp), %rsi
;   movq %rsi, 0x80(%rbp)
;   movq 0x28(%rsp), %rsi
;   movq %rsi, 0x88(%rbp)
;   movq 0x20(%rsp), %rsi
;   movq %rsi, 0x90(%rbp)
;   movq 0x18(%rsp), %rsi
;   movq %rsi, 0x98(%rbp)
;   movq 0x10(%rsp), %rsi
;   movq %rsi, 0xa0(%rbp)
;   movq 8(%rsp), %rsi
;   movq %rsi, 0xa8(%rbp)
;   movq 0x50(%rsp), %rcx
;   movq 0x58(%rsp), %rdx
;   movq 0x60(%rsp), %rsi
;   movq 0x68(%rsp), %rdi
;   movq 0x48(%rsp), %r8
;   movq 0x40(%rsp), %r9
;   movq (%rsp), %r10
;   movq 0x70(%rsp), %rbx
;   movq 0x78(%rsp), %r12
;   movq 0x80(%rsp), %r13
;   movq 0x88(%rsp), %r14
;   movq 0x90(%rsp), %r15
;   addq $0xa0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   jmpq *%r10

