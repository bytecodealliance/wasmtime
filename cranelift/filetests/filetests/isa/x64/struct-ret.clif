test compile precise-output
target x86_64

function %f0(i64 sret) {
block0(v0: i64):
    v1 = iconst.i64 42
    store v1, v0
    return
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    $42, 0(%rdi)
;   movq    %rdi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq $0x2a, (%rdi) ; trap: heap_oob
;   movq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f1(i64, i64) -> i64 {
    fn0 = %f2(i64 sret) -> i64

block0(v0: i64, v1: i64):
    v2 = call fn0(v1)
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rsi, %rdi
;   load_ext_name %f2+0, %rcx
;   call    *%rcx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rsi, %rdi
;   movabsq $0, %rcx ; reloc_external Abs8 %f2 0
;   callq *%rcx
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i64 sret) {
    fn0 = %f4(i64 sret)

block0(v0: i64):
    call fn0(v0)
    return
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $16, %rsp
;   movq    %r15, 0(%rsp)
; block0:
;   movq    %rdi, %r15
;   load_ext_name %f4+0, %rax
;   call    *%rax
;   movq    %r15, %rax
;   movq    0(%rsp), %r15
;   addq    %rsp, $16, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x10, %rsp
;   movq %r15, (%rsp)
; block1: ; offset 0xc
;   movq %rdi, %r15
;   movabsq $0, %rax ; reloc_external Abs8 %f4 0
;   callq *%rax
;   movq %r15, %rax
;   movq (%rsp), %r15
;   addq $0x10, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

