test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64

function %f0(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
    v3 = iconst.i32 42
    v4 = icmp.i32 eq v0, v3
    v5 = select.i128 v4, v1, v2
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   cmpl $0x2a, %edi
;   movq %rcx, %rax
;   cmovzq  %rsi, %rax, %rax
;   movq %rdx, %rdi
;   movq %r8, %rdx
;   cmovzq  %rdi, %rdx, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cmpl $0x2a, %edi
;   movq %rcx, %rax
;   cmoveq %rsi, %rax
;   movq %rdx, %rdi
;   movq %r8, %rdx
;   cmoveq %rdi, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f1(f32, i128, i128) -> i128 {
block0(v0: f32, v1: i128, v2: i128):
    v3 = fcmp.f32 eq v0, v0
    v4 = select.i128 v3, v1, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   ucomiss %xmm0, %xmm0
;   cmovpq  %rdx, %rdi, %rdi
;   movq %rdi, %rax
;   cmovnzq %rdx, %rax, %rax
;   cmovpq  %rcx, %rsi, %rsi
;   movq %rsi, %rdx
;   cmovnzq %rcx, %rdx, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ucomiss %xmm0, %xmm0
;   cmovpq %rdx, %rdi
;   movq %rdi, %rax
;   cmovneq %rdx, %rax
;   cmovpq %rcx, %rsi
;   movq %rsi, %rdx
;   cmovneq %rcx, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq

