test compile precise-output
set opt_level=speed
target x86_64


function %i32_shl_sshr_8_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 24
    v2 = sshr_imm v1, 24
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movsbl %dil, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbl %dil, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i32_shl_sshr_16_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 16
    v2 = sshr_imm v1, 16
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movswl %di, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movswl %di, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i64_shl_sshr_8_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 56
    v2 = sshr_imm v1, 56
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movsbq %dil, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsbq %dil, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i64_shl_sshr_16_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 48
    v2 = sshr_imm v1, 48
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movswq %di, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movswq %di, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i64_shl_sshr_32_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 32
    v2 = sshr_imm v1, 32
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movslq %edi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movslq %edi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i32_shl_ushr_8_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 24
    v2 = ushr_imm v1, 24
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movzbl %dil, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbl %dil, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i32_shl_ushr_16_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 16
    v2 = ushr_imm v1, 16
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movzwl %di, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwl %di, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i64_shl_ushr_8_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 56
    v2 = ushr_imm v1, 56
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movzbq %dil, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbq %dil, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i64_shl_ushr_16_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 48
    v2 = ushr_imm v1, 48
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movzwq %di, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwq %di, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %i64_shl_ushr_32_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 32
    v2 = ushr_imm v1, 32
    return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   movl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

