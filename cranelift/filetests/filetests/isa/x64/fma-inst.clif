test compile precise-output
target x86_64 has_avx=true has_fma=true

function %vfmadd213ss(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd213ss %xmm0, %xmm1, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd213ss %xmm2, %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd213sd(f64, f64, i64) -> f64 {
block0(v0: f64, v1: f64, v2: i64):
    v3 = load.f64 v2
    v4 = fma v0, v1, v3
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd213sd %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd213sd (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd213ps(f32x4, f32x4, f32x4) -> f32x4 {
block0(v0: f32x4, v1: f32x4, v2: f32x4):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd213ps %xmm0, %xmm1, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd213ps %xmm2, %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd213pd(f64x2, f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: f64x2):
    v3 = fma v0, v1, v2
    return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd213pd %xmm0, %xmm1, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd213pd %xmm2, %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd132ss(f32, i64, f32) -> f32 {
block0(v0: f32, v1: i64, v2: f32):
    v3 = load.f32 v1
    v4 = fma v0, v3, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd132ss %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd132ss (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd132sd(i64, f64, f64) -> f64 {
block0(v0: i64, v1: f64, v2: f64):
    v3 = load.f64 v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd132sd %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd132sd (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd132ps(f32x4, i64, f32x4) -> f32x4 {
block0(v0: f32x4, v1: i64, v2: f32x4):
    v3 = load.f32x4 v1
    v4 = fma v0, v3, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd132ps %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd132ps (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfmadd132pd(i64, f64x2, f64x2) -> f64x2 {
block0(v0: i64, v1: f64x2, v2: f64x2):
    v3 = load.f64x2 v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfmadd132pd %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfmadd132pd (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd213ss(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
    v3 = fneg v0
    v4 = fma v3, v1, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd213ss %xmm0, %xmm1, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd213ss %xmm2, %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd213sd(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
    v3 = fneg v1
    v4 = fma v0, v3, v2
    return v4
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd213sd %xmm0, %xmm1, %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd213sd %xmm2, %xmm1, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd213ps(f32x4, f32x4, i64) -> f32x4 {
block0(v0: f32x4, v1: f32x4, v2: i64):
    v3 = fneg v0
    v4 = load.f32x4 v2
    v5 = fma v3, v1, v4
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd213ps %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd213ps (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd213pd(f64x2, f64x2, i64) -> f64x2 {
block0(v0: f64x2, v1: f64x2, v2: i64):
    v3 = fneg v1
    v4 = load.f64x2 v2
    v5 = fma v0, v3, v4
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd213pd %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd213pd (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd132ss(f32, i64, f32) -> f32 {
block0(v0: f32, v1: i64, v2: f32):
    v3 = fneg v0
    v4 = load.f32 v1
    v5 = fma v3, v4, v2
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd132ss %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd132ss (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd132sd(i64, f64, f64) -> f64 {
block0(v0: i64, v1: f64, v2: f64):
    v3 = fneg v1
    v4 = load.f64 v0
    v5 = fma v4, v3, v2
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd132sd %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd132sd (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd132ps(i64, f32x4, f32x4) -> f32x4 {
block0(v0: i64, v1: f32x4, v2: f32x4):
    v3 = load.f32x4 v0
    v4 = fneg v3
    v5 = fma v4, v1, v2
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd132ps %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd132ps (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %vfnmadd132pd(f64x2, i64, f64x2) -> f64x2 {
block0(v0: f64x2, v1: i64, v2: f64x2):
    v3 = load.f64x2 v1
    v4 = fneg v3
    v5 = fma v0, v4, v2
    return v5
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   vfnmadd132pd %xmm0, %xmm1, 0(%rdi), %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   vfnmadd132pd (%rdi), %xmm1, %xmm0 ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

