test compile precise-output
target x86_64 has_bmi1

function %blsr_i32(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 1
  v2 = isub v0, v1
  v3 = band v0, v2
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsr_i32_alt(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 -1
  v2 = iadd v0, v1
  v3 = band v0, v2
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsr_i32_alt2(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 -1
  v2 = iadd v1, v0
  v3 = band v0, v2
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsr_i64(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 1
  v2 = isub v0, v1
  v3 = band v0, v2
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsrq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsrq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsr_alt_i32(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 1
  v2 = isub v0, v1
  v3 = band v2, v0
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsrl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsr_alt_i64(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 1
  v2 = isub v0, v1
  v3 = band v2, v0
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsrq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsrq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsi_i32(i32) -> i32 {
block0(v0: i32):
  v1 = ineg v0
  v2 = band v0, v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsil %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsil %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsi_i64(i64) -> i64 {
block0(v0: i64):
  v1 = ineg v0
  v2 = band v0, v1
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsiq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsiq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsi_alt_i32(i32) -> i32 {
block0(v0: i32):
  v1 = ineg v0
  v2 = band v1, v0
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsil %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsil %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsi_alt_i64(i64) -> i64 {
block0(v0: i64):
  v1 = ineg v0
  v2 = band v1, v0
  return v2
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsiq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsiq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsmsk_i32(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 1
  v2 = isub v0, v1
  v3 = bxor v0, v2
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsmskl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsmskl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsmsk_i64(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 1
  v2 = isub v0, v1
  v3 = bxor v0, v2
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsmskq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsmskq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsmsk_alt_i32(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 1
  v2 = isub v0, v1
  v3 = bxor v2, v0
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsmskl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsmskl %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %blsmsk_alt_i64(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 1
  v2 = isub v0, v1
  v3 = bxor v2, v0
  return v3
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   blsmskq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   blsmskq %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

