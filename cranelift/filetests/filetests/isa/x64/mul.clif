test compile precise-output
set unwind_info=false
target x86_64

function %imul_i8(i8, i8) -> i8{
block0(v0: i8, v1: i8):
    v2 = imul v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   mulb %sil ;; implicit: %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   mulb %sil
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i16(i16, i16) -> i16{
block0(v0: i16, v1: i16):
    v2 = imul v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulw %si, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulw %si, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i32(i32, i32) -> i32{
block0(v0: i32, v1: i32):
    v2 = imul v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imull %esi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imull %esi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i64(i64, i64) -> i64{
block0(v0: i64, v1: i64):
    v2 = imul v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulq %rsi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulq %rsi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i8_three(i8, i8, i8) -> i8{
block0(v0: i8, v1: i8, v2: i8):
    v3 = imul v0, v1
    v4 = imul v3, v2
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   mulb %sil ;; implicit: %ax
;   mulb %dl ;; implicit: %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   mulb %sil
;   mulb %dl
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i32_three(i32, i32, i32) -> i32{
block0(v0: i32, v1: i32, v2: i32):
    v3 = imul v0, v1
    v4 = imul v3, v2
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imull %esi, %edi
;   movq    %rdi, %rax
;   imull %edx, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imull %esi, %edi
;   movq %rdi, %rax
;   imull %edx, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i32_load(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = load.i32 notrap v1
    v3 = imul v0, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imull (%rsi), %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imull (%rsi), %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i64_load(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = load.i64 notrap v1
    v3 = imul v0, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulq (%rsi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulq (%rsi), %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i8_const(i8) -> i8{
block0(v0: i8):
    v3 = imul_imm v0, 97
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   mulb (%rip) ;; implicit: %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   mulb 0xa(%rip)
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %ah, (%rcx)
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %al, (%rax)

function %imul_i16_const(i16) -> i16{
block0(v0: i16):
    v3 = imul_imm v0, 97
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulw $0x61, %di, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulw $0x61, %di, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i16_const_negative(i16) -> i16 {
block0(v0: i16):
    v3 = imul_imm v0, -97
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulw $0xff9f, %di, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulw $-0x61, %di, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i16_const_unsigned_but_big(i16) -> i16 {
block0(v0: i16):
    v3 = imul_imm v0, 0x8000
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulw $0x8000, %di, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulw $0x8000, %di, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i16_const_out_of_bounds(i16) -> i16 {
block0(v0: i16):
    v3 = imul_imm v0, 0x80000
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulw $0x0, %di, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulw $0, %di, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i32_const(i32) -> i32{
block0(v0: i32):
    v3 = imul_imm v0, 97
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imull $0x61, %edi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imull $0x61, %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i64_const(i64) -> i64{
block0(v0: i64):
    v3 = imul_imm v0, 97
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulq $0x61, %rdi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulq $0x61, %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i16_bigger_const(i16) -> i16{
block0(v0: i16):
    v3 = imul_imm v0, 1021
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulw $0x3fd, %di, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulw $0x3fd, %di, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i32_bigger_const(i32) -> i32{
block0(v0: i32):
    v3 = imul_imm v0, 1021
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imull $0x3fd, %edi, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imull $0x3fd, %edi, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i64_bigger_const(i64) -> i64{
block0(v0: i64):
    v3 = imul_imm v0, 1021
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulq $0x3fd, %rdi, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulq $0x3fd, %rdi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i16_const_and_load(i64) -> i16{
block0(v0: i64):
    v1 = load.i16 v0
    v2 = imul_imm v1, 1021
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzwq  0(%rdi), %rcx
;   imulw $0x3fd, %cx, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzwq (%rdi), %rcx ; trap: heap_oob
;   imulw $0x3fd, %cx, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i32_const_and_load(i64) -> i32{
block0(v0: i64):
    v1 = load.i32 v0
    v2 = imul_imm v1, 1021
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imull $0x3fd, (%rdi), %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imull $0x3fd, (%rdi), %eax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_i64_const_and_load(i64) -> i64{
block0(v0: i64):
    v1 = load.i64 v0+100
    v2 = imul_imm v1, 1021
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imulq $0x3fd, 0x64(%rdi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imulq $0x3fd, 0x64(%rdi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %widening_smul_from_8bit(i8, i8) -> i16 {
block0(v0: i8, v1: i8):
    v2 = sextend.i16 v0
    v3 = sextend.i16 v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulb %sil ;; implicit: %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulb %sil
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %widening_umul_from_8bit(i8, i8) -> i16 {
block0(v0: i8, v1: i8):
    v2 = uextend.i16 v0
    v3 = uextend.i16 v1
    v4 = imul v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   mulb %sil ;; implicit: %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   mulb %sil
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %imul_and_constant_pool_small_immediate() -> i32 {
block0:
    v0 = iconst.i32 7
    v1 = iconst.i32 0x22222222
    v2 = imul v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imull $0x7, (%rip), %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imull $7, 5(%rip), %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   andb (%rdx), %ah
;   andb (%rdx), %ah
;   addb %al, (%rax)
;   addb %al, (%rax)

function %imul_and_constant_pool_big_immediate() -> i32 {
block0:
    v0 = iconst.i32 0x11111111
    v1 = iconst.i32 0x22222222
    v2 = imul v0, v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   imull $0x11111111, (%rip), %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   imull $0x11111111, 0xa(%rip), %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   addb %al, (%rax)
;   addb %al, (%rax)
;   addb %ah, (%rdx)
;   andb (%rdx), %ah
;   andb (%rax), %al
;   addb %al, (%rax)

