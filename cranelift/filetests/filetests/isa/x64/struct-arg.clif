test compile precise-output
target x86_64

function u0:0(i64 sarg(64)) -> i8 system_v {
block0(v0: i64):
    v1 = load.i8 v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   lea     rbp(stack args max - 64), %rsi
;   movzbq  0(%rsi), %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   leaq 0x10(%rbp), %rsi
;   movzbq (%rsi), %rax ; trap: heap_oob
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function u0:1(i64 sarg(64), i64) -> i8 system_v {
block0(v0: i64, v1: i64):
    v2 = load.i8 v1
	v3 = load.i8 v0
	v4 = iadd.i8 v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   lea     rbp(stack args max - 64), %rcx
;   movzbq  0(%rdi), %rax
;   movzbq  0(%rcx), %r9
;   addl    %eax, %r9d, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   leaq 0x10(%rbp), %rcx
;   movzbq (%rdi), %rax ; trap: heap_oob
;   movzbq (%rcx), %r9 ; trap: heap_oob
;   addl %r9d, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function u0:2(i64) -> i8 system_v {
fn1 = colocated u0:0(i64 sarg(64)) -> i8 system_v

block0(v0: i64):
    v1 = call fn1(v0)
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $64, %rsp
; block0:
;   movq    %rdi, %rsi
;   lea     0(%rsp), %rdi
;   movl    $64, %edx
;   load_ext_name %Memcpy+0, %r9
;   call    *%r9
;   call    User(userextname0)
;   addq    %rsp, $64, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x40, %rsp
; block1: ; offset 0x8
;   movq %rdi, %rsi
;   leaq (%rsp), %rdi
;   movl $0x40, %edx
;   movabsq $0, %r9 ; reloc_external Abs8 %Memcpy 0
;   callq *%r9
;   callq 0x26 ; reloc_external CallPCRel4 u0:0 -4
;   addq $0x40, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function u0:3(i64, i64) -> i8 system_v {
fn1 = colocated u0:0(i64, i64 sarg(64)) -> i8 system_v

block0(v0: i64, v1: i64):
    v2 = call fn1(v0, v1)
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $80, %rsp
;   movq    %r14, 64(%rsp)
; block0:
;   movq    %rdi, %r14
;   lea     0(%rsp), %rdi
;   movl    $64, %edx
;   load_ext_name %Memcpy+0, %r10
;   call    *%r10
;   movq    %r14, %rdi
;   call    User(userextname0)
;   movq    64(%rsp), %r14
;   addq    %rsp, $80, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0x50, %rsp
;   movq %r14, 0x40(%rsp)
; block1: ; offset 0xd
;   movq %rdi, %r14
;   leaq (%rsp), %rdi
;   movl $0x40, %edx
;   movabsq $0, %r10 ; reloc_external Abs8 %Memcpy 0
;   callq *%r10
;   movq %r14, %rdi
;   callq 0x2e ; reloc_external CallPCRel4 u0:0 -4
;   movq 0x40(%rsp), %r14
;   addq $0x50, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function u0:4(i64 sarg(128), i64 sarg(64)) -> i8 system_v {
block0(v0: i64, v1: i64):
    v2 = load.i8 v0
    v3 = load.i8 v1
    v4 = iadd.i8 v2, v3
    return v4
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   lea     rbp(stack args max - 192), %rsi
;   lea     rbp(stack args max - 64), %rcx
;   movzbq  0(%rsi), %rax
;   movzbq  0(%rcx), %r9
;   addl    %eax, %r9d, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   leaq 0x10(%rbp), %rsi
;   leaq 0x90(%rbp), %rcx
;   movzbq (%rsi), %rax ; trap: heap_oob
;   movzbq (%rcx), %r9 ; trap: heap_oob
;   addl %r9d, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function u0:5(i64, i64, i64) -> i8 system_v {
fn1 = colocated u0:0(i64, i64 sarg(128), i64 sarg(64)) -> i8 system_v

block0(v0: i64, v1: i64, v2: i64):
    v3 = call fn1(v0, v1, v2)
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
;   subq    %rsp, $208, %rsp
;   movq    %rbx, 192(%rsp)
;   movq    %r13, 200(%rsp)
; block0:
;   movq    %rdx, %rbx
;   movq    %rdi, %r13
;   lea     0(%rsp), %rdi
;   movl    $128, %edx
;   load_ext_name %Memcpy+0, %r11
;   call    *%r11
;   lea     128(%rsp), %rdi
;   movl    $64, %edx
;   load_ext_name %Memcpy+0, %r9
;   movq    %rbx, %rsi
;   call    *%r9
;   movq    %r13, %rdi
;   call    User(userextname0)
;   movq    192(%rsp), %rbx
;   movq    200(%rsp), %r13
;   addq    %rsp, $208, %rsp
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
;   subq $0xd0, %rsp
;   movq %rbx, 0xc0(%rsp)
;   movq %r13, 0xc8(%rsp)
; block1: ; offset 0x1b
;   movq %rdx, %rbx
;   movq %rdi, %r13
;   leaq (%rsp), %rdi
;   movl $0x80, %edx
;   movabsq $0, %r11 ; reloc_external Abs8 %Memcpy 0
;   callq *%r11
;   leaq 0x80(%rsp), %rdi
;   movl $0x40, %edx
;   movabsq $0, %r9 ; reloc_external Abs8 %Memcpy 0
;   movq %rbx, %rsi
;   callq *%r9
;   movq %r13, %rdi
;   callq 0x5c ; reloc_external CallPCRel4 u0:0 -4
;   movq 0xc0(%rsp), %rbx
;   movq 0xc8(%rsp), %r13
;   addq $0xd0, %rsp
;   movq %rbp, %rsp
;   popq %rbp
;   retq

