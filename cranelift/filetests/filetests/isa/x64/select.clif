test compile precise-output
target x86_64

function %f0(i32, i32, i64, i64) -> i64 {
block0(v0: i32, v1: i32, v2: i64, v3: i64):
    v4 = icmp eq v0, v1
    v5 = uextend.i32 v4
    v6 = select.i64 v5, v2, v3
    return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   cmpl    %esi, %edi
;   movq    %rcx, %rax
;   cmovzq  %rdx, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cmpl %esi, %edi
;   movq %rcx, %rax
;   cmoveq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f0(f32, f32, i64, i64) -> i64 {
block0(v0: f32, v1: f32, v2: i64, v3: i64):
    v4 = fcmp eq v0, v1
    v5 = uextend.i32 v4
    v6 = select.i64 v5, v2, v3
    return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   ucomiss %xmm1, %xmm0
;   cmovpq  %rsi, %rdi, %rdi
;   movq    %rdi, %rax
;   cmovnzq %rsi, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ucomiss %xmm1, %xmm0
;   cmovpq %rsi, %rdi
;   movq %rdi, %rax
;   cmovneq %rsi, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %select_f16(i8, f16, f16) -> f16 {
block0(v0: i8, v1: f16, v2: f16):
    v3 = select.f16 v0, v1, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   movss %xmm0, %xmm0; jz $next; movss %xmm6, %xmm0; $next:
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   je 0x18
;   movaps %xmm6, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %select_f32(i8, f32, f32) -> f32 {
block0(v0: i8, v1: f32, v2: f32):
    v3 = select.f32 v0, v1, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   movss %xmm0, %xmm0; jz $next; movss %xmm6, %xmm0; $next:
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   je 0x18
;   movaps %xmm6, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %select_f64(i8, f64, f64) -> f64 {
block0(v0: i8, v1: f64, v2: f64):
    v3 = select.f64 v0, v1, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   movsd %xmm0, %xmm0; jz $next; movsd %xmm6, %xmm0; $next:
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   je 0x18
;   movaps %xmm6, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %select_f128(i8, f128, f128) -> f128 {
block0(v0: i8, v1: f128, v2: f128):
    v3 = select.f128 v0, v1, v2
    return v3
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   testb   %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   movdqa %xmm0, %xmm0; jz $next; movdqa %xmm6, %xmm0; $next:
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testb %dil, %dil
;   movdqa %xmm0, %xmm6
;   movdqa %xmm1, %xmm0
;   je 0x19
;   movdqa %xmm6, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

