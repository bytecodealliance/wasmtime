test compile precise-output
target x86_64

function %popcnt64(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrq    $1, %rax, %rax
;   movabsq $8608480567731124087, %rdx
;   andq %rdx, %rax
;   subq %rax, %rdi
;   shrq    $1, %rax, %rax
;   andq %rdx, %rax
;   subq %rax, %rdi
;   shrq    $1, %rax, %rax
;   andq %rdx, %rax
;   subq %rax, %rdi
;   movq    %rdi, %rax
;   shrq    $4, %rax, %rax
;   addq %rdi, %rax
;   movabsq $1085102592571150095, %r11
;   andq %r11, %rax
;   movabsq $72340172838076673, %rcx
;   imulq   %rax, %rcx, %rax
;   shrq    $56, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   shrq $1, %rax
;   movabsq $0x7777777777777777, %rdx
;   andq %rdx, %rax
;   subq %rax, %rdi
;   shrq $1, %rax
;   andq %rdx, %rax
;   subq %rax, %rdi
;   shrq $1, %rax
;   andq %rdx, %rax
;   subq %rax, %rdi
;   movq %rdi, %rax
;   shrq $4, %rax
;   addq %rdi, %rax
;   movabsq $0xf0f0f0f0f0f0f0f, %r11
;   andq %r11, %rax
;   movabsq $0x101010101010101, %rcx
;   imulq %rcx, %rax
;   shrq $0x38, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %popcnt64load(i64) -> i64 {
block0(v0: i64):
    v1 = load.i64 v0
    v2 = popcnt v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    0(%rdi), %rdx
;   movq    %rdx, %rcx
;   shrq    $1, %rcx, %rcx
;   movabsq $8608480567731124087, %r8
;   andq %r8, %rcx
;   subq %rcx, %rdx
;   shrq    $1, %rcx, %rcx
;   andq %r8, %rcx
;   subq %rcx, %rdx
;   shrq    $1, %rcx, %rcx
;   andq %r8, %rcx
;   subq %rcx, %rdx
;   movq    %rdx, %rax
;   shrq    $4, %rax, %rax
;   addq %rdx, %rax
;   movabsq $1085102592571150095, %rsi
;   andq %rsi, %rax
;   movabsq $72340172838076673, %rdx
;   imulq   %rax, %rdx, %rax
;   shrq    $56, %rax, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq (%rdi), %rdx ; trap: heap_oob
;   movq %rdx, %rcx
;   shrq $1, %rcx
;   movabsq $0x7777777777777777, %r8
;   andq %r8, %rcx
;   subq %rcx, %rdx
;   shrq $1, %rcx
;   andq %r8, %rcx
;   subq %rcx, %rdx
;   shrq $1, %rcx
;   andq %r8, %rcx
;   subq %rcx, %rdx
;   movq %rdx, %rax
;   shrq $4, %rax
;   addq %rdx, %rax
;   movabsq $0xf0f0f0f0f0f0f0f, %rsi
;   andq %rsi, %rax
;   movabsq $0x101010101010101, %rdx
;   imulq %rdx, %rax
;   shrq $0x38, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %popcnt32(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   shrl    $1, %eax, %eax
;   movl    $2004318071, %edx
;   andl %edx, %eax
;   subl %eax, %edi
;   shrl    $1, %eax, %eax
;   andl %edx, %eax
;   subl %eax, %edi
;   shrl    $1, %eax, %eax
;   andl %edx, %eax
;   subl %eax, %edi
;   movq    %rdi, %r9
;   shrl    $4, %r9d, %r9d
;   addl %edi, %r9d
;   andl $0xf0f0f0f, %r9d
;   imull   %r9d, 0x1010101, %eax
;   shrl    $24, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   shrl $1, %eax
;   movl $0x77777777, %edx
;   andl %edx, %eax
;   subl %eax, %edi
;   shrl $1, %eax
;   andl %edx, %eax
;   subl %eax, %edi
;   shrl $1, %eax
;   andl %edx, %eax
;   subl %eax, %edi
;   movq %rdi, %r9
;   shrl $4, %r9d
;   addl %edi, %r9d
;   andl $0xf0f0f0f, %r9d
;   imull $0x1010101, %r9d, %eax
;   shrl $0x18, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %popcnt32load(i64) -> i32 {
block0(v0: i64):
    v1 = load.i32 v0
    v2 = popcnt v1
    return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movl    0(%rdi), %eax
;   movq    %rax, %rcx
;   shrl    $1, %ecx, %ecx
;   movl    $2004318071, %r8d
;   andl %r8d, %ecx
;   subl %ecx, %eax
;   shrl    $1, %ecx, %ecx
;   andl %r8d, %ecx
;   subl %ecx, %eax
;   shrl    $1, %ecx, %ecx
;   andl %r8d, %ecx
;   subl %ecx, %eax
;   movq    %rax, %r10
;   shrl    $4, %r10d, %r10d
;   addl %eax, %r10d
;   andl $0xf0f0f0f, %r10d
;   imull   %r10d, 0x1010101, %eax
;   shrl    $24, %eax, %eax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movl (%rdi), %eax ; trap: heap_oob
;   movq %rax, %rcx
;   shrl $1, %ecx
;   movl $0x77777777, %r8d
;   andl %r8d, %ecx
;   subl %ecx, %eax
;   shrl $1, %ecx
;   andl %r8d, %ecx
;   subl %ecx, %eax
;   shrl $1, %ecx
;   andl %r8d, %ecx
;   subl %ecx, %eax
;   movq %rax, %r10
;   shrl $4, %r10d
;   addl %eax, %r10d
;   andl $0xf0f0f0f, %r10d
;   imull $0x1010101, %r10d, %eax
;   shrl $0x18, %eax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

