test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64

function %trap() {
block0:
  trap user1
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   ud2
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ud2 ; trap: user1

function %trap_iadd_ifcout(i64, i64) {
block0(v0: i64, v1: i64):
  v2 = uadd_overflow_trap v0, v1, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   addq %rsi, %rdi
;   jb #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   addq %rsi, %rdi
;   jb 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapz(i64) {
block0(v0: i64):
  trapz v0, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   testq %rdi, %rdi
;   jz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testq %rdi, %rdi
;   je 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapz_i128(i128) {
block0(v0: i128):
  trapz v0, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   orq %rdi, %rsi
;   testq %rsi, %rsi
;   jz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   orq %rdi, %rsi
;   testq %rsi, %rsi
;   je 0x15
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapnz(i64) {
block0(v0: i64):
  trapnz v0, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   testq %rdi, %rdi
;   jnz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   testq %rdi, %rdi
;   jne 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapnz_i128(i128) {
block0(v0: i128):
  trapnz v0, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   orq %rdi, %rsi
;   testq %rsi, %rsi
;   jnz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   orq %rdi, %rsi
;   testq %rsi, %rsi
;   jne 0x15
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapz_icmp(i64, i64) {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  trapz v2, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   cmpq %rsi, %rdi
;   jnz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cmpq %rsi, %rdi
;   jne 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapnz_icmp(i64, i64) {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  trapnz v2, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   cmpq %rsi, %rdi
;   jz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cmpq %rsi, %rdi
;   je 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapz_fcmp(f64, f64) {
block0(v0: f64, v1: f64):
  v2 = fcmp eq v0, v1
  trapz v2, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   ucomisd %xmm1, %xmm0
;   trap_if_or p, z, user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ucomisd %xmm1, %xmm0
;   jp 0x19
;   jne 0x19
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapnz_fcmp(f64, f64) {
block0(v0: f64, v1: f64):
  v2 = fcmp eq v0, v1
  trapnz v2, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   ucomisd %xmm1, %xmm0
;   trap_if_and p, nz, user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ucomisd %xmm1, %xmm0
;   jp 0x14
;   je 0x19
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapz_uextend_icmp(i64, i64) {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  v3 = uextend.i32 v2
  trapz v3, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   cmpq %rsi, %rdi
;   jnz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cmpq %rsi, %rdi
;   jne 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapnz_uextend_icmp(i64, i64) {
block0(v0: i64, v1: i64):
  v2 = icmp eq v0, v1
  v3 = uextend.i32 v2
  trapnz v3, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   cmpq %rsi, %rdi
;   jz #trap=user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   cmpq %rsi, %rdi
;   je 0x12
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapz_uextend_fcmp(f64, f64) {
block0(v0: f64, v1: f64):
  v2 = fcmp eq v0, v1
  v3 = uextend.i32 v2
  trapz v3, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   ucomisd %xmm1, %xmm0
;   trap_if_or p, z, user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ucomisd %xmm1, %xmm0
;   jp 0x19
;   jne 0x19
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

function %trapnz_uextend_fcmp(f64, f64) {
block0(v0: f64, v1: f64):
  v2 = fcmp eq v0, v1
  v3 = uextend.i32 v2
  trapnz v3, user1
  return
}

; VCode:
;   pushq %rbp
;   movq %rsp, %rbp
; block0:
;   ucomisd %xmm1, %xmm0
;   trap_if_and p, nz, user1
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   ucomisd %xmm1, %xmm0
;   jp 0x14
;   je 0x19
;   movq %rbp, %rsp
;   popq %rbp
;   retq
;   ud2 ; trap: user1

