test compile precise-output
target x86_64

function %smulhi_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = smulhi v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulb %sil ;; implicit: %ax
;   sarw $0x8, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulb %sil
;   sarw $8, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f1(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = smulhi v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulw %si ;; implicit: %ax, %dx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulw %si
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = smulhi v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imull %esi ;; implicit: %eax, %edx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imull %esi
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = smulhi v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulq %rsi ;; implicit: %rax, %rdx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulq %rsi
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

