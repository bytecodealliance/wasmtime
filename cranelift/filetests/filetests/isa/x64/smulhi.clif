test compile precise-output
target x86_64

function %smulhi_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = sextend.i16 v0
  v3 = sextend.i16 v1
  v4 = imul v2, v3
  v5 = sshr_imm v4, 8
  v6 = ireduce.i8 v5
  return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulb   %al, %sil, %al
;   sarw    $8, %ax, %ax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulb %sil
;   sarw $8, %ax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %smulhi_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = sextend.i32 v0
  v3 = sextend.i32 v1
  v4 = imul v2, v3
  v5 = sshr_imm v4, 16
  v6 = ireduce.i16 v5
  return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulw   %ax, %si, %ax, %dx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulw %si
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %smulhi_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sextend.i64 v0
  v3 = sextend.i64 v1
  v4 = imul v2, v3
  v5 = sshr_imm v4, 32
  v6 = ireduce.i32 v5
  return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imull   %eax, %esi, %eax, %edx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imull %esi
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %smulhi_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sextend.i128 v0
  v3 = sextend.i128 v1
  v4 = imul v2, v3
  v5, v6 = isplit v4
  return v6
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    %rdi, %rax
;   imulq   %rax, %rsi, %rax, %rdx
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq %rdi, %rax
;   imulq %rsi
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

