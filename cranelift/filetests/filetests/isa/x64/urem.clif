test compile precise-output
target x86_64

function %f1(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = urem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movzbl  %dil, %eax
;   divb %sil ;; implicit: %ax, trap=254
;   shrq $0x8, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movzbl %dil, %eax
;   divb %sil ; trap: int_divz
;   shrq $8, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = urem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   uninit  %rdx
;   xorq %rdx, %rdx
;   movq    %rdi, %rax
;   divw %si ;; implicit: %ax, %dx, trap=254
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   xorq %rdx, %rdx
;   movq %rdi, %rax
;   divw %si ; trap: int_divz
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f3(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = urem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   uninit  %rdx
;   xorq %rdx, %rdx
;   movq    %rdi, %rax
;   divl %esi ;; implicit: %eax, %edx, trap=254
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   xorq %rdx, %rdx
;   movq %rdi, %rax
;   divl %esi ; trap: int_divz
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = urem v0, v1
  return v2
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   uninit  %rdx
;   xorq %rdx, %rdx
;   movq    %rdi, %rax
;   divq %rsi ;; implicit: %rax, %rdx, trap=254
;   movq    %rdx, %rax
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   xorq %rdx, %rdx
;   movq %rdi, %rax
;   divq %rsi ; trap: int_divz
;   movq %rdx, %rax
;   movq %rbp, %rsp
;   popq %rbp
;   retq

