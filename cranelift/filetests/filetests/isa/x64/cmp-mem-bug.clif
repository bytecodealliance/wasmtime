test compile precise-output
target x86_64

function %f0(i64, i64) -> i64, i64 {
block0(v0: i64, v1: i64):
    v2 = load.i64 v1
    v3 = icmp eq v0, v2
    v4 = uextend.i64 v3
    v5 = select.i64 v3, v0, v1
    return v4, v5
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movq    0(%rsi), %r9
;   cmpq    %r9, %rdi
;   setz    %r10b
;   movzbq  %r10b, %rax
;   cmpq    %r9, %rdi
;   movq    %rsi, %rdx
;   cmovzq  %rdi, %rdx, %rdx
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movq (%rsi), %r9 ; trap: heap_oob
;   cmpq %r9, %rdi
;   sete %r10b
;   movzbq %r10b, %rax
;   cmpq %r9, %rdi
;   movq %rsi, %rdx
;   cmoveq %rdi, %rdx
;   movq %rbp, %rsp
;   popq %rbp
;   retq

function %f1(f64, i64) -> i64, f64 {
block0(v0: f64, v1: i64):
    v2 = load.f64 v1
    v3 = fcmp eq v0, v2
    v4 = uextend.i64 v3
    v5 = select.f64 v3, v0, v0
    return v4, v5
}

; VCode:
;   pushq   %rbp
;   movq    %rsp, %rbp
; block0:
;   movsd   0(%rdi), %xmm1
;   ucomisd %xmm1, %xmm0
;   setnp   %dil
;   setz    %al
;   andl %eax, %edi
;   movzbq  %dil, %rax
;   ucomisd %xmm1, %xmm0
;   movdqa  %xmm0, %xmm2
;   movsd %xmm0, %xmm0; jnp $next; movsd %xmm2, %xmm0; $next:
;   movsd %xmm0, %xmm0; jz $next; movsd %xmm2, %xmm0; $next:
;   movq    %rbp, %rsp
;   popq    %rbp
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   pushq %rbp
;   movq %rsp, %rbp
; block1: ; offset 0x4
;   movsd (%rdi), %xmm1 ; trap: heap_oob
;   ucomisd %xmm1, %xmm0
;   setnp %dil
;   sete %al
;   andl %eax, %edi
;   movzbq %dil, %rax
;   ucomisd %xmm1, %xmm0
;   movdqa %xmm0, %xmm2
;   jnp 0x2c
;   movsd %xmm2, %xmm0
;   je 0x36
;   movsd %xmm2, %xmm0
;   movq %rbp, %rsp
;   popq %rbp
;   retq

