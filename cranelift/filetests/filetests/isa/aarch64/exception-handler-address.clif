test compile precise-output
target aarch64

;; Index 0 on get_exception_handler_address selects index 0 in the
;; exceptional edges, i.e., the one to `block3`. Note the lowering
;; order reverses block3/block4 when reading the `label_address` inst;
;; compare to the exception table.
function %f0() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block1, 0
        jump block1

    block1:
        try_call fn0(), sig0, block2(), [ context v1, tag0: block3(exn1), default: block4() ]

    block2:
        return v1

    block3(v2: i64):
        return v2

    block4:
        return v1
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x27, x28, [sp, #-16]!
;   stp x25, x26, [sp, #-16]!
;   stp x23, x24, [sp, #-16]!
;   stp x21, x22, [sp, #-16]!
;   stp x19, x20, [sp, #-16]!
;   stp d14, d15, [sp, #-16]!
;   stp d12, d13, [sp, #-16]!
;   stp d10, d11, [sp, #-16]!
;   stp d8, d9, [sp, #-16]!
;   sub sp, sp, #16
; block0:
;   label_address x4, MachLabel(4)
;   str x4, [sp]
;   b label1
; block1:
;   load_ext_name_far x5, TestCase(%g)+0
;   blr x5; b MachLabel(2); catch [context stack0, tag0: MachLabel(4), default: MachLabel(3)]
; block2:
;   ldr x0, [sp]
;   add sp, sp, #16
;   ldp d8, d9, [sp], #16
;   ldp d10, d11, [sp], #16
;   ldp d12, d13, [sp], #16
;   ldp d14, d15, [sp], #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
; block3:
;   ldr x0, [sp]
;   add sp, sp, #16
;   ldp d8, d9, [sp], #16
;   ldp d10, d11, [sp], #16
;   ldp d12, d13, [sp], #16
;   ldp d14, d15, [sp], #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
; block4:
;   mov x0, x1
;   add sp, sp, #16
;   ldp d8, d9, [sp], #16
;   ldp d10, d11, [sp], #16
;   ldp d12, d13, [sp], #16
;   ldp d14, d15, [sp], #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x27, x28, [sp, #-0x10]!
;   stp x25, x26, [sp, #-0x10]!
;   stp x23, x24, [sp, #-0x10]!
;   stp x21, x22, [sp, #-0x10]!
;   stp x19, x20, [sp, #-0x10]!
;   stp d14, d15, [sp, #-0x10]!
;   stp d12, d13, [sp, #-0x10]!
;   stp d10, d11, [sp, #-0x10]!
;   stp d8, d9, [sp, #-0x10]!
;   sub sp, sp, #0x10
; block1: ; offset 0x30
;   adr x4, #0xb4
;   stur x4, [sp]
; block2: ; offset 0x38
;   ldr x5, #0x40
;   b #0x48
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %g 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x5
; block3: ; offset 0x4c
;   ldur x0, [sp]
;   add sp, sp, #0x10
;   ldp d8, d9, [sp], #0x10
;   ldp d10, d11, [sp], #0x10
;   ldp d12, d13, [sp], #0x10
;   ldp d14, d15, [sp], #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret
; block4: ; offset 0x80
;   ldur x0, [sp]
;   add sp, sp, #0x10
;   ldp d8, d9, [sp], #0x10
;   ldp d10, d11, [sp], #0x10
;   ldp d12, d13, [sp], #0x10
;   ldp d14, d15, [sp], #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret
; block5: ; offset 0xb4
;   mov x0, x1
;   add sp, sp, #0x10
;   ldp d8, d9, [sp], #0x10
;   ldp d10, d11, [sp], #0x10
;   ldp d12, d13, [sp], #0x10
;   ldp d14, d15, [sp], #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

;; Index 1 on get_exception_handler_address selects index 1 in the
;; exceptional edges, i.e., the one to `block4`. Note the lowering
;; order reverses block3/block4 when reading the `label_address` inst;
;; compare to the exception table.
function %f0() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block1, 1
        jump block1

    block1:
        try_call fn0(), sig0, block2(), [ context v1, tag0: block3(exn1), default: block4() ]

    block2:
        return v1

    block3(v2: i64):
        return v2

    block4:
        return v1
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x27, x28, [sp, #-16]!
;   stp x25, x26, [sp, #-16]!
;   stp x23, x24, [sp, #-16]!
;   stp x21, x22, [sp, #-16]!
;   stp x19, x20, [sp, #-16]!
;   stp d14, d15, [sp, #-16]!
;   stp d12, d13, [sp, #-16]!
;   stp d10, d11, [sp, #-16]!
;   stp d8, d9, [sp, #-16]!
;   sub sp, sp, #16
; block0:
;   label_address x4, MachLabel(3)
;   str x4, [sp]
;   b label1
; block1:
;   load_ext_name_far x5, TestCase(%g)+0
;   blr x5; b MachLabel(2); catch [context stack0, tag0: MachLabel(4), default: MachLabel(3)]
; block2:
;   ldr x0, [sp]
;   add sp, sp, #16
;   ldp d8, d9, [sp], #16
;   ldp d10, d11, [sp], #16
;   ldp d12, d13, [sp], #16
;   ldp d14, d15, [sp], #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
; block3:
;   ldr x0, [sp]
;   add sp, sp, #16
;   ldp d8, d9, [sp], #16
;   ldp d10, d11, [sp], #16
;   ldp d12, d13, [sp], #16
;   ldp d14, d15, [sp], #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
; block4:
;   mov x0, x1
;   add sp, sp, #16
;   ldp d8, d9, [sp], #16
;   ldp d10, d11, [sp], #16
;   ldp d12, d13, [sp], #16
;   ldp d14, d15, [sp], #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x27, x28, [sp, #-0x10]!
;   stp x25, x26, [sp, #-0x10]!
;   stp x23, x24, [sp, #-0x10]!
;   stp x21, x22, [sp, #-0x10]!
;   stp x19, x20, [sp, #-0x10]!
;   stp d14, d15, [sp, #-0x10]!
;   stp d12, d13, [sp, #-0x10]!
;   stp d10, d11, [sp, #-0x10]!
;   stp d8, d9, [sp, #-0x10]!
;   sub sp, sp, #0x10
; block1: ; offset 0x30
;   adr x4, #0x80
;   stur x4, [sp]
; block2: ; offset 0x38
;   ldr x5, #0x40
;   b #0x48
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %g 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x5
; block3: ; offset 0x4c
;   ldur x0, [sp]
;   add sp, sp, #0x10
;   ldp d8, d9, [sp], #0x10
;   ldp d10, d11, [sp], #0x10
;   ldp d12, d13, [sp], #0x10
;   ldp d14, d15, [sp], #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret
; block4: ; offset 0x80
;   ldur x0, [sp]
;   add sp, sp, #0x10
;   ldp d8, d9, [sp], #0x10
;   ldp d10, d11, [sp], #0x10
;   ldp d12, d13, [sp], #0x10
;   ldp d14, d15, [sp], #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret
; block5: ; offset 0xb4
;   mov x0, x1
;   add sp, sp, #0x10
;   ldp d8, d9, [sp], #0x10
;   ldp d10, d11, [sp], #0x10
;   ldp d12, d13, [sp], #0x10
;   ldp d14, d15, [sp], #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

