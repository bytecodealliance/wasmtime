test compile precise-output
set unwind_info=false
target aarch64

function %foo() {
block0:
    return
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %stack_limit_gv_leaf_zero(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
block0(v0: i64):
    return
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %stack_limit_gv_call_zero(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    fn0 = %foo()
block0(v0: i64):
    call fn0()
    return
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   ldr x16, [x0]
;   ldr x16, [x16, #4]
;   add x16, x16, #16
;   subs xzr, sp, x16, UXTX
;   b.lo #trap=stk_ovf
; block0:
;   load_ext_name_far x0, TestCase(%foo)+0
;   blr x0
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   ldur x16, [x0]
;   ldur x16, [x16, #4]
;   add x16, x16, #0x10
;   cmp sp, x16
;   b.lo #0x38
; block1: ; offset 0x1c
;   ldr x0, #0x24
;   b #0x2c
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %foo 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x0
;   ldp x29, x30, [sp], #0x10
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: stk_ovf

function %limit_preamble(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 20
block0(v0: i64):
    return
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   ldr x16, [x0]
;   ldr x16, [x16, #4]
;   add x16, x16, #32
;   subs xzr, sp, x16, UXTX
;   b.lo #trap=stk_ovf
;   sub sp, sp, #32
; block0:
;   add sp, sp, #32
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   ldur x16, [x0]
;   ldur x16, [x16, #4]
;   add x16, x16, #0x20
;   cmp sp, x16
;   b.lo #0x2c
;   sub sp, sp, #0x20
; block1: ; offset 0x20
;   add sp, sp, #0x20
;   ldp x29, x30, [sp], #0x10
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: stk_ovf

function %limit_preamble_huge(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0
    gv2 = load.i64 notrap aligned gv1+4
    stack_limit = gv2
    ss0 = explicit_slot 400000
block0(v0: i64):
    return
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   ldr x16, [x0]
;   ldr x16, [x16, #4]
;   subs xzr, sp, x16, UXTX
;   b.lo #trap=stk_ovf
;   movz w17, #6784
;   movk w17, w17, #6, LSL #16
;   add x16, x16, x17, UXTX
;   subs xzr, sp, x16, UXTX
;   b.lo #trap=stk_ovf
;   movz w16, #6784
;   movk w16, w16, #6, LSL #16
;   sub sp, sp, x16, UXTX
; block0:
;   movz w16, #6784
;   movk w16, w16, #6, LSL #16
;   add sp, sp, x16, UXTX
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   ldur x16, [x0]
;   ldur x16, [x16, #4]
;   cmp sp, x16
;   b.lo #0x4c
;   mov w17, #0x1a80
;   movk w17, #6, lsl #16
;   add x16, x16, x17, uxtx
;   cmp sp, x16
;   b.lo #0x50
;   mov w16, #0x1a80
;   movk w16, #6, lsl #16
;   sub sp, sp, x16
; block1: ; offset 0x38
;   mov w16, #0x1a80
;   movk w16, #6, lsl #16
;   add sp, sp, x16
;   ldp x29, x30, [sp], #0x10
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: stk_ovf
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: stk_ovf

function %limit_preamble_huge_offset(i64 vmctx) {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0+400000
    stack_limit = gv1
    ss0 = explicit_slot 20
block0(v0: i64):
    return
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   movz w16, #6784 ; movk w16, w16, #6, LSL #16 ; ldr x16, [x0, x16, SXTX]
;   add x16, x16, #32
;   subs xzr, sp, x16, UXTX
;   b.lo #trap=stk_ovf
;   sub sp, sp, #32
; block0:
;   add sp, sp, #32
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   mov w16, #0x1a80
;   movk w16, #6, lsl #16
;   ldr x16, [x0, x16, sxtx]
;   add x16, x16, #0x20
;   cmp sp, x16
;   b.lo #0x30
;   sub sp, sp, #0x20
; block1: ; offset 0x24
;   add sp, sp, #0x20
;   ldp x29, x30, [sp], #0x10
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: stk_ovf

