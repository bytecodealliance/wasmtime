test compile precise-output
target aarch64

function %div8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = sdiv v0, v1
  return v2
}

; VCode:
; block0:
;   sxtb w3, w0
;   sxtb w5, w1
;   cbz w5, #trap=int_divz
;   lsl w8, w3, #24
;   adds wzr, w5, #1
;   ccmp w8, #1, #nzcv, eq
;   b.vs #trap=int_ovf
;   sdiv w0, w3, w5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sxtb w3, w0
;   sxtb w5, w1
;   cbz w5, #0x24
;   lsl w8, w3, #0x18
;   cmn w5, #1
;   ccmp w8, #1, #0, eq
;   b.vs #0x28
;   sdiv w0, w3, w5
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_divz
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_ovf

function %div16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = sdiv v0, v1
  return v2
}

; VCode:
; block0:
;   sxth w3, w0
;   sxth w5, w1
;   cbz w5, #trap=int_divz
;   lsl w8, w3, #16
;   adds wzr, w5, #1
;   ccmp w8, #1, #nzcv, eq
;   b.vs #trap=int_ovf
;   sdiv w0, w3, w5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sxth w3, w0
;   sxth w5, w1
;   cbz w5, #0x24
;   lsl w8, w3, #0x10
;   cmn w5, #1
;   ccmp w8, #1, #0, eq
;   b.vs #0x28
;   sdiv w0, w3, w5
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_divz
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_ovf

function %div32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sdiv v0, v1
  return v2
}

; VCode:
; block0:
;   cbz w1, #trap=int_divz
;   adds wzr, w1, #1
;   ccmp w0, #1, #nzcv, eq
;   b.vs #trap=int_ovf
;   sdiv w0, w0, w1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   cbz w1, #0x18
;   cmn w1, #1
;   ccmp w0, #1, #0, eq
;   b.vs #0x1c
;   sdiv w0, w0, w1
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_divz
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_ovf

function %div64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = sdiv v0, v1
  return v2
}

; VCode:
; block0:
;   cbz x1, #trap=int_divz
;   adds xzr, x1, #1
;   ccmp x0, #1, #nzcv, eq
;   b.vs #trap=int_ovf
;   sdiv x0, x0, x1
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   cbz x1, #0x18
;   cmn x1, #1
;   ccmp x0, #1, #0, eq
;   b.vs #0x1c
;   sdiv x0, x0, x1
;   ret
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_divz
;   .byte 0x1f, 0xc1, 0x00, 0x00 ; trap: int_ovf

