test compile precise-output
set unwind_info=false
target aarch64 use_bti

function %f1(i32) -> i32 {
block0(v0: i32):
    br_table v0, block4, [block1, block2, block3]

block1:
    v1 = iconst.i32 1
    jump block5(v1)

block2:
    v2 = iconst.i32 2
    jump block5(v2)

block3:
    v3 = iconst.i32 3
    jump block5(v3)

block4:
    v4 = iconst.i32 4
    jump block5(v4)

block5(v5: i32):
    v6 = iadd.i32 v0, v5
    return v6
}

; VCode:
;   bti c
; block0:
;   emit_island 44
;   subs wzr, w0, #3
;   b.hs label4 ; csel x11, xzr, x0, hs ; csdb ; adr x10, pc+16 ; ldrsw x11, [x10, x11, uxtw #2] ; add x10, x10, x11 ; br x10 ; jt_entries [MachLabel(3), MachLabel(2), MachLabel(1)]
; block1:
;   bti j
;   movz w5, #3
;   b label5
; block2:
;   bti j
;   movz w5, #2
;   b label5
; block3:
;   bti j
;   movz w5, #1
;   b label5
; block4:
;   movz w5, #4
;   b label5
; block5:
;   add w0, w0, w5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   hint #0x22
; block1: ; offset 0x4
;   cmp w0, #3
;   b.hs #0x54
;   csel x11, xzr, x0, hs
;   csdb
;   adr x10, #0x24
;   ldrsw x11, [x10, w11, uxtw #2]
;   add x10, x10, x11
;   br x10
;   .byte 0x24, 0x00, 0x00, 0x00
;   .byte 0x18, 0x00, 0x00, 0x00
;   .byte 0x0c, 0x00, 0x00, 0x00
; block2: ; offset 0x30
;   hint #0x24
;   mov w5, #3
;   b #0x58
; block3: ; offset 0x3c
;   hint #0x24
;   mov w5, #2
;   b #0x58
; block4: ; offset 0x48
;   hint #0x24
;   mov w5, #1
;   b #0x58
; block5: ; offset 0x54
;   mov w5, #4
; block6: ; offset 0x58
;   add w0, w0, w5
;   ret

function %f2(i64) -> i64 {
block0(v0: i64):
    v1 = ireduce.i32 v0
    v2 = load.i64 notrap aligned table v0
    br_table v1, block1, [block2]

block1:
    return v2

block2:
    v3 = iconst.i64 42
    v4 = iadd.i64 v2, v3
    return v4
}

; VCode:
;   bti c
; block0:
;   ldr x5, [x0]
;   mov x8, x5
;   emit_island 36
;   subs wzr, w0, #1
;   b.hs label2 ; csel x7, xzr, x0, hs ; csdb ; adr x6, pc+16 ; ldrsw x7, [x6, x7, uxtw #2] ; add x6, x6, x7 ; br x6 ; jt_entries [MachLabel(1)]
; block1:
;   bti j
;   mov x0, x8
;   add x0, x0, #42
;   ret
; block2:
;   mov x0, x8
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   hint #0x22
; block1: ; offset 0x4
;   ldr x5, [x0]
;   mov x8, x5
;   cmp w0, #1
;   b.hs #0x40
;   csel x7, xzr, x0, hs
;   csdb
;   adr x6, #0x2c
;   ldrsw x7, [x6, w7, uxtw #2]
;   add x6, x6, x7
;   br x6
;   .byte 0x04, 0x00, 0x00, 0x00
; block2: ; offset 0x30
;   hint #0x24
;   mov x0, x8
;   add x0, x0, #0x2a
;   ret
; block3: ; offset 0x40
;   mov x0, x8
;   ret

function %f3(i64) -> i64 {
    fn0 = %g(i64) -> i64

block0(v0: i64):
    v1 = call fn0(v0)
    return v1
}

; VCode:
;   bti c
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
; block0:
;   load_ext_name_far x3, TestCase(%g)+0
;   blr x3
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   hint #0x22
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
; block1: ; offset 0xc
;   ldr x3, #0x14
;   b #0x1c
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %g 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x3
;   ldp x29, x30, [sp], #0x10
;   ret

