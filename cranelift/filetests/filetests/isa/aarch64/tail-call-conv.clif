test compile precise-output
target aarch64

;; Test the `tail` calling convention with non-tail calls and stack arguments.

function %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v25
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
; block0:
;   ldr x2, [sp, #168]
;   ldp fp, lr, [sp], #16
;   add sp, sp, #160
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
; block1: ; offset 0x8
;   ldur x2, [sp, #0xa8]
;   ldp x29, x30, [sp], #0x10
;   add sp, sp, #0xa0
;   ret

function %tail_caller_stack_args() -> i64 tail {
    fn0 = %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    v26 = call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
    return v26
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x27, x28, [sp, #-16]!
;   stp x25, x26, [sp, #-16]!
;   stp x23, x24, [sp, #-16]!
;   stp x21, x22, [sp, #-16]!
;   stp x19, x20, [sp, #-16]!
;   sub sp, sp, #160
; block0:
;   movz x2, #10
;   movz x3, #15
;   movz x4, #20
;   movz x5, #25
;   movz x6, #30
;   movz x7, #35
;   movz x11, #40
;   movz x12, #45
;   movz x13, #50
;   movz x14, #55
;   movz x15, #60
;   movz x0, #65
;   movz x1, #70
;   movz x8, #75
;   movz x9, #80
;   movz x10, #85
;   movz x27, #90
;   movz x28, #95
;   movz x21, #100
;   movz x19, #105
;   movz x20, #110
;   movz x22, #115
;   movz x23, #120
;   movz x24, #125
;   movz x25, #130
;   movz x26, #135
;   str x11, [sp]
;   str x12, [sp, #8]
;   str x13, [sp, #16]
;   str x14, [sp, #24]
;   str x15, [sp, #32]
;   str x0, [sp, #40]
;   str x1, [sp, #48]
;   str x8, [sp, #56]
;   str x9, [sp, #64]
;   str x10, [sp, #72]
;   str x27, [sp, #80]
;   str x28, [sp, #88]
;   str x21, [sp, #96]
;   str x19, [sp, #104]
;   str x20, [sp, #112]
;   str x22, [sp, #120]
;   str x23, [sp, #128]
;   str x24, [sp, #136]
;   str x25, [sp, #144]
;   str x26, [sp, #152]
;   load_ext_name x15, TestCase(%tail_callee_stack_args)+0
;   blr x15
;   add sp, sp, #160
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x27, x28, [sp, #-0x10]!
;   stp x25, x26, [sp, #-0x10]!
;   stp x23, x24, [sp, #-0x10]!
;   stp x21, x22, [sp, #-0x10]!
;   stp x19, x20, [sp, #-0x10]!
;   sub sp, sp, #0xa0
; block1: ; offset 0x20
;   mov x2, #0xa
;   mov x3, #0xf
;   mov x4, #0x14
;   mov x5, #0x19
;   mov x6, #0x1e
;   mov x7, #0x23
;   mov x11, #0x28
;   mov x12, #0x2d
;   mov x13, #0x32
;   mov x14, #0x37
;   mov x15, #0x3c
;   mov x0, #0x41
;   mov x1, #0x46
;   mov x8, #0x4b
;   mov x9, #0x50
;   mov x10, #0x55
;   mov x27, #0x5a
;   mov x28, #0x5f
;   mov x21, #0x64
;   mov x19, #0x69
;   mov x20, #0x6e
;   mov x22, #0x73
;   mov x23, #0x78
;   mov x24, #0x7d
;   mov x25, #0x82
;   mov x26, #0x87
;   stur x11, [sp]
;   stur x12, [sp, #8]
;   stur x13, [sp, #0x10]
;   stur x14, [sp, #0x18]
;   stur x15, [sp, #0x20]
;   stur x0, [sp, #0x28]
;   stur x1, [sp, #0x30]
;   stur x8, [sp, #0x38]
;   stur x9, [sp, #0x40]
;   stur x10, [sp, #0x48]
;   stur x27, [sp, #0x50]
;   stur x28, [sp, #0x58]
;   stur x21, [sp, #0x60]
;   stur x19, [sp, #0x68]
;   stur x20, [sp, #0x70]
;   stur x22, [sp, #0x78]
;   stur x23, [sp, #0x80]
;   stur x24, [sp, #0x88]
;   stur x25, [sp, #0x90]
;   stur x26, [sp, #0x98]
;   ldr x15, #0xe0
;   b #0xe8
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_args 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x15
;   sub sp, sp, #0xa0
;   add sp, sp, #0xa0
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

;; Test the `tail` calling convention with non-tail calls and stack returns.

function %tail_callee_stack_rets() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail {
block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    return v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x27, x28, [sp, #-16]!
;   stp x25, x26, [sp, #-16]!
;   stp x23, x24, [sp, #-16]!
;   stp x21, x22, [sp, #-16]!
;   stp x19, x20, [sp, #-16]!
;   sub sp, sp, #16
; block0:
;   movz x3, #10
;   str x3, [sp]
;   movz x3, #15
;   movz x4, #20
;   movz x5, #25
;   movz x6, #30
;   movz x7, #35
;   movz x11, #40
;   movz x12, #45
;   movz x13, #50
;   movz x14, #55
;   movz x15, #60
;   movz x0, #65
;   movz x1, #70
;   movz x9, #75
;   movz x10, #80
;   movz x27, #85
;   movz x28, #90
;   movz x21, #95
;   movz x19, #100
;   movz x20, #105
;   movz x22, #110
;   movz x23, #115
;   movz x24, #120
;   movz x25, #125
;   movz x26, #130
;   movz x2, #135
;   str x11, [x8]
;   str x12, [x8, #8]
;   str x13, [x8, #16]
;   str x14, [x8, #24]
;   str x15, [x8, #32]
;   str x0, [x8, #40]
;   str x1, [x8, #48]
;   str x9, [x8, #56]
;   str x10, [x8, #64]
;   str x27, [x8, #72]
;   str x28, [x8, #80]
;   str x21, [x8, #88]
;   str x19, [x8, #96]
;   str x20, [x8, #104]
;   str x22, [x8, #112]
;   str x23, [x8, #120]
;   str x24, [x8, #128]
;   str x25, [x8, #136]
;   str x26, [x8, #144]
;   str x2, [x8, #152]
;   ldr x2, [sp]
;   add sp, sp, #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x27, x28, [sp, #-0x10]!
;   stp x25, x26, [sp, #-0x10]!
;   stp x23, x24, [sp, #-0x10]!
;   stp x21, x22, [sp, #-0x10]!
;   stp x19, x20, [sp, #-0x10]!
;   sub sp, sp, #0x10
; block1: ; offset 0x20
;   mov x3, #0xa
;   stur x3, [sp]
;   mov x3, #0xf
;   mov x4, #0x14
;   mov x5, #0x19
;   mov x6, #0x1e
;   mov x7, #0x23
;   mov x11, #0x28
;   mov x12, #0x2d
;   mov x13, #0x32
;   mov x14, #0x37
;   mov x15, #0x3c
;   mov x0, #0x41
;   mov x1, #0x46
;   mov x9, #0x4b
;   mov x10, #0x50
;   mov x27, #0x55
;   mov x28, #0x5a
;   mov x21, #0x5f
;   mov x19, #0x64
;   mov x20, #0x69
;   mov x22, #0x6e
;   mov x23, #0x73
;   mov x24, #0x78
;   mov x25, #0x7d
;   mov x26, #0x82
;   mov x2, #0x87
;   stur x11, [x8]
;   stur x12, [x8, #8]
;   stur x13, [x8, #0x10]
;   stur x14, [x8, #0x18]
;   stur x15, [x8, #0x20]
;   stur x0, [x8, #0x28]
;   stur x1, [x8, #0x30]
;   stur x9, [x8, #0x38]
;   stur x10, [x8, #0x40]
;   stur x27, [x8, #0x48]
;   stur x28, [x8, #0x50]
;   stur x21, [x8, #0x58]
;   stur x19, [x8, #0x60]
;   stur x20, [x8, #0x68]
;   stur x22, [x8, #0x70]
;   stur x23, [x8, #0x78]
;   stur x24, [x8, #0x80]
;   stur x25, [x8, #0x88]
;   stur x26, [x8, #0x90]
;   stur x2, [x8, #0x98]
;   ldur x2, [sp]
;   add sp, sp, #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

function %tail_caller_stack_rets() -> i64 tail {
    fn0 = %tail_callee_stack_rets() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail

block0:
    v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 = call fn0()
    return v25
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   sub sp, sp, #160
; block0:
;   mov x8, sp
;   load_ext_name x12, TestCase(%tail_callee_stack_rets)+0
;   blr x12
;   ldr x9, [sp]
;   ldr x11, [sp, #8]
;   ldr x13, [sp, #16]
;   ldr x15, [sp, #24]
;   ldr x1, [sp, #32]
;   ldr x3, [sp, #40]
;   ldr x5, [sp, #48]
;   ldr x7, [sp, #56]
;   ldr x9, [sp, #64]
;   ldr x11, [sp, #72]
;   ldr x13, [sp, #80]
;   ldr x15, [sp, #88]
;   ldr x1, [sp, #96]
;   ldr x3, [sp, #104]
;   ldr x5, [sp, #112]
;   ldr x7, [sp, #120]
;   ldr x9, [sp, #128]
;   ldr x11, [sp, #136]
;   ldr x13, [sp, #144]
;   ldr x2, [sp, #152]
;   add sp, sp, #160
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   sub sp, sp, #0xa0
; block1: ; offset 0xc
;   mov x8, sp
;   ldr x12, #0x18
;   b #0x20
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_rets 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x12
;   ldur x9, [sp]
;   ldur x11, [sp, #8]
;   ldur x13, [sp, #0x10]
;   ldur x15, [sp, #0x18]
;   ldur x1, [sp, #0x20]
;   ldur x3, [sp, #0x28]
;   ldur x5, [sp, #0x30]
;   ldur x7, [sp, #0x38]
;   ldur x9, [sp, #0x40]
;   ldur x11, [sp, #0x48]
;   ldur x13, [sp, #0x50]
;   ldur x15, [sp, #0x58]
;   ldur x1, [sp, #0x60]
;   ldur x3, [sp, #0x68]
;   ldur x5, [sp, #0x70]
;   ldur x7, [sp, #0x78]
;   ldur x9, [sp, #0x80]
;   ldur x11, [sp, #0x88]
;   ldur x13, [sp, #0x90]
;   ldur x2, [sp, #0x98]
;   add sp, sp, #0xa0
;   ldp x29, x30, [sp], #0x10
;   ret

;; Test the `tail` calling convention with non-tail calls and both stack
;; arguments and stack returns.

function %tail_callee_stack_args_and_rets(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x27, x28, [sp, #-16]!
;   stp x25, x26, [sp, #-16]!
;   stp x23, x24, [sp, #-16]!
;   stp x21, x22, [sp, #-16]!
;   stp x19, x20, [sp, #-16]!
;   sub sp, sp, #16
; block0:
;   str x7, [sp]
;   ldr x7, [sp, #112]
;   ldr x19, [sp, #120]
;   ldr x22, [sp, #128]
;   ldr x24, [sp, #136]
;   ldr x26, [sp, #144]
;   ldr x28, [sp, #152]
;   ldr x21, [sp, #160]
;   ldr x20, [sp, #168]
;   ldr x23, [sp, #176]
;   ldr x25, [sp, #184]
;   ldr x27, [sp, #192]
;   ldr x0, [sp, #200]
;   ldr x15, [sp, #208]
;   ldr x1, [sp, #216]
;   ldr x14, [sp, #224]
;   ldr x12, [sp, #232]
;   ldr x10, [sp, #240]
;   ldr x9, [sp, #248]
;   ldr x11, [sp, #256]
;   ldr x13, [sp, #264]
;   str x7, [x8]
;   str x19, [x8, #8]
;   str x22, [x8, #16]
;   str x24, [x8, #24]
;   str x26, [x8, #32]
;   str x28, [x8, #40]
;   str x21, [x8, #48]
;   str x20, [x8, #56]
;   str x23, [x8, #64]
;   str x25, [x8, #72]
;   str x27, [x8, #80]
;   str x0, [x8, #88]
;   str x15, [x8, #96]
;   str x1, [x8, #104]
;   str x14, [x8, #112]
;   str x12, [x8, #120]
;   str x10, [x8, #128]
;   str x9, [x8, #136]
;   str x11, [x8, #144]
;   str x13, [x8, #152]
;   ldr x7, [sp]
;   add sp, sp, #16
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   add sp, sp, #160
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x27, x28, [sp, #-0x10]!
;   stp x25, x26, [sp, #-0x10]!
;   stp x23, x24, [sp, #-0x10]!
;   stp x21, x22, [sp, #-0x10]!
;   stp x19, x20, [sp, #-0x10]!
;   sub sp, sp, #0x10
; block1: ; offset 0x20
;   stur x7, [sp]
;   ldur x7, [sp, #0x70]
;   ldur x19, [sp, #0x78]
;   ldur x22, [sp, #0x80]
;   ldur x24, [sp, #0x88]
;   ldur x26, [sp, #0x90]
;   ldur x28, [sp, #0x98]
;   ldur x21, [sp, #0xa0]
;   ldur x20, [sp, #0xa8]
;   ldur x23, [sp, #0xb0]
;   ldur x25, [sp, #0xb8]
;   ldur x27, [sp, #0xc0]
;   ldur x0, [sp, #0xc8]
;   ldur x15, [sp, #0xd0]
;   ldur x1, [sp, #0xd8]
;   ldur x14, [sp, #0xe0]
;   ldur x12, [sp, #0xe8]
;   ldur x10, [sp, #0xf0]
;   ldur x9, [sp, #0xf8]
;   ldr x11, [sp, #0x100]
;   ldr x13, [sp, #0x108]
;   stur x7, [x8]
;   stur x19, [x8, #8]
;   stur x22, [x8, #0x10]
;   stur x24, [x8, #0x18]
;   stur x26, [x8, #0x20]
;   stur x28, [x8, #0x28]
;   stur x21, [x8, #0x30]
;   stur x20, [x8, #0x38]
;   stur x23, [x8, #0x40]
;   stur x25, [x8, #0x48]
;   stur x27, [x8, #0x50]
;   stur x0, [x8, #0x58]
;   stur x15, [x8, #0x60]
;   stur x1, [x8, #0x68]
;   stur x14, [x8, #0x70]
;   stur x12, [x8, #0x78]
;   stur x10, [x8, #0x80]
;   stur x9, [x8, #0x88]
;   stur x11, [x8, #0x90]
;   stur x13, [x8, #0x98]
;   ldur x7, [sp]
;   add sp, sp, #0x10
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   add sp, sp, #0xa0
;   ret

function %tail_caller_stack_args_and_rets() -> i64 tail {
    fn0 = %tail_callee_stack_args_and_rets(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51 = call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
    return v51
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x27, x28, [sp, #-16]!
;   stp x25, x26, [sp, #-16]!
;   stp x23, x24, [sp, #-16]!
;   stp x21, x22, [sp, #-16]!
;   stp x19, x20, [sp, #-16]!
;   sub sp, sp, #320
; block0:
;   movz x2, #10
;   movz x3, #15
;   movz x4, #20
;   movz x5, #25
;   movz x6, #30
;   movz x7, #35
;   movz x8, #40
;   movz x9, #45
;   movz x10, #50
;   movz x11, #55
;   movz x12, #60
;   movz x13, #65
;   movz x14, #70
;   movz x15, #75
;   movz x0, #80
;   movz x1, #85
;   movz x23, #90
;   movz x24, #95
;   movz x25, #100
;   movz x26, #105
;   movz x27, #110
;   movz x28, #115
;   movz x21, #120
;   movz x19, #125
;   movz x20, #130
;   movz x22, #135
;   str x8, [sp]
;   str x9, [sp, #8]
;   str x10, [sp, #16]
;   str x11, [sp, #24]
;   str x12, [sp, #32]
;   str x13, [sp, #40]
;   str x14, [sp, #48]
;   str x15, [sp, #56]
;   str x0, [sp, #64]
;   str x1, [sp, #72]
;   str x23, [sp, #80]
;   str x24, [sp, #88]
;   str x25, [sp, #96]
;   str x26, [sp, #104]
;   str x27, [sp, #112]
;   str x28, [sp, #120]
;   str x21, [sp, #128]
;   str x19, [sp, #136]
;   str x20, [sp, #144]
;   str x22, [sp, #152]
;   add x8, sp, #160
;   load_ext_name x10, TestCase(%tail_callee_stack_args_and_rets)+0
;   blr x10
;   ldr x7, [sp, #160]
;   ldr x9, [sp, #168]
;   ldr x11, [sp, #176]
;   ldr x13, [sp, #184]
;   ldr x15, [sp, #192]
;   ldr x1, [sp, #200]
;   ldr x3, [sp, #208]
;   ldr x5, [sp, #216]
;   ldr x7, [sp, #224]
;   ldr x9, [sp, #232]
;   ldr x11, [sp, #240]
;   ldr x13, [sp, #248]
;   ldr x15, [sp, #256]
;   ldr x1, [sp, #264]
;   ldr x3, [sp, #272]
;   ldr x5, [sp, #280]
;   ldr x7, [sp, #288]
;   ldr x9, [sp, #296]
;   ldr x11, [sp, #304]
;   ldr x2, [sp, #312]
;   add sp, sp, #320
;   ldp x19, x20, [sp], #16
;   ldp x21, x22, [sp], #16
;   ldp x23, x24, [sp], #16
;   ldp x25, x26, [sp], #16
;   ldp x27, x28, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x27, x28, [sp, #-0x10]!
;   stp x25, x26, [sp, #-0x10]!
;   stp x23, x24, [sp, #-0x10]!
;   stp x21, x22, [sp, #-0x10]!
;   stp x19, x20, [sp, #-0x10]!
;   sub sp, sp, #0x140
; block1: ; offset 0x20
;   mov x2, #0xa
;   mov x3, #0xf
;   mov x4, #0x14
;   mov x5, #0x19
;   mov x6, #0x1e
;   mov x7, #0x23
;   mov x8, #0x28
;   mov x9, #0x2d
;   mov x10, #0x32
;   mov x11, #0x37
;   mov x12, #0x3c
;   mov x13, #0x41
;   mov x14, #0x46
;   mov x15, #0x4b
;   mov x0, #0x50
;   mov x1, #0x55
;   mov x23, #0x5a
;   mov x24, #0x5f
;   mov x25, #0x64
;   mov x26, #0x69
;   mov x27, #0x6e
;   mov x28, #0x73
;   mov x21, #0x78
;   mov x19, #0x7d
;   mov x20, #0x82
;   mov x22, #0x87
;   stur x8, [sp]
;   stur x9, [sp, #8]
;   stur x10, [sp, #0x10]
;   stur x11, [sp, #0x18]
;   stur x12, [sp, #0x20]
;   stur x13, [sp, #0x28]
;   stur x14, [sp, #0x30]
;   stur x15, [sp, #0x38]
;   stur x0, [sp, #0x40]
;   stur x1, [sp, #0x48]
;   stur x23, [sp, #0x50]
;   stur x24, [sp, #0x58]
;   stur x25, [sp, #0x60]
;   stur x26, [sp, #0x68]
;   stur x27, [sp, #0x70]
;   stur x28, [sp, #0x78]
;   stur x21, [sp, #0x80]
;   stur x19, [sp, #0x88]
;   stur x20, [sp, #0x90]
;   stur x22, [sp, #0x98]
;   add x8, sp, #0xa0
;   ldr x10, #0xe4
;   b #0xec
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_args_and_rets 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   blr x10
;   sub sp, sp, #0xa0
;   ldur x7, [sp, #0xa0]
;   ldur x9, [sp, #0xa8]
;   ldur x11, [sp, #0xb0]
;   ldur x13, [sp, #0xb8]
;   ldur x15, [sp, #0xc0]
;   ldur x1, [sp, #0xc8]
;   ldur x3, [sp, #0xd0]
;   ldur x5, [sp, #0xd8]
;   ldur x7, [sp, #0xe0]
;   ldur x9, [sp, #0xe8]
;   ldur x11, [sp, #0xf0]
;   ldur x13, [sp, #0xf8]
;   ldr x15, [sp, #0x100]
;   ldr x1, [sp, #0x108]
;   ldr x3, [sp, #0x110]
;   ldr x5, [sp, #0x118]
;   ldr x7, [sp, #0x120]
;   ldr x9, [sp, #0x128]
;   ldr x11, [sp, #0x130]
;   ldr x2, [sp, #0x138]
;   add sp, sp, #0x140
;   ldp x19, x20, [sp], #0x10
;   ldp x21, x22, [sp], #0x10
;   ldp x23, x24, [sp], #0x10
;   ldp x25, x26, [sp], #0x10
;   ldp x27, x28, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

