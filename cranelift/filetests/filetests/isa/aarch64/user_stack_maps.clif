test compile precise-output
set unwind_info=false
set enable_probestack=false
target aarch64

function %foo() system_v {
    ss0 = explicit_slot 12, align = 4
    sig0 = (i32) system_v
    fn0 = colocated u0:0 sig0

block0:
    v0 = iconst.i32 0
    v1 = iconst.i32 1
    v2 = iconst.i32 2
    v3 = iconst.i32 3

    stack_store v0, ss0
    stack_store v1, ss0+4
    stack_store v2, ss0+8
    call fn0(v0), stack_map=[i32 @ ss0+0, i32 @ ss0+4, i32 @ ss0+8]

    stack_store v1, ss0
    stack_store v2, ss0+4
    call fn0(v0), stack_map=[i32 @ ss0+0, i32 @ ss0+4]

    stack_store v2, ss0
    call fn0(v1), stack_map=[i32 @ ss0+0]

    call fn0(v2)

    return
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   str x24, [sp, #-16]!
;   stp x19, x22, [sp, #-16]!
;   sub sp, sp, #16
; block0:
;   movz w9, #0
;   movz w8, #1
;   movz w0, #2
;   mov x10, sp
;   str w9, [x10]
;   mov x24, x9
;   add x9, sp, #4
;   str w8, [x9]
;   mov x19, x8
;   add x10, sp, #8
;   str w0, [x10]
;   mov x22, x0
;   mov x0, x24
;   bl 0
;   ; UserStackMap { by_type: [(types::I32, CompoundBitSet {0, 4, 8})], sp_to_sized_stack_slots: None }
;   mov x12, sp
;   mov x0, x19
;   str w0, [x12]
;   add x13, sp, #4
;   mov x0, x22
;   str w0, [x13]
;   mov x0, x24
;   bl 0
;   ; UserStackMap { by_type: [(types::I32, CompoundBitSet {0, 4})], sp_to_sized_stack_slots: None }
;   mov x15, sp
;   mov x0, x22
;   str w0, [x15]
;   mov x0, x19
;   bl 0
;   ; UserStackMap { by_type: [(types::I32, CompoundBitSet {0})], sp_to_sized_stack_slots: None }
;   mov x0, x22
;   bl 0
;   add sp, sp, #16
;   ldp x19, x22, [sp], #16
;   ldr x24, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   str x24, [sp, #-0x10]!
;   stp x19, x22, [sp, #-0x10]!
;   sub sp, sp, #0x10
; block1: ; offset 0x14
;   mov w9, #0
;   mov w8, #1
;   mov w0, #2
;   mov x10, sp
;   str w9, [x10]
;   mov x24, x9
;   add x9, sp, #4
;   str w8, [x9]
;   mov x19, x8
;   add x10, sp, #8
;   str w0, [x10]
;   mov x22, x0
;   mov x0, x24
;   bl #0x48 ; reloc_external Call u0:0 0
;   mov x12, sp
;   mov x0, x19
;   str w0, [x12]
;   add x13, sp, #4
;   mov x0, x22
;   str w0, [x13]
;   mov x0, x24
;   bl #0x68 ; reloc_external Call u0:0 0
;   mov x15, sp
;   mov x0, x22
;   str w0, [x15]
;   mov x0, x19
;   bl #0x7c ; reloc_external Call u0:0 0
;   mov x0, x22
;   bl #0x84 ; reloc_external Call u0:0 0
;   add sp, sp, #0x10
;   ldp x19, x22, [sp], #0x10
;   ldr x24, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

function %different_types(i8, i16, i32, i64, f32, f64) -> i8, i16, i32, i64, f32, f64 {
    ss0 = explicit_slot 1
    ss1 = explicit_slot 2, align = 2
    ss2 = explicit_slot 8, align = 4
    ss3 = explicit_slot 16, align = 8
    ss4 = explicit_slot 48, align = 16
    sig0 = () system_v
    fn0 = colocated u0:0 sig0

block0(v0: i8, v1: i16, v2: i32, v3: i64, v4: f32, v5: f64):
    stack_store v0, ss0
    stack_store v1, ss1
    stack_store v2, ss2
    stack_store v4, ss2+4
    stack_store v3, ss3
    stack_store v5, ss3+8
    call fn0(), stack_map=[i8 @ ss0+0, i16 @ ss1+0, i32 @ ss2+0, f32 @ ss2+4, i64 @ ss3+0, f64 @ ss3+8]
    return v0, v1, v2, v3, v4, v5
}

; VCode:
;   stp fp, lr, [sp, #-16]!
;   mov fp, sp
;   stp x23, x27, [sp, #-16]!
;   stp x20, x21, [sp, #-16]!
;   sub sp, sp, #128
; block0:
;   mov x12, sp
;   strb w0, [x12]
;   mov x23, x0
;   add x13, sp, #8
;   strh w1, [x13]
;   mov x20, x1
;   add x14, sp, #16
;   str w2, [x14]
;   mov x21, x2
;   add x15, sp, #20
;   str s0, [x15]
;   str q0, [sp, #96]
;   add x0, sp, #24
;   str x3, [x0]
;   mov x27, x3
;   add x1, sp, #32
;   str d1, [x1]
;   str q1, [sp, #112]
;   bl 0
;   ; UserStackMap { by_type: [(types::I8, CompoundBitSet {0}), (types::I16, CompoundBitSet {8}), (types::I32, CompoundBitSet {16}), (types::F32, CompoundBitSet {20}), (types::I64, CompoundBitSet {24}), (types::F64, CompoundBitSet {32})], sp_to_sized_stack_slots: None }
;   mov x0, x23
;   mov x1, x20
;   mov x2, x21
;   mov x3, x27
;   ldr q0, [sp, #96]
;   ldr q1, [sp, #112]
;   add sp, sp, #128
;   ldp x20, x21, [sp], #16
;   ldp x23, x27, [sp], #16
;   ldp fp, lr, [sp], #16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   stp x29, x30, [sp, #-0x10]!
;   mov x29, sp
;   stp x23, x27, [sp, #-0x10]!
;   stp x20, x21, [sp, #-0x10]!
;   sub sp, sp, #0x80
; block1: ; offset 0x14
;   mov x12, sp
;   strb w0, [x12]
;   mov x23, x0
;   add x13, sp, #8
;   strh w1, [x13]
;   mov x20, x1
;   add x14, sp, #0x10
;   str w2, [x14]
;   mov x21, x2
;   add x15, sp, #0x14
;   str s0, [x15]
;   stur q0, [sp, #0x60]
;   add x0, sp, #0x18
;   str x3, [x0]
;   mov x27, x3
;   add x1, sp, #0x20
;   str d1, [x1]
;   stur q1, [sp, #0x70]
;   bl #0x5c ; reloc_external Call u0:0 0
;   mov x0, x23
;   mov x1, x20
;   mov x2, x21
;   mov x3, x27
;   ldur q0, [sp, #0x60]
;   ldur q1, [sp, #0x70]
;   add sp, sp, #0x80
;   ldp x20, x21, [sp], #0x10
;   ldp x23, x27, [sp], #0x10
;   ldp x29, x30, [sp], #0x10
;   ret

