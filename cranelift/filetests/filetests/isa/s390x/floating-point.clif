test compile precise-output
set enable_multi_ret_implicit_sret
target s390x

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; f16const/f32const/f64const/f128const
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; FIXME: should use FZERO instruction
; FIXME: should use out-of-line literal pool

function %f16const_zero() -> f16 {
block0:
  v1 = f16const 0x0.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 8 ; data.f16 0.0 ; vleh %v0, 0(%r1), 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 6
;   .byte 0x00, 0x00
;   vleh %v0, 0(%r1), 0
;   br %r14

function %f32const_zero() -> f32 {
block0:
  v1 = f32const 0x0.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 8 ; data.f32 0 ; le %f0, 0(%r1)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 8
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   le %f0, 0(%r1)
;   br %r14

function %f64const_zero() -> f64 {
block0:
  v1 = f64const 0x0.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 12 ; data.f64 0 ; ld %f0, 0(%r1)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 0xc
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f0, 0(%r1)
;   br %r14

function %f128const_zero() -> f128 {
block0:
  v1 = f128const 0x0.0
  return v1
}

; VCode:
; block0:
;   vgbm %v2, 0
;   vst %v2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vzero %v2
;   vst %v2, 0(%r2)
;   br %r14

function %f16const_one() -> f16 {
block0:
  v1 = f16const 0x1.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 8 ; data.f16 0x1.000p0 ; vleh %v0, 0(%r1), 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 6
;   mder %f0, %f0
;   vleh %v0, 0(%r1), 0
;   br %r14

function %f32const_one() -> f32 {
block0:
  v1 = f32const 0x1.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 8 ; data.f32 1 ; le %f0, 0(%r1)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 8
;   sur %f8, %f0
;   .byte 0x00, 0x00
;   le %f0, 0(%r1)
;   br %r14

function %f64const_one() -> f64 {
block0:
  v1 = f64const 0x1.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 12 ; data.f64 1 ; ld %f0, 0(%r1)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 0xc
;   sur %f15, %f0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f0, 0(%r1)
;   br %r14

function %f128const_one() -> f128 {
block0:
  v1 = f128const 0x1.0
  return v1
}

; VCode:
; block0:
;   bras %r1, 20 ; data.u128 0x3fff0000000000000000000000000000 ; vl %v2, 0(%r1)
;   vst %v2, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 0x14
;   sur %f15, %f15
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   vl %v2, 0(%r1)
;   vst %v2, 0(%r2)
;   br %r14

function %fadd_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fadd v0, v1
  return v2
}

; VCode:
; block0:
;   aebr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   aebr %f0, %f2
;   br %r14

function %fadd_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fadd v0, v1
  return v2
}

; VCode:
; block0:
;   adbr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   adbr %f0, %f2
;   br %r14

function %fsub_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fsub v0, v1
  return v2
}

; VCode:
; block0:
;   sebr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sebr %f0, %f2
;   br %r14

function %fsub_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fsub v0, v1
  return v2
}

; VCode:
; block0:
;   sdbr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sdbr %f0, %f2
;   br %r14

function %fmul_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmul v0, v1
  return v2
}

; VCode:
; block0:
;   meebr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   meebr %f0, %f2
;   br %r14

function %fmul_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmul v0, v1
  return v2
}

; VCode:
; block0:
;   mdbr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mdbr %f0, %f2
;   br %r14

function %fdiv_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fdiv v0, v1
  return v2
}

; VCode:
; block0:
;   debr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   debr %f0, %f2
;   br %r14

function %fdiv_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fdiv v0, v1
  return v2
}

; VCode:
; block0:
;   ddbr %f0, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ddbr %f0, %f2
;   br %r14

function %fmin_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmin v0, v1
  return v2
}

; VCode:
; block0:
;   wfminsb %f0, %f0, %f2, 1
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfminsb %f0, %f0, %f2, 1
;   br %r14

function %fmin_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmin v0, v1
  return v2
}

; VCode:
; block0:
;   wfmindb %f0, %f0, %f2, 1
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmindb %f0, %f0, %f2, 1
;   br %r14

function %fmax_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fmax v0, v1
  return v2
}

; VCode:
; block0:
;   wfmaxsb %f0, %f0, %f2, 1
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmaxsb %f0, %f0, %f2, 1
;   br %r14

function %fmax_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fmax v0, v1
  return v2
}

; VCode:
; block0:
;   wfmaxdb %f0, %f0, %f2, 1
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmaxdb %f0, %f0, %f2, 1
;   br %r14

function %fmin_pseudo_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fcmp lt v1, v0
  v3 = select v2, v1, v0
  return v3
}

; VCode:
; block0:
;   wfminsb %f0, %f0, %f2, 3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfminsb %f0, %f0, %f2, 3
;   br %r14

function %fmin_pseudo_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fcmp lt v1, v0
  v3 = select v2, v1, v0
  return v3
}

; VCode:
; block0:
;   wfmindb %f0, %f0, %f2, 3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmindb %f0, %f0, %f2, 3
;   br %r14

function %fmax_pseudo_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fcmp lt v0, v1
  v3 = select v2, v1, v0
  return v3
}

; VCode:
; block0:
;   wfmaxsb %f0, %f0, %f2, 3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmaxsb %f0, %f0, %f2, 3
;   br %r14

function %fmax_pseudo_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fcmp lt v0, v1
  v3 = select v2, v1, v0
  return v3
}

; VCode:
; block0:
;   wfmaxdb %f0, %f0, %f2, 3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmaxdb %f0, %f0, %f2, 3
;   br %r14

function %sqrt_f32(f32) -> f32 {
block0(v0: f32):
  v1 = sqrt v0
  return v1
}

; VCode:
; block0:
;   sqebr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sqebr %f0, %f0
;   br %r14

function %sqrt_f64(f64) -> f64 {
block0(v0: f64):
  v1 = sqrt v0
  return v1
}

; VCode:
; block0:
;   sqdbr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sqdbr %f0, %f0
;   br %r14

function %fabs_f32(f32) -> f32 {
block0(v0: f32):
  v1 = fabs v0
  return v1
}

; VCode:
; block0:
;   lpebr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lpebr %f0, %f0
;   br %r14

function %fabs_f64(f64) -> f64 {
block0(v0: f64):
  v1 = fabs v0
  return v1
}

; VCode:
; block0:
;   lpdbr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lpdbr %f0, %f0
;   br %r14

function %fneg_f32(f32) -> f32 {
block0(v0: f32):
  v1 = fneg v0
  return v1
}

; VCode:
; block0:
;   lcebr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lcebr %f0, %f0
;   br %r14

function %fneg_f64(f64) -> f64 {
block0(v0: f64):
  v1 = fneg v0
  return v1
}

; VCode:
; block0:
;   lcdbr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lcdbr %f0, %f0
;   br %r14

function %fpromote_f32(f32) -> f64 {
block0(v0: f32):
  v1 = fpromote.f64 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f0, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f0, %f0
;   br %r14

function %fdemote_f64(f64) -> f32 {
block0(v0: f64):
  v1 = fdemote.f32 v0
  return v1
}

; VCode:
; block0:
;   ledbra %f0, 0, %f0, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ledbr %f0, %f0
;   br %r14

function %ceil_f32(f32) -> f32 {
block0(v0: f32):
  v1 = ceil v0
  return v1
}

; VCode:
; block0:
;   fiebr %f0, 6, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fiebr %f0, 6, %f0
;   br %r14

function %ceil_f64(f64) -> f64 {
block0(v0: f64):
  v1 = ceil v0
  return v1
}

; VCode:
; block0:
;   fidbr %f0, 6, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fidbr %f0, 6, %f0
;   br %r14

function %floor_f32(f32) -> f32 {
block0(v0: f32):
  v1 = floor v0
  return v1
}

; VCode:
; block0:
;   fiebr %f0, 7, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fiebr %f0, 7, %f0
;   br %r14

function %floor_f64(f64) -> f64 {
block0(v0: f64):
  v1 = floor v0
  return v1
}

; VCode:
; block0:
;   fidbr %f0, 7, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fidbr %f0, 7, %f0
;   br %r14

function %trunc_f32(f32) -> f32 {
block0(v0: f32):
  v1 = trunc v0
  return v1
}

; VCode:
; block0:
;   fiebr %f0, 5, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fiebr %f0, 5, %f0
;   br %r14

function %trunc_f64(f64) -> f64 {
block0(v0: f64):
  v1 = trunc v0
  return v1
}

; VCode:
; block0:
;   fidbr %f0, 5, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fidbr %f0, 5, %f0
;   br %r14

function %nearest_f32(f32) -> f32 {
block0(v0: f32):
  v1 = nearest v0
  return v1
}

; VCode:
; block0:
;   fiebr %f0, 4, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fiebr %f0, 4, %f0
;   br %r14

function %nearest_f64(f64) -> f64 {
block0(v0: f64):
  v1 = nearest v0
  return v1
}

; VCode:
; block0:
;   fidbr %f0, 4, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   fidbr %f0, 4, %f0
;   br %r14

function %fma_f32(f32, f32, f32) -> f32 {
block0(v0: f32, v1: f32, v2: f32):
  v3 = fma v0, v1, v2
  return v3
}

; VCode:
; block0:
;   wfmasb %f0, %f0, %f2, %f4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmasb %f0, %f0, %f2, %f4
;   br %r14

function %fma_f64(f64, f64, f64) -> f64 {
block0(v0: f64, v1: f64, v2: f64):
  v3 = fma v0, v1, v2
  return v3
}

; VCode:
; block0:
;   wfmadb %f0, %f0, %f2, %f4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wfmadb %f0, %f0, %f2, %f4
;   br %r14

function %fcopysign_f32(f32, f32) -> f32 {
block0(v0: f32, v1: f32):
  v2 = fcopysign v0, v1
  return v2
}

; VCode:
; block0:
;   bras %r1, 8 ; data.f32 NaN ; le %f3, 0(%r1)
;   vsel %v0, %v0, %v2, %v3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 8
;   su %f15, 0xfff(%r15, %r15)
;   le %f3, 0(%r1)
;   vsel %v0, %v0, %v2, %v3
;   br %r14

function %fcopysign_f64(f64, f64) -> f64 {
block0(v0: f64, v1: f64):
  v2 = fcopysign v0, v1
  return v2
}

; VCode:
; block0:
;   bras %r1, 12 ; data.f64 NaN ; ld %f3, 0(%r1)
;   vsel %v0, %v0, %v2, %v3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   bras %r1, 0xc
;   su %f15, 0xfff(%r15, %r15)
;   .byte 0xff, 0xff
;   .byte 0xff, 0xff
;   ld %f3, 0(%r1)
;   vsel %v0, %v0, %v2, %v3
;   br %r14

function %fcvt_to_uint_f32_i8(f32) -> i8 {
block0(v0: f32):
  v1 = fcvt_to_uint.i8 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 256 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -1 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   ic %r8, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   icm %r8, 0, 0
;   vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_sint_f32_i8(f32) -> i8 {
block0(v0: f32):
  v1 = fcvt_to_sint.i8 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 128 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -129 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   ic %r0, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   .byte 0xc3, 0x01
;   .byte 0x00, 0x00
;   vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_uint_f32_i16(f32) -> i16 {
block0(v0: f32):
  v1 = fcvt_to_uint.i16 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 65536 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -1 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   be 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   icm %r8, 0, 0
;   vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_sint_f32_i16(f32) -> i16 {
block0(v0: f32):
  v1 = fcvt_to_sint.i16 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 32768 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -32769 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   bc 0, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   bpp 0, -0x31dc, 0x100
;   lpr %r0, %r0
;   .byte 0x08, 0x03
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_uint_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 4294967300 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -1 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   cvb %r8, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   icm %r8, 0, 0
;   vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_sint_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 2147483600 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -2147484000 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   cvb %r0, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   .byte 0xcf, 0x00
;   .byte 0x00, 0x01
;   vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_uint_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 18446744000000000000 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -1 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   sl %r8, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   icm %r8, 0, 0
;   vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wclgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_sint_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode:
; block0:
;   cebr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 8 ; data.f32 9223372000000000000 ; le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 8 ; data.f32 -9223373000000000000 ; vlef %v16, 0(%r1), 0
;   wfcsb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cebr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x12
;   sl %r0, 0
;   le %f4, 0(%r1)
;   cebr %f0, %f4
;   jghe 0x1c ; trap: int_ovf
;   bras %r1, 0x28
;   edmk 1(1), 0x700(%r14)
;   lpr %r0, %r0
;   .byte 0x08, 0x03
;   wfcsb %f0, %v16
;   jgle 0x36 ; trap: int_ovf
;   wldeb %v20, %f0
;   wcgdb %v22, %v20, 0, 5
;   vlgvg %r2, %v22, 0
;   br %r14

function %fcvt_to_uint_f64_i8(f64) -> i8 {
block0(v0: f64):
  v1 = fcvt_to_uint.i8 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 256 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -1 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   sth %r7, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   icm %r15, 0, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_sint_f64_i8(f64) -> i8 {
block0(v0: f64):
  v1 = fcvt_to_sint.i8 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 128 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -129 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   sth %r6, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   larl %r6, 0x40000028
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_uint_f64_i16(f64) -> i16 {
block0(v0: f64):
  v1 = fcvt_to_uint.i16 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 65536 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -1 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   sth %r15, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   icm %r15, 0, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_sint_f64_i16(f64) -> i16 {
block0(v0: f64):
  v1 = fcvt_to_sint.i16 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 32768 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -32769 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   sth %r14, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   larl %r14, 0x400028
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_uint_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 4294967296 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -1 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   la %r15, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   icm %r15, 0, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_sint_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 2147483648 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -2147483649 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   la %r14, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   .byte 0xc1, 0xe0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x20
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_uint_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 18446744073709552000 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -1 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   ic %r15, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   icm %r15, 0, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wclgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_to_sint_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode:
; block0:
;   cdbr %f0, %f0
;   jgo .+2 # trap=bad_toint
;   bras %r1, 12 ; data.f64 9223372036854776000 ; ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe .+2 # trap=int_ovf
;   bras %r1, 12 ; data.f64 -9223372036854778000 ; vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle .+2 # trap=int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cdbr %f0, %f0
;   jgo 6 ; trap: bad_toint
;   bras %r1, 0x16
;   ic %r14, 0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   ld %f4, 0(%r1)
;   cdbr %f0, %f4
;   jghe 0x20 ; trap: int_ovf
;   bras %r1, 0x30
;   .byte 0xc3, 0xe0
;   .byte 0x00, 0x00
;   .byte 0x00, 0x00
;   .byte 0x00, 0x01
;   vleg %v16, 0(%r1), 0
;   wfcdb %f0, %v16
;   jgle 0x3e ; trap: int_ovf
;   wcgdb %v20, %f0, 0, 5
;   vlgvg %r2, %v20, 0
;   br %r14

function %fcvt_from_uint_i8_f32(i8) -> f32 {
block0(v0: i8):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; VCode:
; block0:
;   llgcr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgcr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14

function %fcvt_from_sint_i8_f32(i8) -> f32 {
block0(v0: i8):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
; block0:
;   lgbr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgbr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14

function %fcvt_from_uint_i16_f32(i16) -> f32 {
block0(v0: i16):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; VCode:
; block0:
;   llghr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llghr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14

function %fcvt_from_sint_i16_f32(i16) -> f32 {
block0(v0: i16):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
; block0:
;   lghr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lghr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14

function %fcvt_from_uint_i32_f32(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; VCode:
; block0:
;   llgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14

function %fcvt_from_sint_i32_f32(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
; block0:
;   lgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f6, %f4, 0, 3
;   ledbra %f0, 4, %f6, 0
;   br %r14

function %fcvt_from_uint_i64_f32(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_uint.f32 v0
  return v1
}

; VCode:
; block0:
;   ldgr %f2, %r2
;   wcdlgb %f4, %f2, 0, 3
;   ledbra %f0, 4, %f4, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldgr %f2, %r2
;   wcdlgb %f4, %f2, 0, 3
;   ledbra %f0, 4, %f4, 0
;   br %r14

function %fcvt_from_sint_i64_f32(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
; block0:
;   ldgr %f2, %r2
;   wcdgb %f4, %f2, 0, 3
;   ledbra %f0, 4, %f4, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldgr %f2, %r2
;   wcdgb %f4, %f2, 0, 3
;   ledbra %f0, 4, %f4, 0
;   br %r14

function %fcvt_from_uint_i8_f64(i8) -> f64 {
block0(v0: i8):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; VCode:
; block0:
;   llgcr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f0, %f4, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgcr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f0, %f4, 0, 4
;   br %r14

function %fcvt_from_sint_i8_f64(i8) -> f64 {
block0(v0: i8):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
; block0:
;   lgbr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f0, %f4, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgbr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f0, %f4, 0, 4
;   br %r14

function %fcvt_from_uint_i16_f64(i16) -> f64 {
block0(v0: i16):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; VCode:
; block0:
;   llghr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f0, %f4, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llghr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f0, %f4, 0, 4
;   br %r14

function %fcvt_from_sint_i16_f64(i16) -> f64 {
block0(v0: i16):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
; block0:
;   lghr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f0, %f4, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lghr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f0, %f4, 0, 4
;   br %r14

function %fcvt_from_uint_i32_f64(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; VCode:
; block0:
;   llgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f0, %f4, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdlgb %f0, %f4, 0, 4
;   br %r14

function %fcvt_from_sint_i32_f64(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
; block0:
;   lgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f0, %f4, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgfr %r4, %r2
;   ldgr %f4, %r4
;   wcdgb %f0, %f4, 0, 4
;   br %r14

function %fcvt_from_uint_i64_f64(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_uint.f64 v0
  return v1
}

; VCode:
; block0:
;   ldgr %f2, %r2
;   wcdlgb %f0, %f2, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldgr %f2, %r2
;   wcdlgb %f0, %f2, 0, 4
;   br %r14

function %fcvt_from_sint_i64_f64(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
; block0:
;   ldgr %f2, %r2
;   wcdgb %f0, %f2, 0, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldgr %f2, %r2
;   wcdgb %f0, %f2, 0, 4
;   br %r14

function %fcvt_to_uint_sat_f32_i8(f32) -> i8 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i8 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   clgfi %r2, 256
;   locghih %r2, 255
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   clgfi %r2, 0x100
;   locghih %r2, 0xff
;   br %r14

function %fcvt_to_sint_sat_f32_i8(f32) -> i8 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i8 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 127
;   locghih %r2, 127
;   cghi %r2, -128
;   locghil %r2, -128
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 0x7f
;   locghih %r2, 0x7f
;   cghi %r2, -0x80
;   locghil %r2, -0x80
;   br %r14

function %fcvt_to_uint_sat_f32_i16(f32) -> i16 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i16 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   clgfi %r2, 65535
;   locghih %r2, -1
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   clgfi %r2, 0xffff
;   locghih %r2, -1
;   br %r14

function %fcvt_to_sint_sat_f32_i16(f32) -> i16 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i16 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 32767
;   locghih %r2, 32767
;   cghi %r2, -32768
;   locghil %r2, -32768
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 0x7fff
;   locghih %r2, 0x7fff
;   cghi %r2, -0x8000
;   locghil %r2, -0x8000
;   br %r14

function %fcvt_to_uint_sat_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   llilf %r3, 4294967295
;   clgr %r2, %r3
;   locgrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   llilf %r3, 0xffffffff
;   clgr %r2, %r3
;   locgrh %r2, %r3
;   br %r14

function %fcvt_to_sint_sat_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   lgfi %r5, 2147483647
;   cgr %r2, %r5
;   locgrh %r2, %r5
;   lgfi %r3, -2147483648
;   cgr %r2, %r3
;   locgrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   lgfi %r5, 0x7fffffff
;   cgr %r2, %r5
;   locgrh %r2, %r5
;   lgfi %r3, -0x80000000
;   cgr %r2, %r3
;   locgrl %r2, %r3
;   br %r14

function %fcvt_to_uint_sat_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wclgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   br %r14

function %fcvt_to_sint_sat_f32_i64(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode:
; block0:
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldebr %f2, %f0
;   wcgdb %f4, %f2, 0, 5
;   lgdr %r2, %f4
;   cebr %f0, %f0
;   locghio %r2, 0
;   br %r14

function %fcvt_to_uint_sat_f64_i8(f64) -> i8 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i8 v0
  return v1
}

; VCode:
; block0:
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   clgfi %r2, 256
;   locghih %r2, 255
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   clgfi %r2, 0x100
;   locghih %r2, 0xff
;   br %r14

function %fcvt_to_sint_sat_f64_i8(f64) -> i8 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i8 v0
  return v1
}

; VCode:
; block0:
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 127
;   locghih %r2, 127
;   cghi %r2, -128
;   locghil %r2, -128
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 0x7f
;   locghih %r2, 0x7f
;   cghi %r2, -0x80
;   locghil %r2, -0x80
;   br %r14

function %fcvt_to_uint_sat_f64_i16(f64) -> i16 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i16 v0
  return v1
}

; VCode:
; block0:
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   clgfi %r2, 65535
;   locghih %r2, -1
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   clgfi %r2, 0xffff
;   locghih %r2, -1
;   br %r14

function %fcvt_to_sint_sat_f64_i16(f64) -> i16 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i16 v0
  return v1
}

; VCode:
; block0:
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 32767
;   locghih %r2, 32767
;   cghi %r2, -32768
;   locghil %r2, -32768
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   cghi %r2, 0x7fff
;   locghih %r2, 0x7fff
;   cghi %r2, -0x8000
;   locghil %r2, -0x8000
;   br %r14

function %fcvt_to_uint_sat_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode:
; block0:
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   llilf %r4, 4294967295
;   clgr %r2, %r4
;   locgrh %r2, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   llilf %r4, 0xffffffff
;   clgr %r2, %r4
;   locgrh %r2, %r4
;   br %r14

function %fcvt_to_sint_sat_f64_i32(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode:
; block0:
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   lgfi %r3, 2147483647
;   cgr %r2, %r3
;   locgrh %r2, %r3
;   lgfi %r4, -2147483648
;   cgr %r2, %r4
;   locgrl %r2, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   lgfi %r3, 0x7fffffff
;   cgr %r2, %r3
;   locgrh %r2, %r3
;   lgfi %r4, -0x80000000
;   cgr %r2, %r4
;   locgrl %r2, %r4
;   br %r14

function %fcvt_to_uint_sat_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode:
; block0:
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wclgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   br %r14

function %fcvt_to_sint_sat_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode:
; block0:
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   wcgdb %f2, %f0, 0, 5
;   lgdr %r2, %f2
;   cdbr %f0, %f0
;   locghio %r2, 0
;   br %r14

function %bitcast_i64_f64(i64) -> f64 {
block0(v0: i64):
  v1 = bitcast.f64 v0
  return v1
}

; VCode:
; block0:
;   ldgr %f0, %r2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldgr %f0, %r2
;   br %r14

function %bitcast_f64_i64(f64) -> i64 {
block0(v0: f64):
  v1 = bitcast.i64 v0
  return v1
}

; VCode:
; block0:
;   lgdr %r2, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgdr %r2, %f0
;   br %r14

function %bitcast_i32_f32(i32) -> f32 {
block0(v0: i32):
  v1 = bitcast.f32 v0
  return v1
}

; VCode:
; block0:
;   vlvgf %v0, %r2, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlvgf %v0, %r2, 0
;   br %r14

function %bitcast_f32_i32(f32) -> i32 {
block0(v0: f32):
  v1 = bitcast.i32 v0
  return v1
}

; VCode:
; block0:
;   vlgvf %r2, %v0, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvf %r2, %v0, 0
;   br %r14

function %bitcast_f32_f32(f32) -> f32 {
block0(v0: f32):
  v1 = bitcast.f32 v0
  return v1
}

; VCode:
; block0:
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   br %r14

function %bitcast_f64_f64(f64) -> f64 {
block0(v0: f64):
  v1 = bitcast.f64 v0
  return v1
}

; VCode:
; block0:
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   br %r14

