test compile precise-output
target s390x

function %store_i64(i64, i64) {
block0(v0: i64, v1: i64):
  store.i64 v0, v1
  return
}

; VCode:
; block0:
;   stg %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stg %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %store_i64_sym(i64) {
  gv0 = symbol colocated %sym
block0(v0: i64):
  v1 = symbol_value.i64 gv0
  store.i64 aligned v0, v1
  return
}

; VCode:
; block0:
;   stgrl %r2, %sym + 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stgrl %r2, 0 ; reloc_external PCRel32Dbl %sym 2 ; trap: heap_oob
;   br %r14

function %store_imm_i64(i64) {
block0(v0: i64):
  v1 = iconst.i64 12345
  store.i64 v1, v0
  return
}

; VCode:
; block0:
;   mvghi 0(%r2), 12345
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvghi 0(%r2), 0x3039 ; trap: heap_oob
;   br %r14

function %istore8_i64(i64, i64) {
block0(v0: i64, v1: i64):
  istore8.i64 v0, v1
  return
}

; VCode:
; block0:
;   stc %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stc %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %istore8_imm_i64(i64) {
block0(v0: i64):
  v1 = iconst.i64 123
  istore8.i64 v1, v0
  return
}

; VCode:
; block0:
;   mvi 0(%r2), 123
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvi 0(%r2), 0x7b ; trap: heap_oob
;   br %r14

function %istore16_i64(i64, i64) {
block0(v0: i64, v1: i64):
  istore16.i64 v0, v1
  return
}

; VCode:
; block0:
;   sth %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sth %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %istore16_i64_sym(i64) {
  gv0 = symbol colocated %sym
block0(v0: i64):
  v1 = symbol_value.i64 gv0
  istore16.i64 aligned v0, v1
  return
}

; VCode:
; block0:
;   sthrl %r2, %sym + 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sthrl %r2, 0 ; reloc_external PCRel32Dbl %sym 2 ; trap: heap_oob
;   br %r14

function %istore16_imm_i64(i64) {
block0(v0: i64):
  v1 = iconst.i64 12345
  istore16.i64 v1, v0
  return
}

; VCode:
; block0:
;   mvhhi 0(%r2), 12345
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvhhi 0(%r2), 0x3039 ; trap: heap_oob
;   br %r14

function %istore32_i64(i64, i64) {
block0(v0: i64, v1: i64):
  istore32.i64 v0, v1
  return
}

; VCode:
; block0:
;   st %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   st %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %istore32_i64_sym(i64) {
  gv0 = symbol colocated %sym
block0(v0: i64):
  v1 = symbol_value.i64 gv0
  istore32.i64 aligned v0, v1
  return
}

; VCode:
; block0:
;   strl %r2, %sym + 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   strl %r2, 0 ; reloc_external PCRel32Dbl %sym 2 ; trap: heap_oob
;   br %r14

function %istore32_imm_i64(i64) {
block0(v0: i64):
  v1 = iconst.i64 12345
  istore32.i64 v1, v0
  return
}

; VCode:
; block0:
;   mvhi 0(%r2), 12345
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvhi 0(%r2), 0x3039 ; trap: heap_oob
;   br %r14

function %store_i32(i32, i64) {
block0(v0: i32, v1: i64):
  store.i32 v0, v1
  return
}

; VCode:
; block0:
;   st %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   st %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %store_i32_sym(i32) {
  gv0 = symbol colocated %sym
block0(v0: i32):
  v1 = symbol_value.i64 gv0
  store.i32 aligned v0, v1
  return
}

; VCode:
; block0:
;   strl %r2, %sym + 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   strl %r2, 0 ; reloc_external PCRel32Dbl %sym 2 ; trap: heap_oob
;   br %r14

function %store_i32_off(i32, i64) {
block0(v0: i32, v1: i64):
  store.i32 v0, v1+4096
  return
}

; VCode:
; block0:
;   sty %r2, 4096(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sty %r2, 0x1000(%r3) ; trap: heap_oob
;   br %r14

function %store_imm_i32(i64) {
block0(v0: i64):
  v1 = iconst.i32 12345
  store.i32 v1, v0
  return
}

; VCode:
; block0:
;   mvhi 0(%r2), 12345
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvhi 0(%r2), 0x3039 ; trap: heap_oob
;   br %r14

function %istore8_i32(i32, i64) {
block0(v0: i32, v1: i64):
  istore8.i32 v0, v1
  return
}

; VCode:
; block0:
;   stc %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stc %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %istore8_imm_i32(i64) {
block0(v0: i64):
  v1 = iconst.i32 123
  istore8.i32 v1, v0
  return
}

; VCode:
; block0:
;   mvi 0(%r2), 123
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvi 0(%r2), 0x7b ; trap: heap_oob
;   br %r14

function %istore16_i32(i32, i64) {
block0(v0: i32, v1: i64):
  istore16.i32 v0, v1
  return
}

; VCode:
; block0:
;   sth %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sth %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %istore16_i32_sym(i32) {
  gv0 = symbol colocated %sym
block0(v0: i32):
  v1 = symbol_value.i64 gv0
  istore16.i32 aligned v0, v1
  return
}

; VCode:
; block0:
;   sthrl %r2, %sym + 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sthrl %r2, 0 ; reloc_external PCRel32Dbl %sym 2 ; trap: heap_oob
;   br %r14

function %istore16_imm_i32(i64) {
block0(v0: i64):
  v1 = iconst.i32 12345
  istore16.i32 v1, v0
  return
}

; VCode:
; block0:
;   mvhhi 0(%r2), 12345
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvhhi 0(%r2), 0x3039 ; trap: heap_oob
;   br %r14

function %store_i16(i16, i64) {
block0(v0: i16, v1: i64):
  store.i16 v0, v1
  return
}

; VCode:
; block0:
;   sth %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sth %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %store_i16_sym(i16) {
  gv0 = symbol colocated %sym
block0(v0: i16):
  v1 = symbol_value.i64 gv0
  store.i16 aligned v0, v1
  return
}

; VCode:
; block0:
;   sthrl %r2, %sym + 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sthrl %r2, 0 ; reloc_external PCRel32Dbl %sym 2 ; trap: heap_oob
;   br %r14

function %store_i16_off(i16, i64) {
block0(v0: i16, v1: i64):
  store.i16 v0, v1+4096
  return
}

; VCode:
; block0:
;   sthy %r2, 4096(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   sthy %r2, 0x1000(%r3) ; trap: heap_oob
;   br %r14

function %store_imm_i16(i64) {
block0(v0: i64):
  v1 = iconst.i16 12345
  store.i16 v1, v0
  return
}

; VCode:
; block0:
;   mvhhi 0(%r2), 12345
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvhhi 0(%r2), 0x3039 ; trap: heap_oob
;   br %r14

function %istore8_i16(i16, i64) {
block0(v0: i16, v1: i64):
  istore8.i16 v0, v1
  return
}

; VCode:
; block0:
;   stc %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stc %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %istore8_imm_i16(i64) {
block0(v0: i64):
  v1 = iconst.i16 123
  istore8.i16 v1, v0
  return
}

; VCode:
; block0:
;   mvi 0(%r2), 123
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvi 0(%r2), 0x7b ; trap: heap_oob
;   br %r14

function %store_i8(i8, i64) {
block0(v0: i8, v1: i64):
  store.i8 v0, v1
  return
}

; VCode:
; block0:
;   stc %r2, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stc %r2, 0(%r3) ; trap: heap_oob
;   br %r14

function %store_i8_off(i8, i64) {
block0(v0: i8, v1: i64):
  store.i8 v0, v1+4096
  return
}

; VCode:
; block0:
;   stcy %r2, 4096(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   stcy %r2, 0x1000(%r3) ; trap: heap_oob
;   br %r14

function %store_imm_i8(i64) {
block0(v0: i64):
  v1 = iconst.i8 123
  store.i8 v1, v0
  return
}

; VCode:
; block0:
;   mvi 0(%r2), 123
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mvi 0(%r2), 0x7b ; trap: heap_oob
;   br %r14

function %store_imm_i8_off(i64) {
block0(v0: i64):
  v1 = iconst.i8 123
  store.i8 v1, v0+4096
  return
}

; VCode:
; block0:
;   mviy 4096(%r2), 123
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   mviy 0x1000(%r2), 0x7b ; trap: heap_oob
;   br %r14

function %store_f16(f16, i64) {
block0(v0: f16, v1: i64):
  store.f16 v0, v1
  return
}

; VCode:
; block0:
;   vsteh %v0, 0(%r2), 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vsteh %v0, 0(%r2), 0 ; trap: heap_oob
;   br %r14

function %store_f32(f32, i64) {
block0(v0: f32, v1: i64):
  store.f32 v0, v1
  return
}

; VCode:
; block0:
;   ste %f0, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ste %f0, 0(%r2) ; trap: heap_oob
;   br %r14

function %store_f64(f64, i64) {
block0(v0: f64, v1: i64):
  store.f64 v0, v1
  return
}

; VCode:
; block0:
;   std %f0, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   std %f0, 0(%r2) ; trap: heap_oob
;   br %r14

function %store_f16(f128, i64) {
block0(v0: f128, v1: i64):
  store.f128 v0, v1
  return
}

; VCode:
; block0:
;   vl %v1, 0(%r2)
;   vst %v1, 0(%r3)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r2)
;   vst %v1, 0(%r3) ; trap: heap_oob
;   br %r14

