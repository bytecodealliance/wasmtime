test compile precise-output
set enable_multi_ret_implicit_sret
target s390x

;; Bitcast between integral types is a no-op.

function %bitcast_i8_i8(i8) -> i8 {
block0(v0: i8):
  v1 = bitcast.i8 v0
  return v1
}

; VCode:
; block0:
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   br %r14

function %bitcast_i16_i16(i16) -> i16 {
block0(v0: i16):
  v1 = bitcast.i16 v0
  return v1
}

; VCode:
; block0:
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   br %r14

function %bitcast_i32_i32(i32) -> i32 {
block0(v0: i32):
  v1 = bitcast.i32 v0
  return v1
}

; VCode:
; block0:
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   br %r14

function %bitcast_i64_i64(i64) -> i64 {
block0(v0: i64):
  v1 = bitcast.i64 v0
  return v1
}

; VCode:
; block0:
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   br %r14

function %bitcast_i128_i128(i128) -> i128 {
block0(v0: i128):
  v1 = bitcast.i128 v0
  return v1
}

; VCode:
; block0:
;   vl %v1, 0(%r3)
;   vst %v1, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r3)
;   vst %v1, 0(%r2)
;   br %r14

function %bitcast_f16_to_i16(f16) -> i16 {
block0(v0: f16):
  v1 = bitcast.i16 v0
  return v1
}

; VCode:
; block0:
;   vlgvh %r2, %v0, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvh %r2, %v0, 0
;   br %r14

function %bitcast_i16_to_f16(i16) -> f16 {
block0(v0: i16):
  v1 = bitcast.f16 v0
  return v1
}

; VCode:
; block0:
;   vlvgh %v0, %r2, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlvgh %v0, %r2, 0
;   br %r14

function %bitcast_f32_to_i32(f32) -> i32 {
block0(v0: f32):
  v1 = bitcast.i32 v0
  return v1
}

; VCode:
; block0:
;   vlgvf %r2, %v0, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvf %r2, %v0, 0
;   br %r14

function %bitcast_i32_to_f32(i32) -> f32 {
block0(v0: i32):
  v1 = bitcast.f32 v0
  return v1
}

; VCode:
; block0:
;   vlvgf %v0, %r2, 0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlvgf %v0, %r2, 0
;   br %r14

function %bitcast_f64_to_i64(f64) -> i64 {
block0(v0: f64):
  v1 = bitcast.i64 v0
  return v1
}

; VCode:
; block0:
;   lgdr %r2, %f0
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lgdr %r2, %f0
;   br %r14

function %bitcast_i64_to_f64(i64) -> f64 {
block0(v0: i64):
  v1 = bitcast.f64 v0
  return v1
}

; VCode:
; block0:
;   ldgr %f0, %r2
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ldgr %f0, %r2
;   br %r14

function %bitcast_f128_to_i128(f128) -> i128 {
block0(v0: f128):
  v1 = bitcast.i128 v0
  return v1
}

; VCode:
; block0:
;   vl %v1, 0(%r3)
;   vst %v1, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r3)
;   vst %v1, 0(%r2)
;   br %r14

function %bitcast_i128_to_f128(i128) -> f128 {
block0(v0: i128):
  v1 = bitcast.f128 v0
  return v1
}

; VCode:
; block0:
;   vl %v1, 0(%r3)
;   vst %v1, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r3)
;   vst %v1, 0(%r2)
;   br %r14

function %bitcast_f128_to_i64x2_little(f128) -> i64x2 {
block0(v0: f128):
  v1 = bitcast.i64x2 little v0
  return v1
}

; VCode:
; block0:
;   vl %v1, 0(%r2)
;   vpdi %v24, %v1, %v1, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r2)
;   vpdi %v24, %v1, %v1, 4
;   br %r14

function %bitcast_i64x2_to_f128_little(i64x2) -> f128 {
block0(v0: i64x2):
  v1 = bitcast.f128 little v0
  return v1
}

; VCode:
; block0:
;   vpdi %v3, %v24, %v24, 4
;   vst %v3, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vpdi %v3, %v24, %v24, 4
;   vst %v3, 0(%r2)
;   br %r14

function %bitcast_f128_to_i64x2(f128) -> i64x2 {
block0(v0: f128):
  v1 = bitcast.i64x2 big v0
  return v1
}

; VCode:
; block0:
;   vl %v24, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v24, 0(%r2)
;   br %r14

function %bitcast_i64x2_to_f128(i64x2) -> f128 {
block0(v0: i64x2):
  v1 = bitcast.f128 big v0
  return v1
}

; VCode:
; block0:
;   vst %v24, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vst %v24, 0(%r2)
;   br %r14

