test compile precise-output
set enable_multi_ret_implicit_sret
target s390x

function %umax_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = umax.i128 v0, v1
  return v2
}

; VCode:
; block0:
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   veclg %v5, %v3 ; jne 10 ; vchlgs %v6, %v3, %v5
;   jnl 10 ; vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   veclg %v5, %v3
;   jne 0x1c
;   vchlgs %v6, %v3, %v5
;   jnl 0x26
;   vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14

function %umax_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = umax.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   clgr %r2, %r3
;   locgrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clgr %r2, %r3
;   locgrl %r2, %r3
;   br %r14

function %umax_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = umax.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   clr %r2, %r3
;   locrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clr %r2, %r3
;   locrl %r2, %r3
;   br %r14

function %umax_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = umax.i16 v0, v1
  return v2
}

; VCode:
; block0:
;   llhr %r2, %r2
;   llhr %r3, %r3
;   clr %r2, %r3
;   locrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llhr %r2, %r2
;   llhr %r3, %r3
;   clr %r2, %r3
;   locrl %r2, %r3
;   br %r14

function %umax_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = umax.i8 v0, v1
  return v2
}

; VCode:
; block0:
;   llcr %r2, %r2
;   llcr %r3, %r3
;   clr %r2, %r3
;   locrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llcr %r2, %r2
;   llcr %r3, %r3
;   clr %r2, %r3
;   locrl %r2, %r3
;   br %r14

function %umin_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = umin.i128 v0, v1
  return v2
}

; VCode:
; block0:
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   veclg %v3, %v5 ; jne 10 ; vchlgs %v6, %v5, %v3
;   jnl 10 ; vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   veclg %v3, %v5
;   jne 0x1c
;   vchlgs %v6, %v5, %v3
;   jnl 0x26
;   vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14

function %umin_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = umin.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   clgr %r2, %r3
;   locgrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clgr %r2, %r3
;   locgrh %r2, %r3
;   br %r14

function %umin_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = umin.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   clr %r2, %r3
;   locrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clr %r2, %r3
;   locrh %r2, %r3
;   br %r14

function %umin_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = umin.i16 v0, v1
  return v2
}

; VCode:
; block0:
;   llhr %r2, %r2
;   llhr %r3, %r3
;   clr %r2, %r3
;   locrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llhr %r2, %r2
;   llhr %r3, %r3
;   clr %r2, %r3
;   locrh %r2, %r3
;   br %r14

function %umin_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = umin.i8 v0, v1
  return v2
}

; VCode:
; block0:
;   llcr %r2, %r2
;   llcr %r3, %r3
;   clr %r2, %r3
;   locrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llcr %r2, %r2
;   llcr %r3, %r3
;   clr %r2, %r3
;   locrh %r2, %r3
;   br %r14

function %smax_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = smax.i128 v0, v1
  return v2
}

; VCode:
; block0:
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   vecg %v5, %v3 ; jne 10 ; vchlgs %v6, %v3, %v5
;   jnl 10 ; vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   vecg %v5, %v3
;   jne 0x1c
;   vchlgs %v6, %v3, %v5
;   jnl 0x26
;   vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14

function %smax_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = smax.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   cgr %r2, %r3
;   locgrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cgr %r2, %r3
;   locgrl %r2, %r3
;   br %r14

function %smax_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = smax.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   cr %r2, %r3
;   locrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cr %r2, %r3
;   locrl %r2, %r3
;   br %r14

function %smax_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = smax.i16 v0, v1
  return v2
}

; VCode:
; block0:
;   lhr %r2, %r2
;   lhr %r3, %r3
;   cr %r2, %r3
;   locrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lhr %r2, %r2
;   lhr %r3, %r3
;   cr %r2, %r3
;   locrl %r2, %r3
;   br %r14

function %smax_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = smax.i8 v0, v1
  return v2
}

; VCode:
; block0:
;   lbr %r2, %r2
;   lbr %r3, %r3
;   cr %r2, %r3
;   locrl %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lbr %r2, %r2
;   lbr %r3, %r3
;   cr %r2, %r3
;   locrl %r2, %r3
;   br %r14

function %smin_i128(i128, i128) -> i128 {
block0(v0: i128, v1: i128):
  v2 = smin.i128 v0, v1
  return v2
}

; VCode:
; block0:
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   vecg %v3, %v5 ; jne 10 ; vchlgs %v6, %v5, %v3
;   jnl 10 ; vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v5, 0(%r3)
;   vl %v3, 0(%r4)
;   vecg %v3, %v5
;   jne 0x1c
;   vchlgs %v6, %v5, %v3
;   jnl 0x26
;   vlr %v5, %v3
;   vst %v5, 0(%r2)
;   br %r14

function %smin_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = smin.i64 v0, v1
  return v2
}

; VCode:
; block0:
;   cgr %r2, %r3
;   locgrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cgr %r2, %r3
;   locgrh %r2, %r3
;   br %r14

function %smin_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = smin.i32 v0, v1
  return v2
}

; VCode:
; block0:
;   cr %r2, %r3
;   locrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   cr %r2, %r3
;   locrh %r2, %r3
;   br %r14

function %smin_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = smin.i16 v0, v1
  return v2
}

; VCode:
; block0:
;   lhr %r2, %r2
;   lhr %r3, %r3
;   cr %r2, %r3
;   locrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lhr %r2, %r2
;   lhr %r3, %r3
;   cr %r2, %r3
;   locrh %r2, %r3
;   br %r14

function %smin_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = smin.i8 v0, v1
  return v2
}

; VCode:
; block0:
;   lbr %r2, %r2
;   lbr %r3, %r3
;   cr %r2, %r3
;   locrh %r2, %r3
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lbr %r2, %r2
;   lbr %r3, %r3
;   cr %r2, %r3
;   locrh %r2, %r3
;   br %r14

