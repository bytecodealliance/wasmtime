test compile precise-output
set enable_multi_ret_implicit_sret
target s390x


function %select_icmp_i8_f16(i8, f16, f16) -> f16 {
block0(v0: i8, v1: f16, v2: f16):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.f16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   llcr %r2, %r2
;   clfi %r2, 42
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llcr %r2, %r2
;   clfi %r2, 0x2a
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 0x20
;   vlr %v0, %v16
;   br %r14

function %select_icmp_i8_f32(i8, f32, f32) -> f32 {
block0(v0: i8, v1: f32, v2: f32):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   llcr %r2, %r2
;   clfi %r2, 42
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llcr %r2, %r2
;   clfi %r2, 0x2a
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 0x20
;   vlr %v0, %v16
;   br %r14

function %select_icmp_i8_f64(i8, f64, f64) -> f64 {
block0(v0: i8, v1: f64, v2: f64):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   llcr %r2, %r2
;   clfi %r2, 42
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llcr %r2, %r2
;   clfi %r2, 0x2a
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 0x20
;   vlr %v0, %v16
;   br %r14

function %select_icmp_i8_f128(i8, f128, f128) -> f128 {
block0(v0: i8, v1: f128, v2: f128):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.f128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   vl %v2, 0(%r4)
;   vl %v7, 0(%r5)
;   llcr %r5, %r3
;   clfi %r5, 42
;   jne 10 ; vlr %v7, %v2
;   vst %v7, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r4)
;   vl %v7, 0(%r5)
;   llcr %r5, %r3
;   clfi %r5, 0x2a
;   jne 0x20
;   vlr %v7, %v2
;   vst %v7, 0(%r2)
;   br %r14

function %select_icmp_i16_f16(i16, f16, f16) -> f16 {
block0(v0: i16, v1: f16, v2: f16):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.f16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   llhr %r2, %r2
;   clfi %r2, 42
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llhr %r2, %r2
;   clfi %r2, 0x2a
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 0x20
;   vlr %v0, %v16
;   br %r14

function %select_icmp_i16_f32(i16, f32, f32) -> f32 {
block0(v0: i16, v1: f32, v2: f32):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   llhr %r2, %r2
;   clfi %r2, 42
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llhr %r2, %r2
;   clfi %r2, 0x2a
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 0x20
;   vlr %v0, %v16
;   br %r14

function %select_icmp_i16_f64(i16, f64, f64) -> f64 {
block0(v0: i16, v1: f64, v2: f64):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   llhr %r2, %r2
;   clfi %r2, 42
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   llhr %r2, %r2
;   clfi %r2, 0x2a
;   vlr %v16, %v0
;   vlr %v0, %v2
;   jne 0x20
;   vlr %v0, %v16
;   br %r14

function %select_icmp_i16_f128(i16, f128, f128) -> f128 {
block0(v0: i16, v1: f128, v2: f128):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.f128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   vl %v2, 0(%r4)
;   vl %v7, 0(%r5)
;   llhr %r5, %r3
;   clfi %r5, 42
;   jne 10 ; vlr %v7, %v2
;   vst %v7, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r4)
;   vl %v7, 0(%r5)
;   llhr %r5, %r3
;   clfi %r5, 0x2a
;   jne 0x20
;   vlr %v7, %v2
;   vst %v7, 0(%r2)
;   br %r14

function %select_icmp_i32_f16(i32, f16, f16) -> f16 {
block0(v0: i32, v1: f16, v2: f16):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.f16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   clfi %r2, 42
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 6 ; ler %f0, %f6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clfi %r2, 0x2a
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 0x18
;   ler %f0, %f6
;   br %r14

function %select_icmp_i32_f32(i32, f32, f32) -> f32 {
block0(v0: i32, v1: f32, v2: f32):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   clfi %r2, 42
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 6 ; ler %f0, %f6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clfi %r2, 0x2a
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 0x18
;   ler %f0, %f6
;   br %r14

function %select_icmp_i32_f64(i32, f64, f64) -> f64 {
block0(v0: i32, v1: f64, v2: f64):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   clfi %r2, 42
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 6 ; ldr %f0, %f6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clfi %r2, 0x2a
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 0x18
;   ldr %f0, %f6
;   br %r14

function %select_icmp_i32_f128(i32, f128, f128) -> f128 {
block0(v0: i32, v1: f128, v2: f128):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.f128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   vl %v2, 0(%r4)
;   vl %v6, 0(%r5)
;   clfi %r3, 42
;   jne 10 ; vlr %v6, %v2
;   vst %v6, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r4)
;   vl %v6, 0(%r5)
;   clfi %r3, 0x2a
;   jne 0x1c
;   vlr %v6, %v2
;   vst %v6, 0(%r2)
;   br %r14

function %select_icmp_i64_f16(i64, f16, f16) -> f16 {
block0(v0: i64, v1: f16, v2: f16):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.f16 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   clgfi %r2, 42
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 6 ; ler %f0, %f6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clgfi %r2, 0x2a
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 0x18
;   ler %f0, %f6
;   br %r14

function %select_icmp_i64_f32(i64, f32, f32) -> f32 {
block0(v0: i64, v1: f32, v2: f32):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   clgfi %r2, 42
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 6 ; ler %f0, %f6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clgfi %r2, 0x2a
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 0x18
;   ler %f0, %f6
;   br %r14

function %select_icmp_i64_f64(i64, f64, f64) -> f64 {
block0(v0: i64, v1: f64, v2: f64):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   clgfi %r2, 42
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 6 ; ldr %f0, %f6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   clgfi %r2, 0x2a
;   vlr %v6, %v0
;   vlr %v0, %v2
;   jne 0x18
;   ldr %f0, %f6
;   br %r14

function %select_icmp_i64_f128(i64, f128, f128) -> f128 {
block0(v0: i64, v1: f128, v2: f128):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.f128 v4, v1, v2
  return v5
}

; VCode:
; block0:
;   vl %v2, 0(%r4)
;   vl %v6, 0(%r5)
;   clgfi %r3, 42
;   jne 10 ; vlr %v6, %v2
;   vst %v6, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r4)
;   vl %v6, 0(%r5)
;   clgfi %r3, 0x2a
;   jne 0x1c
;   vlr %v6, %v2
;   vst %v6, 0(%r2)
;   br %r14

function %select_icmp_i128_f16(i128, f16, f16) -> f16 {
block0(v0: i128, v1: f16, v2: f16):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.f16 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   vl %v1, 0(%r2)
;   lghi %r3, 42
;   vgbm %v17, 0
;   vlvgg %v17, %r3, 1
;   vceqgs %v16, %v1, %v17
;   vlr %v23, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v23
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r2)
;   lghi %r3, 0x2a
;   vzero %v17
;   vlvgg %v17, %r3, 1
;   vceqgs %v16, %v1, %v17
;   vlr %v23, %v0
;   vlr %v0, %v2
;   jne 0x32
;   vlr %v0, %v23
;   br %r14

function %select_icmp_i128_f32(i128, f32, f32) -> f32 {
block0(v0: i128, v1: f32, v2: f32):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.f32 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   vl %v1, 0(%r2)
;   lghi %r3, 42
;   vgbm %v17, 0
;   vlvgg %v17, %r3, 1
;   vceqgs %v16, %v1, %v17
;   vlr %v23, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v23
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r2)
;   lghi %r3, 0x2a
;   vzero %v17
;   vlvgg %v17, %r3, 1
;   vceqgs %v16, %v1, %v17
;   vlr %v23, %v0
;   vlr %v0, %v2
;   jne 0x32
;   vlr %v0, %v23
;   br %r14

function %select_icmp_i128_f64(i128, f64, f64) -> f64 {
block0(v0: i128, v1: f64, v2: f64):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.f64 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   vl %v1, 0(%r2)
;   lghi %r3, 42
;   vgbm %v17, 0
;   vlvgg %v17, %r3, 1
;   vceqgs %v16, %v1, %v17
;   vlr %v23, %v0
;   vlr %v0, %v2
;   jne 10 ; vlr %v0, %v23
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r2)
;   lghi %r3, 0x2a
;   vzero %v17
;   vlvgg %v17, %r3, 1
;   vceqgs %v16, %v1, %v17
;   vlr %v23, %v0
;   vlr %v0, %v2
;   jne 0x32
;   vlr %v0, %v23
;   br %r14

function %select_icmp_i128_f128(i128, f128, f128) -> f128 {
block0(v0: i128, v1: f128, v2: f128):
  v3 = iconst.i64 42
  v4 = uextend.i128 v3
  v5 = icmp eq v0, v4
  v6 = select.f128 v5, v1, v2
  return v6
}

; VCode:
; block0:
;   vl %v1, 0(%r3)
;   vl %v3, 0(%r4)
;   vl %v16, 0(%r5)
;   lghi %r3, 42
;   vgbm %v20, 0
;   vlvgg %v20, %r3, 1
;   vceqgs %v19, %v1, %v20
;   jne 10 ; vlr %v16, %v3
;   vst %v16, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v1, 0(%r3)
;   vl %v3, 0(%r4)
;   vl %v16, 0(%r5)
;   lghi %r3, 0x2a
;   vzero %v20
;   vlvgg %v20, %r3, 1
;   vceqgs %v19, %v1, %v20
;   jne 0x32
;   vlr %v16, %v3
;   vst %v16, 0(%r2)
;   br %r14

