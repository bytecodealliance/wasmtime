test compile precise-output
target s390x

function %uload8x8_big(i64) -> i16x8 tail {
block0(v0: i64):
  v1 = uload8x8 big v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuplhb %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuplhb %v24, %v4
;   br %r14

function %uload16x4_big(i64) -> i32x4 tail {
block0(v0: i64):
  v1 = uload16x4 big v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   verllh %v6, %v4, 8
;   vuplhh %v24, %v6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   verllh %v6, %v4, 8
;   vuplhh %v24, %v6
;   br %r14

function %uload32x2_big(i64) -> i64x2 tail {
block0(v0: i64):
  v1 = uload32x2 big v0
  return v1
}

; VCode:
; block0:
;   ld %f2, 0(%r2)
;   verllg %v4, %v2, 32
;   vuplhf %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ld %f2, 0(%r2) ; trap: heap_oob
;   verllg %v4, %v2, 0x20
;   vuplhf %v24, %v4
;   br %r14

function %sload8x8_big(i64) -> i16x8 tail {
block0(v0: i64):
  v1 = sload8x8 big v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuphb %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuphb %v24, %v4
;   br %r14

function %sload16x4_big(i64) -> i32x4 tail {
block0(v0: i64):
  v1 = sload16x4 big v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   verllh %v6, %v4, 8
;   vuphh %v24, %v6
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   verllh %v6, %v4, 8
;   vuphh %v24, %v6
;   br %r14

function %sload32x2_big(i64) -> i64x2 tail {
block0(v0: i64):
  v1 = sload32x2 big v0
  return v1
}

; VCode:
; block0:
;   ld %f2, 0(%r2)
;   verllg %v4, %v2, 32
;   vuphf %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   ld %f2, 0(%r2) ; trap: heap_oob
;   verllg %v4, %v2, 0x20
;   vuphf %v24, %v4
;   br %r14

function %load_i8x16_big(i64) -> i8x16 tail {
block0(v0: i64):
  v1 = load.i8x16 big v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_i16x8_big(i64) -> i16x8 tail {
block0(v0: i64):
  v1 = load.i16x8 big v0
  return v1
}

; VCode:
; block0:
;   vl %v2, 0(%r2)
;   vpdi %v4, %v2, %v2, 4
;   verllg %v6, %v4, 32
;   verllf %v24, %v6, 16
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r2) ; trap: heap_oob
;   vpdi %v4, %v2, %v2, 4
;   verllg %v6, %v4, 0x20
;   verllf %v24, %v6, 0x10
;   br %r14

function %load_i32x4_big(i64) -> i32x4 tail {
block0(v0: i64):
  v1 = load.i32x4 big v0
  return v1
}

; VCode:
; block0:
;   vl %v2, 0(%r2)
;   vpdi %v4, %v2, %v2, 4
;   verllg %v24, %v4, 32
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r2) ; trap: heap_oob
;   vpdi %v4, %v2, %v2, 4
;   verllg %v24, %v4, 0x20
;   br %r14

function %load_i64x2_big(i64) -> i64x2 tail {
block0(v0: i64):
  v1 = load.i64x2 big v0
  return v1
}

; VCode:
; block0:
;   vl %v2, 0(%r2)
;   vpdi %v24, %v2, %v2, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r2) ; trap: heap_oob
;   vpdi %v24, %v2, %v2, 4
;   br %r14

function %load_f32x4_big(i64) -> f32x4 tail {
block0(v0: i64):
  v1 = load.f32x4 big v0
  return v1
}

; VCode:
; block0:
;   vl %v2, 0(%r2)
;   vpdi %v4, %v2, %v2, 4
;   verllg %v24, %v4, 32
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r2) ; trap: heap_oob
;   vpdi %v4, %v2, %v2, 4
;   verllg %v24, %v4, 0x20
;   br %r14

function %load_f64x2_big(i64) -> f64x2 tail {
block0(v0: i64):
  v1 = load.f64x2 big v0
  return v1
}

; VCode:
; block0:
;   vl %v2, 0(%r2)
;   vpdi %v24, %v2, %v2, 4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vl %v2, 0(%r2) ; trap: heap_oob
;   vpdi %v24, %v2, %v2, 4
;   br %r14

function %store_i8x16_big(i8x16, i64) tail {
block0(v0: i8x16, v1: i64):
  store.i8x16 big v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_i16x8_big(i16x8, i64) tail {
block0(v0: i16x8, v1: i64):
  store.i16x8 big v0, v1
  return
}

; VCode:
; block0:
;   vpdi %v3, %v24, %v24, 4
;   verllg %v5, %v3, 32
;   verllf %v7, %v5, 16
;   vst %v7, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vpdi %v3, %v24, %v24, 4
;   verllg %v5, %v3, 0x20
;   verllf %v7, %v5, 0x10
;   vst %v7, 0(%r2) ; trap: heap_oob
;   br %r14

function %store_i32x4_big(i32x4, i64) tail {
block0(v0: i32x4, v1: i64):
  store.i32x4 big v0, v1
  return
}

; VCode:
; block0:
;   vpdi %v3, %v24, %v24, 4
;   verllg %v5, %v3, 32
;   vst %v5, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vpdi %v3, %v24, %v24, 4
;   verllg %v5, %v3, 0x20
;   vst %v5, 0(%r2) ; trap: heap_oob
;   br %r14

function %store_i64x2_big(i64x2, i64) tail {
block0(v0: i64x2, v1: i64):
  store.i64x2 big v0, v1
  return
}

; VCode:
; block0:
;   vpdi %v3, %v24, %v24, 4
;   vst %v3, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vpdi %v3, %v24, %v24, 4
;   vst %v3, 0(%r2) ; trap: heap_oob
;   br %r14

function %store_f32x4_big(f32x4, i64) tail {
block0(v0: f32x4, v1: i64):
  store.f32x4 big v0, v1
  return
}

; VCode:
; block0:
;   vpdi %v3, %v24, %v24, 4
;   verllg %v5, %v3, 32
;   vst %v5, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vpdi %v3, %v24, %v24, 4
;   verllg %v5, %v3, 0x20
;   vst %v5, 0(%r2) ; trap: heap_oob
;   br %r14

function %store_f64x2_big(f64x2, i64) tail {
block0(v0: f64x2, v1: i64):
  store.f64x2 big v0, v1
  return
}

; VCode:
; block0:
;   vpdi %v3, %v24, %v24, 4
;   vst %v3, 0(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vpdi %v3, %v24, %v24, 4
;   vst %v3, 0(%r2) ; trap: heap_oob
;   br %r14

function %uload8x8_little(i64) -> i16x8 tail {
block0(v0: i64):
  v1 = uload8x8 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuplhb %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuplhb %v24, %v4
;   br %r14

function %uload16x4_little(i64) -> i32x4 tail {
block0(v0: i64):
  v1 = uload16x4 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuplhh %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuplhh %v24, %v4
;   br %r14

function %uload32x2_little(i64) -> i64x2 tail {
block0(v0: i64):
  v1 = uload32x2 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuplhf %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuplhf %v24, %v4
;   br %r14

function %sload8x8_little(i64) -> i16x8 tail {
block0(v0: i64):
  v1 = sload8x8 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuphb %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuphb %v24, %v4
;   br %r14

function %sload16x4_little(i64) -> i32x4 tail {
block0(v0: i64):
  v1 = sload16x4 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuphh %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuphh %v24, %v4
;   br %r14

function %sload32x2_little(i64) -> i64x2 tail {
block0(v0: i64):
  v1 = sload32x2 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   ldgr %f4, %r4
;   vuphf %v24, %v4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   ldgr %f4, %r4
;   vuphf %v24, %v4
;   br %r14

function %load_i8x16_little(i64) -> i8x16 tail {
block0(v0: i64):
  v1 = load.i8x16 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_i16x8_little(i64) -> i16x8 tail {
block0(v0: i64):
  v1 = load.i16x8 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_i32x4_little(i64) -> i32x4 tail {
block0(v0: i64):
  v1 = load.i32x4 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_i64x2_little(i64) -> i64x2 tail {
block0(v0: i64):
  v1 = load.i64x2 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_f32x4_little(i64) -> f32x4 tail {
block0(v0: i64):
  v1 = load.f32x4 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_f64x2_little(i64) -> f64x2 tail {
block0(v0: i64):
  v1 = load.f64x2 little v0
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 0(%r2)
;   lrvg %r6, 8(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0(%r2) ; trap: heap_oob
;   lrvg %r6, 8(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %load_f64x2_sum_little(i64, i64) -> f64x2 tail {
block0(v0: i64, v1: i64):
  v2 = iadd.i64 v0, v1
  v3 = load.f64x2 little v2
  return v3
}

; VCode:
; block0:
;   lrvg %r5, 0(%r3,%r2)
;   lrvg %r7, 8(%r3,%r2)
;   vlvgp %v24, %r7, %r5
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r5, 0(%r3, %r2) ; trap: heap_oob
;   lrvg %r7, 8(%r3, %r2) ; trap: heap_oob
;   vlvgp %v24, %r7, %r5
;   br %r14

function %load_f64x2_off_little(i64) -> f64x2 tail {
block0(v0: i64):
  v1 = load.f64x2 little v0+128
  return v1
}

; VCode:
; block0:
;   lrvg %r4, 128(%r2)
;   lrvg %r6, 136(%r2)
;   vlvgp %v24, %r6, %r4
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   lrvg %r4, 0x80(%r2) ; trap: heap_oob
;   lrvg %r6, 0x88(%r2) ; trap: heap_oob
;   vlvgp %v24, %r6, %r4
;   br %r14

function %store_i8x16_little(i8x16, i64) tail {
block0(v0: i8x16, v1: i64):
  store.i8x16 little v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_i16x8_little(i16x8, i64) tail {
block0(v0: i16x8, v1: i64):
  store.i16x8 little v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_i32x4_little(i32x4, i64) tail {
block0(v0: i32x4, v1: i64):
  store.i32x4 little v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_i64x2_little(i64x2, i64) tail {
block0(v0: i64x2, v1: i64):
  store.i64x2 little v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_f32x4_little(f32x4, i64) tail {
block0(v0: f32x4, v1: i64):
  store.f32x4 little v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_f64x2_little(f64x2, i64) tail {
block0(v0: f64x2, v1: i64):
  store.f64x2 little v0, v1
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2)
;   strvg %r7, 8(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0(%r2) ; trap: heap_oob
;   strvg %r7, 8(%r2) ; trap: heap_oob
;   br %r14

function %store_f64x2_sum_little(f64x2, i64, i64) tail {
block0(v0: f64x2, v1: i64, v2: i64):
  v3 = iadd.i64 v1, v2
  store.f64x2 little v0, v3
  return
}

; VCode:
; block0:
;   vlgvg %r6, %v24, 1
;   vlgvg %r4, %v24, 0
;   strvg %r6, 0(%r3,%r2)
;   strvg %r4, 8(%r3,%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r6, %v24, 1
;   vlgvg %r4, %v24, 0
;   strvg %r6, 0(%r3, %r2) ; trap: heap_oob
;   strvg %r4, 8(%r3, %r2) ; trap: heap_oob
;   br %r14

function %store_f64x2_off_little(f64x2, i64) tail {
block0(v0: f64x2, v1: i64):
  store.f64x2 little v0, v1+128
  return
}

; VCode:
; block0:
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 128(%r2)
;   strvg %r7, 136(%r2)
;   br %r14
;
; Disassembled:
; block0: ; offset 0x0
;   vlgvg %r5, %v24, 1
;   vlgvg %r7, %v24, 0
;   strvg %r5, 0x80(%r2) ; trap: heap_oob
;   strvg %r7, 0x88(%r2) ; trap: heap_oob
;   br %r14

