test compile precise-output
set unwind_info=false
target riscv64 has_v

function %simd_icmp_ne_i8(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = icmp ne v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vv v0,v9,v11 #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v8,0 #avl=16, #vtype=(e8, m1, ta, ma)
;   vmerge.vim v10,v8,-1,v0.t #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x80, 0x95, 0x66
;   .byte 0x57, 0x34, 0x00, 0x5e
;   .byte 0x57, 0xb5, 0x8f, 0x5c
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_ne_i16(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
    v2 = icmp ne v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vv v0,v9,v11 #avl=8, #vtype=(e16, m1, ta, ma)
;   vmv.v.i v8,0 #avl=8, #vtype=(e16, m1, ta, ma)
;   vmerge.vim v10,v8,-1,v0.t #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x80, 0x95, 0x66
;   .byte 0x57, 0x34, 0x00, 0x5e
;   .byte 0x57, 0xb5, 0x8f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_ne_i32(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
    v2 = icmp ne v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vv v0,v9,v11 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v8,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v10,v8,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x80, 0x95, 0x66
;   .byte 0x57, 0x34, 0x00, 0x5e
;   .byte 0x57, 0xb5, 0x8f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_ne_i64(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
    v2 = icmp ne v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vv v0,v9,v11 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v8,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v10,v8,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x80, 0x95, 0x66
;   .byte 0x57, 0x34, 0x00, 0x5e
;   .byte 0x57, 0xb5, 0x8f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_splat_rhs_eq_i64(i64x2, i64) -> i64x2 {
block0(v0: i64x2, v1: i64):
    v2 = splat.i64x2 v1
    v3 = icmp ne v0, v2
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vx v0,v9,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v15,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v9,v15,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v9,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xc0, 0x95, 0x66
;   .byte 0xd7, 0x37, 0x00, 0x5e
;   .byte 0xd7, 0xb4, 0xff, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_splat_lhs_eq_i64(i64x2, i64) -> i64x2 {
block0(v0: i64x2, v1: i64):
    v2 = splat.i64x2 v1
    v3 = icmp ne v2, v0
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vx v0,v9,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v15,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v9,v15,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v9,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xc0, 0x95, 0x66
;   .byte 0xd7, 0x37, 0x00, 0x5e
;   .byte 0xd7, 0xb4, 0xff, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_splat_const_rhs_eq_i64(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i64 10
    v2 = splat.i64x2 v1
    v3 = icmp ne v0, v2
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vi v0,v9,10 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v14,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v8,v14,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x30, 0x95, 0x66
;   .byte 0x57, 0x37, 0x00, 0x5e
;   .byte 0x57, 0xb4, 0xef, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_icmp_splat_const_lhs_eq_i64(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i64 10
    v2 = splat.i64x2 v1
    v3 = icmp ne v2, v0
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmsne.vi v0,v9,10 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v14,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v8,v14,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x30, 0x95, 0x66
;   .byte 0x57, 0x37, 0x00, 0x5e
;   .byte 0x57, 0xb4, 0xef, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

