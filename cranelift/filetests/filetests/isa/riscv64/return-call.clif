test compile precise-output

target riscv64

;;;; Test passing `i64`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_i64(i64) -> i64 tail {
block0(v0: i64):
    v1 = iadd_imm.i64 v0, 10
    return v1
}

; VCode:
; block0:
;   addi a0,a0,10
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a0, a0, 0xa
;   ret

function %call_i64(i64) -> i64 tail {
    fn0 = %callee_i64(i64) -> i64 tail

block0(v0: i64):
    return_call fn0(v0)
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   load_sym t0,%callee_i64+0
;   return_call_ind t0 new_stack_arg_size:0 a0=a0
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   auipc t0, 0
;   ld t0, 0xc(t0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %callee_i64 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   jr t0

;;;; Test colocated tail calls ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %colocated_i64(i64) -> i64 tail {
    fn0 = colocated %callee_i64(i64) -> i64 tail

block0(v0: i64):
    return_call fn0(v0)
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   return_call TestCase(%callee_i64) new_stack_arg_size:0 a0=a0
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   auipc t6, 0 ; reloc_external RiscvCallPlt %callee_i64 0
;   jr t6

;;;; Test passing `f64`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_f64(f64) -> f64 tail {
block0(v0: f64):
    v1 = f64const 0x10.0
    v2 = fadd.f64 v0, v1
    return v2
}

; VCode:
; block0:
;   lui a3,1027
;   slli a5,a3,40
;   fmv.d.x fa1,a5
;   fadd.d fa0,fa0,fa1,rne
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui a3, 0x403
;   slli a5, a3, 0x28
;   fmv.d.x fa1, a5
;   fadd.d fa0, fa0, fa1, rne
;   ret

function %call_f64(f64) -> f64 tail {
    fn0 = %callee_f64(f64) -> f64 tail

block0(v0: f64):
    return_call fn0(v0)
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   load_sym t0,%callee_f64+0
;   return_call_ind t0 new_stack_arg_size:0 fa0=fa0
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   auipc t0, 0
;   ld t0, 0xc(t0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %callee_f64 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   jr t0

;;;; Test passing `i8`s ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %callee_i8(i8) -> i8 tail {
block0(v0: i8):
    v1 = iconst.i8 0
    v2 = icmp eq v0, v1
    return v2
}

; VCode:
; block0:
;   andi a2,a0,255
;   seqz a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   andi a2, a0, 0xff
;   seqz a0, a2
;   ret

function %call_i8(i8) -> i8 tail {
    fn0 = %callee_i8(i8) -> i8 tail

block0(v0: i8):
    return_call fn0(v0)
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   load_sym t0,%callee_i8+0
;   return_call_ind t0 new_stack_arg_size:0 a0=a0
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   auipc t0, 0
;   ld t0, 0xc(t0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %callee_i8 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   jr t0

;;;; Test passing many arguments on stack ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

function %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v25
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   ld a0,-8(incoming_arg)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   addi sp,sp,144
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   ld a0, 0x98(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   addi sp, sp, 0x90
;   ret

function %tail_caller_stack_args() -> i64 tail {
    fn0 = %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    return_call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-144
;   sd ra,8(sp)
;   ld fp,144(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-112
;   sd s1,104(sp)
;   sd s2,96(sp)
;   sd s3,88(sp)
;   sd s4,80(sp)
;   sd s5,72(sp)
;   sd s6,64(sp)
;   sd s7,56(sp)
;   sd s8,48(sp)
;   sd s9,40(sp)
;   sd s10,32(sp)
;   sd s11,24(sp)
; block0:
;   li a1,10
;   sd a1,8(slot)
;   li a2,15
;   sd a2,0(slot)
;   li a2,20
;   li a3,25
;   li a4,30
;   li a5,35
;   li a6,40
;   li a7,45
;   li s2,50
;   li s3,55
;   li s4,60
;   li s5,65
;   li s6,70
;   li s7,75
;   li s8,80
;   li s9,85
;   li s10,90
;   li s11,95
;   li t0,100
;   li t1,105
;   li t2,110
;   li t3,115
;   li t4,120
;   li s1,125
;   li a0,130
;   li a1,135
;   sd s2,-144(incoming_arg)
;   sd s3,-136(incoming_arg)
;   sd s4,-128(incoming_arg)
;   sd s5,-120(incoming_arg)
;   sd s6,-112(incoming_arg)
;   sd s7,-104(incoming_arg)
;   sd s8,-96(incoming_arg)
;   sd s9,-88(incoming_arg)
;   sd s10,-80(incoming_arg)
;   sd s11,-72(incoming_arg)
;   sd t0,-64(incoming_arg)
;   sd t1,-56(incoming_arg)
;   sd t2,-48(incoming_arg)
;   sd t3,-40(incoming_arg)
;   sd t4,-32(incoming_arg)
;   sd s1,-24(incoming_arg)
;   sd a0,-16(incoming_arg)
;   sd a1,-8(incoming_arg)
;   load_sym t0,%tail_callee_stack_args+0
;   ld a0,8(slot)
;   ld a1,0(slot)
;   return_call_ind t0 new_stack_arg_size:144 a0=a0 a1=a1 a2=a2 a3=a3 a4=a4 a5=a5 a6=a6 a7=a7
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x90
;   sd ra, 8(sp)
;   ld s0, 0x90(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x70
;   sd s1, 0x68(sp)
;   sd s2, 0x60(sp)
;   sd s3, 0x58(sp)
;   sd s4, 0x50(sp)
;   sd s5, 0x48(sp)
;   sd s6, 0x40(sp)
;   sd s7, 0x38(sp)
;   sd s8, 0x30(sp)
;   sd s9, 0x28(sp)
;   sd s10, 0x20(sp)
;   sd s11, 0x18(sp)
; block1: ; offset 0x54
;   addi a1, zero, 0xa
;   sd a1, 8(sp)
;   addi a2, zero, 0xf
;   sd a2, 0(sp)
;   addi a2, zero, 0x14
;   addi a3, zero, 0x19
;   addi a4, zero, 0x1e
;   addi a5, zero, 0x23
;   addi a6, zero, 0x28
;   addi a7, zero, 0x2d
;   addi s2, zero, 0x32
;   addi s3, zero, 0x37
;   addi s4, zero, 0x3c
;   addi s5, zero, 0x41
;   addi s6, zero, 0x46
;   addi s7, zero, 0x4b
;   addi s8, zero, 0x50
;   addi s9, zero, 0x55
;   addi s10, zero, 0x5a
;   addi s11, zero, 0x5f
;   addi t0, zero, 0x64
;   addi t1, zero, 0x69
;   addi t2, zero, 0x6e
;   addi t3, zero, 0x73
;   addi t4, zero, 0x78
;   addi s1, zero, 0x7d
;   addi a0, zero, 0x82
;   addi a1, zero, 0x87
;   sd s2, 0x80(sp)
;   sd s3, 0x88(sp)
;   sd s4, 0x90(sp)
;   sd s5, 0x98(sp)
;   sd s6, 0xa0(sp)
;   sd s7, 0xa8(sp)
;   sd s8, 0xb0(sp)
;   sd s9, 0xb8(sp)
;   sd s10, 0xc0(sp)
;   sd s11, 0xc8(sp)
;   sd t0, 0xd0(sp)
;   sd t1, 0xd8(sp)
;   sd t2, 0xe0(sp)
;   sd t3, 0xe8(sp)
;   sd t4, 0xf0(sp)
;   sd s1, 0xf8(sp)
;   sd a0, 0x100(sp)
;   sd a1, 0x108(sp)
;   auipc t0, 0
;   ld t0, 0xc(t0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_args 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld a0, 8(sp)
;   ld a1, 0(sp)
;   ld s1, 0x68(sp)
;   ld s2, 0x60(sp)
;   ld s3, 0x58(sp)
;   ld s4, 0x50(sp)
;   ld s5, 0x48(sp)
;   ld s6, 0x40(sp)
;   ld s7, 0x38(sp)
;   ld s8, 0x30(sp)
;   ld s9, 0x28(sp)
;   ld s10, 0x20(sp)
;   ld s11, 0x18(sp)
;   ld ra, 0x78(sp)
;   ld s0, 0x70(sp)
;   addi sp, sp, 0x80
;   jr t0

;;;; Test diff blocks with diff return calls with diff # of stack args ;;;;;;;;;

function %different_callee1(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v25
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   ld a0,-8(incoming_arg)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   addi sp,sp,144
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   ld a0, 0x98(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   addi sp, sp, 0x90
;   ret

function %different_callee2(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64, v26: i64):
    return v26
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   ld a0,-16(incoming_arg)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   addi sp,sp,160
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   ld a0, 0xa0(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   addi sp, sp, 0xa0
;   ret

function %caller_of_different_callees(i64) -> i64 tail {
    fn0 = %different_callee1(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail
    fn1 = %different_callee2(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0(v99: i64):
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    brif v99, block1, block2

block1:
    return_call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)

block2:
    v26 = iconst.i64 140
    return_call fn1(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26)
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-160
;   sd ra,8(sp)
;   ld fp,160(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-128
;   sd s1,120(sp)
;   sd s2,112(sp)
;   sd s3,104(sp)
;   sd s4,96(sp)
;   sd s5,88(sp)
;   sd s6,80(sp)
;   sd s7,72(sp)
;   sd s8,64(sp)
;   sd s9,56(sp)
;   sd s10,48(sp)
;   sd s11,40(sp)
; block0:
;   li a1,10
;   sd a1,16(slot)
;   li a2,15
;   sd a2,8(slot)
;   li a3,20
;   sd a3,0(slot)
;   li a3,25
;   li a4,30
;   li a5,35
;   li a6,40
;   li a7,45
;   li a2,50
;   li a1,55
;   li s1,60
;   li s5,65
;   li s4,70
;   li s3,75
;   li s2,80
;   li t4,85
;   li t3,90
;   li t2,95
;   li t1,100
;   li t0,105
;   li s11,110
;   li s10,115
;   li s9,120
;   li s8,125
;   li s7,130
;   li s6,135
;   bne a0,zero,taken(label2),not_taken(label1)
; block1:
;   li a0,140
;   sd a2,-160(incoming_arg)
;   sd a1,-152(incoming_arg)
;   sd s1,-144(incoming_arg)
;   sd s5,-136(incoming_arg)
;   sd s4,-128(incoming_arg)
;   sd s3,-120(incoming_arg)
;   sd s2,-112(incoming_arg)
;   sd t4,-104(incoming_arg)
;   sd t3,-96(incoming_arg)
;   sd t2,-88(incoming_arg)
;   sd t1,-80(incoming_arg)
;   sd t0,-72(incoming_arg)
;   sd s11,-64(incoming_arg)
;   sd s10,-56(incoming_arg)
;   sd s9,-48(incoming_arg)
;   sd s8,-40(incoming_arg)
;   sd s7,-32(incoming_arg)
;   sd s6,-24(incoming_arg)
;   sd a0,-16(incoming_arg)
;   load_sym t0,%different_callee2+0
;   ld a0,16(slot)
;   ld a1,8(slot)
;   ld a2,0(slot)
;   return_call_ind t0 new_stack_arg_size:160 a0=a0 a1=a1 a2=a2 a3=a3 a4=a4 a5=a5 a6=a6 a7=a7
; block2:
;   ld a0,16(slot)
;   sd a2,-144(incoming_arg)
;   sd a1,-136(incoming_arg)
;   sd s1,-128(incoming_arg)
;   sd s5,-120(incoming_arg)
;   sd s4,-112(incoming_arg)
;   sd s3,-104(incoming_arg)
;   sd s2,-96(incoming_arg)
;   sd t4,-88(incoming_arg)
;   sd t3,-80(incoming_arg)
;   sd t2,-72(incoming_arg)
;   sd t1,-64(incoming_arg)
;   sd t0,-56(incoming_arg)
;   sd s11,-48(incoming_arg)
;   sd s10,-40(incoming_arg)
;   sd s9,-32(incoming_arg)
;   sd s8,-24(incoming_arg)
;   sd s7,-16(incoming_arg)
;   sd s6,-8(incoming_arg)
;   load_sym t0,%different_callee1+0
;   ld a1,8(slot)
;   ld a2,0(slot)
;   return_call_ind t0 new_stack_arg_size:144 a0=a0 a1=a1 a2=a2 a3=a3 a4=a4 a5=a5 a6=a6 a7=a7
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0xa0
;   sd ra, 8(sp)
;   ld s0, 0xa0(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x80
;   sd s1, 0x78(sp)
;   sd s2, 0x70(sp)
;   sd s3, 0x68(sp)
;   sd s4, 0x60(sp)
;   sd s5, 0x58(sp)
;   sd s6, 0x50(sp)
;   sd s7, 0x48(sp)
;   sd s8, 0x40(sp)
;   sd s9, 0x38(sp)
;   sd s10, 0x30(sp)
;   sd s11, 0x28(sp)
; block1: ; offset 0x54
;   addi a1, zero, 0xa
;   sd a1, 0x10(sp)
;   addi a2, zero, 0xf
;   sd a2, 8(sp)
;   addi a3, zero, 0x14
;   sd a3, 0(sp)
;   addi a3, zero, 0x19
;   addi a4, zero, 0x1e
;   addi a5, zero, 0x23
;   addi a6, zero, 0x28
;   addi a7, zero, 0x2d
;   addi a2, zero, 0x32
;   addi a1, zero, 0x37
;   addi s1, zero, 0x3c
;   addi s5, zero, 0x41
;   addi s4, zero, 0x46
;   addi s3, zero, 0x4b
;   addi s2, zero, 0x50
;   addi t4, zero, 0x55
;   addi t3, zero, 0x5a
;   addi t2, zero, 0x5f
;   addi t1, zero, 0x64
;   addi t0, zero, 0x69
;   addi s11, zero, 0x6e
;   addi s10, zero, 0x73
;   addi s9, zero, 0x78
;   addi s8, zero, 0x7d
;   addi s7, zero, 0x82
;   addi s6, zero, 0x87
;   bnez a0, 0xb0
; block2: ; offset 0xcc
;   addi a0, zero, 0x8c
;   sd a2, 0x90(sp)
;   sd a1, 0x98(sp)
;   sd s1, 0xa0(sp)
;   sd s5, 0xa8(sp)
;   sd s4, 0xb0(sp)
;   sd s3, 0xb8(sp)
;   sd s2, 0xc0(sp)
;   sd t4, 0xc8(sp)
;   sd t3, 0xd0(sp)
;   sd t2, 0xd8(sp)
;   sd t1, 0xe0(sp)
;   sd t0, 0xe8(sp)
;   sd s11, 0xf0(sp)
;   sd s10, 0xf8(sp)
;   sd s9, 0x100(sp)
;   sd s8, 0x108(sp)
;   sd s7, 0x110(sp)
;   sd s6, 0x118(sp)
;   sd a0, 0x120(sp)
;   auipc t0, 0
;   ld t0, 0xc(t0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %different_callee2 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld a0, 0x10(sp)
;   ld a1, 8(sp)
;   ld a2, 0(sp)
;   ld s1, 0x78(sp)
;   ld s2, 0x70(sp)
;   ld s3, 0x68(sp)
;   ld s4, 0x60(sp)
;   ld s5, 0x58(sp)
;   ld s6, 0x50(sp)
;   ld s7, 0x48(sp)
;   ld s8, 0x40(sp)
;   ld s9, 0x38(sp)
;   ld s10, 0x30(sp)
;   ld s11, 0x28(sp)
;   ld ra, 0x88(sp)
;   ld s0, 0x80(sp)
;   addi sp, sp, 0x90
;   jr t0
; block3: ; offset 0x178
;   ld a0, 0x10(sp)
;   sd a2, 0xa0(sp)
;   sd a1, 0xa8(sp)
;   sd s1, 0xb0(sp)
;   sd s5, 0xb8(sp)
;   sd s4, 0xc0(sp)
;   sd s3, 0xc8(sp)
;   sd s2, 0xd0(sp)
;   sd t4, 0xd8(sp)
;   sd t3, 0xe0(sp)
;   sd t2, 0xe8(sp)
;   sd t1, 0xf0(sp)
;   sd t0, 0xf8(sp)
;   sd s11, 0x100(sp)
;   sd s10, 0x108(sp)
;   sd s9, 0x110(sp)
;   sd s8, 0x118(sp)
;   sd s7, 0x120(sp)
;   sd s6, 0x128(sp)
;   auipc t0, 0
;   ld t0, 0xc(t0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %different_callee1 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld a1, 8(sp)
;   ld a2, 0(sp)
;   ld s1, 0x78(sp)
;   ld s2, 0x70(sp)
;   ld s3, 0x68(sp)
;   ld s4, 0x60(sp)
;   ld s5, 0x58(sp)
;   ld s6, 0x50(sp)
;   ld s7, 0x48(sp)
;   ld s8, 0x40(sp)
;   ld s9, 0x38(sp)
;   ld s10, 0x30(sp)
;   ld s11, 0x28(sp)
;   ld ra, 0x88(sp)
;   ld s0, 0x80(sp)
;   addi sp, sp, 0xa0
;   jr t0

