test compile precise-output
set unwind_info=false
target riscv64

function %f5(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iadd.i64 v0, v2
  v4 = load.i32 v3
  return v4
}

; VCode:
; block0:
;   sext.w a5,a1
;   add a5,a0,a5
;   lw a0,0(a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a5, a1
;   add a5, a0, a5
;   lw a0, 0(a5) ; trap: heap_oob
;   ret

function %f6(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iadd.i64 v2, v0
  v4 = load.i32 v3
  return v4
}

; VCode:
; block0:
;   sext.w a5,a1
;   add a5,a5,a0
;   lw a0,0(a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a5, a1
;   add a5, a5, a0
;   lw a0, 0(a5) ; trap: heap_oob
;   ret

function %f7(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = uextend.i64 v0
  v3 = uextend.i64 v1
  v4 = iadd.i64 v2, v3
  v5 = load.i32 v4
  return v5
}

; VCode:
; block0:
;   slli a2,a0,32
;   srli a3,a2,32
;   slli a1,a1,32
;   srli a4,a1,32
;   add a2,a3,a4
;   lw a0,0(a2)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   slli a2, a0, 0x20
;   srli a3, a2, 0x20
;   slli a1, a1, 0x20
;   srli a4, a1, 0x20
;   add a2, a3, a4
;   lw a0, 0(a2) ; trap: heap_oob
;   ret

function %f8(i64, i32) -> i32 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iconst.i64 32
  v4 = iadd.i64 v2, v3
  v5 = iadd.i64 v4, v0
  v6 = iadd.i64 v5, v5
  v7 = load.i32 v6+4
  return v7
}

; VCode:
; block0:
;   sext.w a1,a1
;   addi a1,a1,32
;   add a1,a1,a0
;   add a1,a1,a1
;   lw a0,4(a1)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a1, a1
;   addi a1, a1, 0x20
;   add a1, a1, a0
;   add a1, a1, a1
;   lw a0, 4(a1) ; trap: heap_oob
;   ret

function %f9(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 48
  v4 = iadd.i64 v0, v1
  v5 = iadd.i64 v4, v2
  v6 = iadd.i64 v5, v3
  v7 = load.i32 v6
  return v7
}

; VCode:
; block0:
;   add a0,a0,a1
;   add a0,a0,a2
;   lw a0,48(a0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   add a0, a0, a1
;   add a0, a0, a2
;   lw a0, 0x30(a0) ; trap: heap_oob
;   ret

function %f10(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i64 4100
  v4 = iadd.i64 v0, v1
  v5 = iadd.i64 v4, v2
  v6 = iadd.i64 v5, v3
  v7 = load.i32 v6
  return v7
}

; VCode:
; block0:
;   add a0,a0,a1
;   add a0,a0,a2
;   lw a0,4100(a0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   add a0, a0, a1
;   add a0, a0, a2
;   lui t6, 1
;   addi t6, t6, 4
;   add t6, t6, a0
;   lw a0, 0(t6) ; trap: heap_oob
;   ret

function %f10() -> i32 {
block0:
  v1 = iconst.i64 1234
  v2 = load.i32 v1
  return v2
}

; VCode:
; block0:
;   li a1,1234
;   lw a0,0(a1)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi a1, zero, 0x4d2
;   lw a0, 0(a1) ; trap: heap_oob
;   ret

function %f11(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i64 8388608 ;; Imm12: 0x800 << 12
  v2 = iadd.i64 v0, v1
  v3 = load.i32 v2
  return v3
}

; VCode:
; block0:
;   lw a0,8388608(a0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui t6, 0x800
;   add t6, t6, a0
;   lw a0, 0(t6) ; trap: heap_oob
;   ret

function %f12(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i64 -4
  v2 = iadd.i64 v0, v1
  v3 = load.i32 v2
  return v3
}

; VCode:
; block0:
;   lw a0,-4(a0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lw a0, -4(a0) ; trap: heap_oob
;   ret

function %f13(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i64 1000000000
  v2 = iadd.i64 v0, v1
  v3 = load.i32 v2
  return v3
}

; VCode:
; block0:
;   lw a0,1000000000(a0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui t6, 0x3b9ad
;   addi t6, t6, -0x600
;   add t6, t6, a0
;   lw a0, 0(t6) ; trap: heap_oob
;   ret

function %f14(i32) -> i32 {
block0(v0: i32):
  v1 = sextend.i64 v0
  v2 = load.i32 v1
  return v2
}

; VCode:
; block0:
;   sext.w a3,a0
;   lw a0,0(a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a3, a0
;   lw a0, 0(a3) ; trap: heap_oob
;   ret

function %f15(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = sextend.i64 v0
  v3 = sextend.i64 v1
  v4 = iadd.i64 v2, v3
  v5 = load.i32 v4
  return v5
}

; VCode:
; block0:
;   sext.w a0,a0
;   sext.w a1,a1
;   add a0,a0,a1
;   lw a0,0(a0)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a0, a0
;   sext.w a1, a1
;   add a0, a0, a1
;   lw a0, 0(a0) ; trap: heap_oob
;   ret

function %f18(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 -4098
  v6 = uextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; VCode:
; block0:
;   lui a3,-1
;   addi a5,a3,-2
;   slli a3,a5,32
;   srli a5,a3,32
;   lh a0,0(a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui a3, 0xfffff
;   addi a5, a3, -2
;   slli a3, a5, 0x20
;   srli a5, a3, 0x20
;   lh a0, 0(a5) ; trap: heap_oob
;   ret

function %f19(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 4098
  v6 = uextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; VCode:
; block0:
;   lui a3,1
;   addi a5,a3,2
;   slli a3,a5,32
;   srli a5,a3,32
;   lh a0,0(a5)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui a3, 1
;   addi a5, a3, 2
;   slli a3, a5, 0x20
;   srli a5, a3, 0x20
;   lh a0, 0(a5) ; trap: heap_oob
;   ret

function %f20(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 -4098
  v6 = sextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; VCode:
; block0:
;   lui a2,-1
;   addi a4,a2,-2
;   sext.w a3,a4
;   lh a0,0(a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui a2, 0xfffff
;   addi a4, a2, -2
;   sext.w a3, a4
;   lh a0, 0(a3) ; trap: heap_oob
;   ret

function %f21(i64, i64, i64) -> i32 {
block0(v0: i64, v1: i64, v2: i64):
  v3 = iconst.i32 4098
  v6 = sextend.i64 v3
  v5 = sload16.i32 v6+0
  return v5
}

; VCode:
; block0:
;   lui a2,1
;   addi a4,a2,2
;   sext.w a3,a4
;   lh a0,0(a3)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui a2, 1
;   addi a4, a2, 2
;   sext.w a3, a4
;   lh a0, 0(a3) ; trap: heap_oob
;   ret

function %i128(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0
  store.i128 v1, v0
  return v1
}

; VCode:
; block0:
;   ld a2,0(a0)
;   ld a1,8(a0)
;   sd a2,0(a0)
;   sd a1,8(a0)
;   mv a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a2, 0(a0) ; trap: heap_oob
;   ld a1, 8(a0) ; trap: heap_oob
;   sd a2, 0(a0) ; trap: heap_oob
;   sd a1, 8(a0) ; trap: heap_oob
;   mv a0, a2
;   ret

function %i128_imm_offset(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0+16
  store.i128 v1, v0+16
  return v1
}

; VCode:
; block0:
;   ld a2,16(a0)
;   ld a1,24(a0)
;   sd a2,16(a0)
;   sd a1,24(a0)
;   mv a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a2, 0x10(a0) ; trap: heap_oob
;   ld a1, 0x18(a0) ; trap: heap_oob
;   sd a2, 0x10(a0) ; trap: heap_oob
;   sd a1, 0x18(a0) ; trap: heap_oob
;   mv a0, a2
;   ret

function %i128_imm_offset_large(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0+504
  store.i128 v1, v0+504
  return v1
}

; VCode:
; block0:
;   ld a2,504(a0)
;   ld a1,512(a0)
;   sd a2,504(a0)
;   sd a1,512(a0)
;   mv a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a2, 0x1f8(a0) ; trap: heap_oob
;   ld a1, 0x200(a0) ; trap: heap_oob
;   sd a2, 0x1f8(a0) ; trap: heap_oob
;   sd a1, 0x200(a0) ; trap: heap_oob
;   mv a0, a2
;   ret

function %i128_imm_offset_negative_large(i64) -> i128 {
block0(v0: i64):
  v1 = load.i128 v0-512
  store.i128 v1, v0-512
  return v1
}

; VCode:
; block0:
;   ld a2,-512(a0)
;   ld a1,-504(a0)
;   sd a2,-512(a0)
;   sd a1,-504(a0)
;   mv a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a2, -0x200(a0) ; trap: heap_oob
;   ld a1, -0x1f8(a0) ; trap: heap_oob
;   sd a2, -0x200(a0) ; trap: heap_oob
;   sd a1, -0x1f8(a0) ; trap: heap_oob
;   mv a0, a2
;   ret

function %i128_add_offset(i64) -> i128 {
block0(v0: i64):
  v1 = iadd_imm v0, 32
  v2 = load.i128 v1
  store.i128 v2, v1
  return v2
}

; VCode:
; block0:
;   ld a2,32(a0)
;   ld a1,40(a0)
;   sd a2,32(a0)
;   sd a1,40(a0)
;   mv a0,a2
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a2, 0x20(a0) ; trap: heap_oob
;   ld a1, 0x28(a0) ; trap: heap_oob
;   sd a2, 0x20(a0) ; trap: heap_oob
;   sd a1, 0x28(a0) ; trap: heap_oob
;   mv a0, a2
;   ret

function %i128_32bit_sextend_simple(i32) -> i128 {
block0(v0: i32):
  v1 = sextend.i64 v0
  v2 = load.i128 v1
  store.i128 v2, v1
  return v2
}

; VCode:
; block0:
;   sext.w a4,a0
;   ld a0,0(a4)
;   ld a1,8(a4)
;   sd a0,0(a4)
;   sd a1,8(a4)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a4, a0
;   ld a0, 0(a4) ; trap: heap_oob
;   ld a1, 8(a4) ; trap: heap_oob
;   sd a0, 0(a4) ; trap: heap_oob
;   sd a1, 8(a4) ; trap: heap_oob
;   ret

function %i128_32bit_sextend(i64, i32) -> i128 {
block0(v0: i64, v1: i32):
  v2 = sextend.i64 v1
  v3 = iadd.i64 v0, v2
  v4 = iadd_imm.i64 v3, 24
  v5 = load.i128 v4
  store.i128 v5, v4
  return v5
}

; VCode:
; block0:
;   sext.w a1,a1
;   add a0,a0,a1
;   ld a5,24(a0)
;   ld a1,32(a0)
;   sd a5,24(a0)
;   sd a1,32(a0)
;   mv a0,a5
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   sext.w a1, a1
;   add a0, a0, a1
;   ld a5, 0x18(a0) ; trap: heap_oob
;   ld a1, 0x20(a0) ; trap: heap_oob
;   sd a5, 0x18(a0) ; trap: heap_oob
;   sd a1, 0x20(a0) ; trap: heap_oob
;   mv a0, a5
;   ret

function %load_from_get_stack_pointer() -> i64 {
block0:
  v0 = get_stack_pointer.i64
  v1 = load.i64 v0+8
  return v1
}

; VCode:
; block0:
;   ld a0,8(sp)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ld a0, 8(sp) ; trap: heap_oob
;   ret

