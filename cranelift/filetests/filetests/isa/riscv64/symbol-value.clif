test compile precise-output
set unwind_info=false
target riscv64

function %func_addr() -> i64 {
    fn0 = %func0(i64) -> i64

block0:
    v0 = func_addr.i64 fn0
    return v0
}

; VCode:
; block0:
;   load_ext_name_far a0,%func0+0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %func0 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %colocated_func_addr() -> i64 {
    fn0 = colocated %func0(i64) -> i64

block0:
    v0 = func_addr.i64 fn0
    return v0
}

; VCode:
; block0:
;   load_ext_name_near a0,%func0+0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0 ; reloc_external RiscvPCRelHi20 %func0 0
;   mv a0, a0 ; reloc_external RiscvPCRelLo12I func+0 0
;   ret

function %symbol_value() -> i64 {
    gv0 = symbol %global0

block0:
    v0 = symbol_value.i64 gv0
    return v0
}

; VCode:
; block0:
;   load_ext_name_far a0,%global0+0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %global0 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %symbol_value_plus_offset() -> i64 {
    gv0 = symbol %global0+123

block0:
    v0 = symbol_value.i64 gv0
    return v0
}

; VCode:
; block0:
;   load_ext_name_far a0,%global0+123
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %global0 123
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %symbol_value_minus_offset() -> i64 {
    gv0 = symbol %global0-123

block0:
    v0 = symbol_value.i64 gv0
    return v0
}

; VCode:
; block0:
;   load_ext_name_far a0,%global0-123
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0
;   ld a0, 0xc(a0)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %global0 -123
;   .byte 0x00, 0x00, 0x00, 0x00
;   ret

function %colocated_symbol_value() -> i64 {
    gv0 = symbol colocated %global0

block0:
    v0 = symbol_value.i64 gv0
    return v0
}

; VCode:
; block0:
;   load_ext_name_near a0,%global0+0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0 ; reloc_external RiscvPCRelHi20 %global0 0
;   mv a0, a0 ; reloc_external RiscvPCRelLo12I func+0 0
;   ret

function %colocated_symbol_value_plus_offset() -> i64 {
    gv0 = symbol colocated %global0+123

block0:
    v0 = symbol_value.i64 gv0
    return v0
}

; VCode:
; block0:
;   load_ext_name_near a0,%global0+123
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0 ; reloc_external RiscvPCRelHi20 %global0 123
;   mv a0, a0 ; reloc_external RiscvPCRelLo12I func+0 0
;   ret

function %colocated_symbol_value_minus_offset() -> i64 {
    gv0 = symbol colocated %global0-123

block0:
    v0 = symbol_value.i64 gv0
    return v0
}

; VCode:
; block0:
;   load_ext_name_near a0,%global0-123
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   auipc a0, 0 ; reloc_external RiscvPCRelHi20 %global0 -123
;   mv a0, a0 ; reloc_external RiscvPCRelLo12I func+0 0
;   ret

