test compile precise-output
set unwind_info=false
target riscv64 has_v

function %bitcast_f16_to_i16(f16) -> i16 {
block0(v0: f16):
  v1 = bitcast.i16 v0
  return v1
}

; VCode:
; block0:
;   fmv.x.w a0,fa0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmv.x.w a0, fa0
;   ret

function %bitcast_i16_to_f16(i16) -> f16 {
block0(v0: i16):
  v1 = bitcast.f16 v0
  return v1
}

; VCode:
; block0:
;   lui a2,-16
;   or a4,a0,a2
;   fmv.w.x fa0,a4
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   lui a2, 0xffff0
;   or a4, a0, a2
;   fmv.w.x fa0, a4
;   ret

function %bitcast_f32_to_i32(f32) -> i32 {
block0(v0: f32):
  v1 = bitcast.i32 v0
  return v1
}

; VCode:
; block0:
;   fmv.x.w a0,fa0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmv.x.w a0, fa0
;   ret

function %bitcast_i32_to_f32(i32) -> f32 {
block0(v0: i32):
  v1 = bitcast.f32 v0
  return v1
}

; VCode:
; block0:
;   fmv.w.x fa0,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmv.w.x fa0, a0
;   ret

function %bitcast_f64_to_i64(f64) -> i64 {
block0(v0: f64):
  v1 = bitcast.i64 v0
  return v1
}

; VCode:
; block0:
;   fmv.x.d a0,fa0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmv.x.d a0, fa0
;   ret

function %bitcast_i64_to_f64(i64) -> f64 {
block0(v0: i64):
  v1 = bitcast.f64 v0
  return v1
}

; VCode:
; block0:
;   fmv.d.x fa0,a0
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   fmv.d.x fa0, a0
;   ret

function %bitcast_f128_to_i128(f128) -> i128 {
block0(v0: f128):
  v1 = bitcast.i128 v0
  return v1
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

function %bitcast_i128_to_f128(i128) -> f128 {
block0(v0: i128):
  v1 = bitcast.f128 v0
  return v1
}

; VCode:
; block0:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   ret

