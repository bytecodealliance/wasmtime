test compile precise-output
set enable_multi_ret_implicit_sret
set unwind_info=false
target riscv64 has_v

function %simd_fcmp_ult_f32(f32x4, f32x4) -> i32x4 {
block0(v0: f32x4, v1: f32x4):
    v2 = fcmp ult v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfle.vv v14,v11,v9 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmnot.m v0,v14 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v10,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v12,v10,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x97, 0xb4, 0x66
;   .byte 0x57, 0x20, 0xe7, 0x76
;   .byte 0x57, 0x35, 0x00, 0x5e
;   .byte 0x57, 0xb6, 0xaf, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x06, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_fcmp_splat_rhs_ult_f32(f32x4, f32) -> i32x4 {
block0(v0: f32x4, v1: f32):
    v2 = splat.f32x4 v1
    v3 = fcmp ult v0, v2
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfge.vf v13,v9,fa0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmnot.m v0,v13 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v9,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x56, 0x95, 0x7e
;   .byte 0x57, 0xa0, 0xd6, 0x76
;   .byte 0xd7, 0x34, 0x00, 0x5e
;   .byte 0xd7, 0xb5, 0x9f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_fcmp_splat_lhs_ult_f32(f32x4, f32) -> i32x4 {
block0(v0: f32x4, v1: f32):
    v2 = splat.f32x4 v1
    v3 = fcmp ult v2, v0
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfle.vf v13,v9,fa0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmnot.m v0,v13 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.v.i v9,0 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x56, 0x95, 0x66
;   .byte 0x57, 0xa0, 0xd6, 0x76
;   .byte 0xd7, 0x34, 0x00, 0x5e
;   .byte 0xd7, 0xb5, 0x9f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_fcmp_ult_f64(f64x2, f64x2) -> i64x2 {
block0(v0: f64x2, v1: f64x2):
    v2 = fcmp ult v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfle.vv v14,v11,v9 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmnot.m v0,v14 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v10,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v12,v10,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x97, 0xb4, 0x66
;   .byte 0x57, 0x20, 0xe7, 0x76
;   .byte 0x57, 0x35, 0x00, 0x5e
;   .byte 0x57, 0xb6, 0xaf, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x06, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_fcmp_splat_rhs_ult_f64(f64x2, f64) -> i64x2 {
block0(v0: f64x2, v1: f64):
    v2 = splat.f64x2 v1
    v3 = fcmp ult v0, v2
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfge.vf v13,v9,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmnot.m v0,v13 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v9,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x56, 0x95, 0x7e
;   .byte 0x57, 0xa0, 0xd6, 0x76
;   .byte 0xd7, 0x34, 0x00, 0x5e
;   .byte 0xd7, 0xb5, 0x9f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %simd_fcmp_splat_lhs_ult_f64(f64x2, f64) -> i64x2 {
block0(v0: f64x2, v1: f64):
    v2 = splat.f64x2 v1
    v3 = fcmp ult v2, v0
    return v3
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmfle.vf v13,v9,fa0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmnot.m v0,v13 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.v.i v9,0 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v11,v9,-1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0xd7, 0x56, 0x95, 0x66
;   .byte 0x57, 0xa0, 0xd6, 0x76
;   .byte 0xd7, 0x34, 0x00, 0x5e
;   .byte 0xd7, 0xb5, 0x9f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

