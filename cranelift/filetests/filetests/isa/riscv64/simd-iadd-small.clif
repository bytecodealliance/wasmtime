test compile precise-output
set enable_multi_ret_implicit_sret
set unwind_info=false
target riscv64 has_v


function %iadd_i8x8(i8x8, i8x8) -> i8x8 {
block0(v0:i8x8, v1:i8x8):
    v2 = iadd v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-8(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vadd.vv v14,v9,v11 #avl=8, #vtype=(e8, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=8, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x04, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x18
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x87, 0x95, 0x02
;   .byte 0x27, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_i16x4(i16x4, i16x4) -> i16x4 {
block0(v0:i16x4, v1:i16x4):
    v2 = iadd v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-8(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vadd.vv v14,v9,v11 #avl=4, #vtype=(e16, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=8, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x04, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x18
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x82, 0xcc
;   .byte 0x57, 0x87, 0x95, 0x02
;   .byte 0x57, 0x70, 0x04, 0xcc
;   .byte 0x27, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %iadd_i32x2(i32x2, i32x2) -> i32x2 {
block0(v0:i32x2, v1:i32x2):
    v2 = iadd v0, v1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-8(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vadd.vv v14,v9,v11 #avl=2, #vtype=(e32, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=8, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x04, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x18
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x01, 0xcd
;   .byte 0x57, 0x87, 0x95, 0x02
;   .byte 0x57, 0x70, 0x04, 0xcc
;   .byte 0x27, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

