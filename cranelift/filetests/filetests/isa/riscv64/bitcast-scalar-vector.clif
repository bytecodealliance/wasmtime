test compile precise-output
set unwind_info=false
target riscv64 has_v

function %bitcast_vec_to_i128(i64x2) -> i128 {
block0(v0: i64x2):
    v1 = bitcast.i128 little v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.x.s a0,v8 #avl=2, #vtype=(e64, m1, ta, ma)
;   vslidedown.vi v12,v8,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.x.s a1,v12 #avl=2, #vtype=(e64, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x25, 0x80, 0x42
;   .byte 0x57, 0xb6, 0x80, 0x3e
;   .byte 0xd7, 0x25, 0xc0, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %bitcast_i128_to_vec(i128) -> i64x2 {
block0(v0: i128):
    v1 = bitcast.i64x2 little v0
    return v1
}

; VCode:
; block0:
;   vmv.s.x v12,a2 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv1r.v v14,v12
;   vslide1up.vx v14,v12,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x66, 0x06, 0x42
;   .byte 0x57, 0x37, 0xc0, 0x9e
;   .byte 0x57, 0xe7, 0xc5, 0x3a
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x07, 0x05, 0x02
;   ret

function %bitcast_vec_to_i64(i32x2) -> i64 {
block0(v0: i32x2):
    v1 = bitcast.i64 little v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vmv.x.s a0,v8 #avl=1, #vtype=(e64, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x04, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0xf0, 0x80, 0xcd
;   .byte 0x57, 0x25, 0x80, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %bitcast_i64_to_vec(i64) -> i32x2 {
block0(v0: i64):
    v1 = bitcast.i32x2 little v0
    return v1
}

; VCode:
; block0:
;   vmv.s.x v11,a1 #avl=1, #vtype=(e64, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=8, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0xf0, 0x80, 0xcd
;   .byte 0xd7, 0xe5, 0x05, 0x42
;   .byte 0x57, 0x70, 0x04, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ret

function %bitcast_vec_to_f64(i32x2) -> f64 {
block0(v0: i32x2):
    v1 = bitcast.f64 little v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=8, #vtype=(e8, m1, ta, ma)
;   vfmv.f.s fa0,v8 #avl=1, #vtype=(e64, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x04, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0xf0, 0x80, 0xcd
;   .byte 0x57, 0x15, 0x80, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %bitcast_f64_to_vec(f64) -> i32x2 {
block0(v0: f64):
    v1 = bitcast.i32x2 little v0
    return v1
}

; VCode:
; block0:
;   vfmv.s.f v11,fa0 #avl=1, #vtype=(e64, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=8, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0xf0, 0x80, 0xcd
;   .byte 0xd7, 0x55, 0x05, 0x42
;   .byte 0x57, 0x70, 0x04, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ret

function %bitcast_i16x2_to_f32(i16x2) -> f32 {
block0(v0: i16x2):
    v1 = bitcast.f32 little v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=4, #vtype=(e8, m1, ta, ma)
;   vfmv.f.s fa0,v8 #avl=1, #vtype=(e32, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x02, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0xf0, 0x00, 0xcd
;   .byte 0x57, 0x15, 0x80, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %bitcast_f32_to_i16x2(f32) -> i16x2 {
block0(v0: f32):
    v1 = bitcast.i16x2 little v0
    return v1
}

; VCode:
; block0:
;   vfmv.s.f v11,fa0 #avl=1, #vtype=(e32, m1, ta, ma)
;   vse8.v v11,0(a0) #avl=4, #vtype=(e8, m1, ta, ma)
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   .byte 0x57, 0xf0, 0x00, 0xcd
;   .byte 0xd7, 0x55, 0x05, 0x42
;   .byte 0x57, 0x70, 0x02, 0xcc
;   .byte 0xa7, 0x05, 0x05, 0x02
;   ret

