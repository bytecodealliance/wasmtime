test compile precise-output
set enable_multi_ret_implicit_sret
set unwind_info=false
target riscv64 has_v

function %iadd_pairwise_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = iadd_pairwise v0, v1
  return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld a1,[const(0)]
;   vmv.s.x v8,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vcompress.vm v12,v9,v8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vcompress.vm v13,v11,v8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vslideup.vi v12,v13,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   ld a4,[const(1)]
;   vmv.s.x v10,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vcompress.vm v14,v9,v10 #avl=16, #vtype=(e8, m1, ta, ma)
;   vcompress.vm v15,v11,v10 #avl=16, #vtype=(e8, m1, ta, ma)
;   vslideup.vi v14,v15,8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vadd.vv v10,v12,v14 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   auipc a1, 0
;   ld a1, 0x5c(a1)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xe4, 0x05, 0x42
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0x26, 0x94, 0x5e
;   .byte 0xd7, 0x26, 0xb4, 0x5e
;   .byte 0x57, 0x36, 0xd4, 0x3a
;   auipc a4, 0
;   ld a4, 0x44(a4)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x65, 0x07, 0x42
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0x27, 0x95, 0x5e
;   .byte 0xd7, 0x27, 0xb5, 0x5e
;   .byte 0x57, 0x37, 0xf4, 0x3a
;   .byte 0x57, 0x05, 0xc7, 0x02
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0xaa, 0xaa, 0xaa, 0xaa
;   .byte 0xaa, 0xaa, 0xaa, 0xaa

function %iadd_pairwise_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = iadd_pairwise v0, v1
  return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld a1,[const(0)]
;   vmv.s.x v8,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vcompress.vm v12,v9,v8 #avl=8, #vtype=(e16, m1, ta, ma)
;   vcompress.vm v13,v11,v8 #avl=8, #vtype=(e16, m1, ta, ma)
;   vslideup.vi v12,v13,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   ld a4,[const(1)]
;   vmv.s.x v10,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vcompress.vm v14,v9,v10 #avl=8, #vtype=(e16, m1, ta, ma)
;   vcompress.vm v15,v11,v10 #avl=8, #vtype=(e16, m1, ta, ma)
;   vslideup.vi v14,v15,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vadd.vv v10,v12,v14 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   auipc a1, 0
;   ld a1, 0x5c(a1)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xe4, 0x05, 0x42
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x26, 0x94, 0x5e
;   .byte 0xd7, 0x26, 0xb4, 0x5e
;   .byte 0x57, 0x36, 0xd2, 0x3a
;   auipc a4, 0
;   ld a4, 0x44(a4)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x65, 0x07, 0x42
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x27, 0x95, 0x5e
;   .byte 0xd7, 0x27, 0xb5, 0x5e
;   .byte 0x57, 0x37, 0xf2, 0x3a
;   .byte 0x57, 0x05, 0xc7, 0x02
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0xaa, 0xaa, 0xaa, 0xaa
;   .byte 0xaa, 0xaa, 0xaa, 0xaa

function %iadd_pairwise_i32x4(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = iadd_pairwise v0, v1
  return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld a1,[const(0)]
;   vmv.s.x v8,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vcompress.vm v12,v9,v8 #avl=4, #vtype=(e32, m1, ta, ma)
;   vcompress.vm v13,v11,v8 #avl=4, #vtype=(e32, m1, ta, ma)
;   vslideup.vi v12,v13,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   ld a4,[const(1)]
;   vmv.s.x v10,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vcompress.vm v14,v9,v10 #avl=4, #vtype=(e32, m1, ta, ma)
;   vcompress.vm v15,v11,v10 #avl=4, #vtype=(e32, m1, ta, ma)
;   vslideup.vi v14,v15,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vadd.vv v10,v12,v14 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   auipc a1, 0
;   ld a1, 0x5c(a1)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xe4, 0x05, 0x42
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x26, 0x94, 0x5e
;   .byte 0xd7, 0x26, 0xb4, 0x5e
;   .byte 0x57, 0x36, 0xd1, 0x3a
;   auipc a4, 0
;   ld a4, 0x44(a4)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x65, 0x07, 0x42
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0x27, 0x95, 0x5e
;   .byte 0xd7, 0x27, 0xb5, 0x5e
;   .byte 0x57, 0x37, 0xf1, 0x3a
;   .byte 0x57, 0x05, 0xc7, 0x02
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0xaa, 0xaa, 0xaa, 0xaa
;   .byte 0xaa, 0xaa, 0xaa, 0xaa

