test compile precise-output
set unwind_info=false
target riscv64 has_v

function %insertlane_15(i8x16, i8) -> i8x16 {
block0(v0: i8x16, v1: i8):
    v2 = insertlane v0, v1, 15
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   lui a5,8
;   vmv.s.x v0,a5 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v10,v9,a1,v0.t #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   lui a5, 8
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xe0, 0x07, 0x42
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0xc5, 0x95, 0x5c
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_5(i16x8, i16) -> i16x8 {
block0(v0: i16x8, v1: i16):
    v2 = insertlane v0, v1, 5
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a5,32
;   vmv.s.x v0,a5 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v10,v9,a1,v0.t #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi a5, zero, 0x20
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xe0, 0x07, 0x42
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0xc5, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_2(i32x4, i32) -> i32x4 {
block0(v0: i32x4, v1: i32):
    v2 = insertlane v0, v1, 2
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v15,v9,a1,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x30, 0x02, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0xc7, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_0(i64x2, i64) -> i64x2 {
block0(v0: i64x2, v1: i64):
    v2 = insertlane v0, v1, 0
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vxm v15,v9,a1,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0xd7, 0xc7, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_0_in_f64x2(f64x2, f64) -> f64x2 {
block0(v0: f64x2, v1: f64):
    v2 = insertlane v0, v1, 0
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vfmerge.vfm v15,v9,fa0,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0xd7, 0x57, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_1_in_f64x2(f64x2, f64) -> f64x2 {
block0(v0: f64x2, v1: f64):
    v2 = insertlane v0, v1, 1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,2 #avl=2, #vtype=(e64, m1, ta, ma)
;   vfmerge.vfm v15,v9,fa0,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x30, 0x01, 0x5e
;   .byte 0xd7, 0x57, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_3_in_f32x4(f32x4, f32) -> f32x4 {
block0(v0: f32x4, v1: f32):
    v2 = insertlane v0, v1, 0
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vfmerge.vfm v15,v9,fa0,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x57, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_1_in_f32x4(f32x4, f32) -> f32x4 {
block0(v0: f32x4, v1: f32):
    v2 = insertlane v0, v1, 1
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,2 #avl=2, #vtype=(e64, m1, ta, ma)
;   vfmerge.vfm v15,v9,fa0,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v15,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x30, 0x01, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0xd7, 0x57, 0x95, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xa7, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_const_15(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = iconst.i8 10
    v2 = insertlane v0, v1, 15
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   lui a4,8
;   vmv.s.x v0,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v8,v9,10,v0.t #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   lui a4, 8
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x60, 0x07, 0x42
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0x34, 0x95, 0x5c
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_const_5(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = iconst.i16 -2
    v2 = insertlane v0, v1, 5
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a4,32
;   vmv.s.x v0,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v8,v9,-2,v0.t #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi a4, zero, 0x20
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x60, 0x07, 0x42
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0x34, 0x9f, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_const_2(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = iconst.i32 15
    v2 = insertlane v0, v1, 2
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v14,v9,15,v0.t #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0x30, 0x02, 0x5e
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0xb7, 0x97, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %insertlane_const_0(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i64 -9
    v2 = insertlane v0, v1, 0
    return v2
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v0,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmerge.vim v14,v9,-9,v0.t #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v14,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb0, 0x00, 0x5e
;   .byte 0x57, 0xb7, 0x9b, 0x5c
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x07, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

