test compile precise-output
target riscv64

;; Test the `tail` calling convention with non-tail calls and stack arguments.

function %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v25
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   ld a0,-8(incoming_arg)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   addi sp,sp,144
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   ld a0, 0x98(sp)
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   addi sp, sp, 0x90
;   ret

function %tail_caller_stack_args() -> i64 tail {
    fn0 = %tail_callee_stack_args(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    v26 = call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
    return v26
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-256
;   sd s1,248(sp)
;   sd s2,240(sp)
;   sd s3,232(sp)
;   sd s4,224(sp)
;   sd s5,216(sp)
;   sd s6,208(sp)
;   sd s7,200(sp)
;   sd s8,192(sp)
;   sd s9,184(sp)
;   sd s10,176(sp)
;   sd s11,168(sp)
; block0:
;   li a1,10
;   sd a1,8(slot)
;   li a2,15
;   sd a2,0(slot)
;   li a2,20
;   li a3,25
;   li a4,30
;   li a5,35
;   li a6,40
;   li a7,45
;   li s3,50
;   li s4,55
;   li s5,60
;   li s6,65
;   li s7,70
;   li s8,75
;   li s9,80
;   li s10,85
;   li s11,90
;   li t0,95
;   li t1,100
;   li t2,105
;   li t3,110
;   li t4,115
;   li s1,120
;   li s2,125
;   li a0,130
;   li a1,135
;   sd s3,0(sp)
;   sd s4,8(sp)
;   sd s5,16(sp)
;   sd s6,24(sp)
;   sd s7,32(sp)
;   sd s8,40(sp)
;   sd s9,48(sp)
;   sd s10,56(sp)
;   sd s11,64(sp)
;   sd t0,72(sp)
;   sd t1,80(sp)
;   sd t2,88(sp)
;   sd t3,96(sp)
;   sd t4,104(sp)
;   sd s1,112(sp)
;   sd s2,120(sp)
;   sd a0,128(sp)
;   sd a1,136(sp)
;   load_sym s3,%tail_callee_stack_args+0
;   ld a0,8(slot)
;   ld a1,0(slot)
;   callind s3
;   ld s1,248(sp)
;   ld s2,240(sp)
;   ld s3,232(sp)
;   ld s4,224(sp)
;   ld s5,216(sp)
;   ld s6,208(sp)
;   ld s7,200(sp)
;   ld s8,192(sp)
;   ld s9,184(sp)
;   ld s10,176(sp)
;   ld s11,168(sp)
;   addi sp,sp,256
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x100
;   sd s1, 0xf8(sp)
;   sd s2, 0xf0(sp)
;   sd s3, 0xe8(sp)
;   sd s4, 0xe0(sp)
;   sd s5, 0xd8(sp)
;   sd s6, 0xd0(sp)
;   sd s7, 0xc8(sp)
;   sd s8, 0xc0(sp)
;   sd s9, 0xb8(sp)
;   sd s10, 0xb0(sp)
;   sd s11, 0xa8(sp)
; block1: ; offset 0x40
;   addi a1, zero, 0xa
;   sd a1, 0x98(sp)
;   addi a2, zero, 0xf
;   sd a2, 0x90(sp)
;   addi a2, zero, 0x14
;   addi a3, zero, 0x19
;   addi a4, zero, 0x1e
;   addi a5, zero, 0x23
;   addi a6, zero, 0x28
;   addi a7, zero, 0x2d
;   addi s3, zero, 0x32
;   addi s4, zero, 0x37
;   addi s5, zero, 0x3c
;   addi s6, zero, 0x41
;   addi s7, zero, 0x46
;   addi s8, zero, 0x4b
;   addi s9, zero, 0x50
;   addi s10, zero, 0x55
;   addi s11, zero, 0x5a
;   addi t0, zero, 0x5f
;   addi t1, zero, 0x64
;   addi t2, zero, 0x69
;   addi t3, zero, 0x6e
;   addi t4, zero, 0x73
;   addi s1, zero, 0x78
;   addi s2, zero, 0x7d
;   addi a0, zero, 0x82
;   addi a1, zero, 0x87
;   sd s3, 0(sp)
;   sd s4, 8(sp)
;   sd s5, 0x10(sp)
;   sd s6, 0x18(sp)
;   sd s7, 0x20(sp)
;   sd s8, 0x28(sp)
;   sd s9, 0x30(sp)
;   sd s10, 0x38(sp)
;   sd s11, 0x40(sp)
;   sd t0, 0x48(sp)
;   sd t1, 0x50(sp)
;   sd t2, 0x58(sp)
;   sd t3, 0x60(sp)
;   sd t4, 0x68(sp)
;   sd s1, 0x70(sp)
;   sd s2, 0x78(sp)
;   sd a0, 0x80(sp)
;   sd a1, 0x88(sp)
;   auipc s3, 0
;   ld s3, 0xc(s3)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_args 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld a0, 0x98(sp)
;   ld a1, 0x90(sp)
;   jalr s3
;   addi sp, sp, -0x90
;   ld s1, 0xf8(sp)
;   ld s2, 0xf0(sp)
;   ld s3, 0xe8(sp)
;   ld s4, 0xe0(sp)
;   ld s5, 0xd8(sp)
;   ld s6, 0xd0(sp)
;   ld s7, 0xc8(sp)
;   ld s8, 0xc0(sp)
;   ld s9, 0xb8(sp)
;   ld s10, 0xb0(sp)
;   ld s11, 0xa8(sp)
;   addi sp, sp, 0x100
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

;; Test the `tail` calling convention with non-tail calls and stack returns.

function %tail_callee_stack_rets() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail {
block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    return v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-128
;   sd s1,120(sp)
;   sd s2,112(sp)
;   sd s3,104(sp)
;   sd s4,96(sp)
;   sd s5,88(sp)
;   sd s6,80(sp)
;   sd s7,72(sp)
;   sd s8,64(sp)
;   sd s9,56(sp)
;   sd s10,48(sp)
;   sd s11,40(sp)
; block0:
;   li a1,10
;   sd a1,16(slot)
;   li a1,15
;   sd a1,8(slot)
;   li a4,20
;   li a5,25
;   li a2,30
;   li s3,35
;   li s4,40
;   li s5,45
;   li s6,50
;   li s7,55
;   li s8,60
;   li s9,65
;   li s10,70
;   li s11,75
;   li t0,80
;   li t1,85
;   li t2,90
;   li a6,95
;   li a7,100
;   li t3,105
;   li t4,110
;   li s1,115
;   li s2,120
;   li a3,125
;   sd a3,0(slot)
;   li a1,130
;   li a3,135
;   sd a4,0(a0)
;   sd a5,8(a0)
;   sd a2,16(a0)
;   sd s3,24(a0)
;   sd s4,32(a0)
;   sd s5,40(a0)
;   sd s6,48(a0)
;   sd s7,56(a0)
;   sd s8,64(a0)
;   sd s9,72(a0)
;   sd s10,80(a0)
;   sd s11,88(a0)
;   sd t0,96(a0)
;   sd t1,104(a0)
;   sd t2,112(a0)
;   sd a6,120(a0)
;   sd a7,128(a0)
;   sd t3,136(a0)
;   sd t4,144(a0)
;   sd s1,152(a0)
;   sd s2,160(a0)
;   ld a4,0(slot)
;   sd a4,168(a0)
;   sd a1,176(a0)
;   sd a3,184(a0)
;   ld a0,16(slot)
;   ld a1,8(slot)
;   ld s1,120(sp)
;   ld s2,112(sp)
;   ld s3,104(sp)
;   ld s4,96(sp)
;   ld s5,88(sp)
;   ld s6,80(sp)
;   ld s7,72(sp)
;   ld s8,64(sp)
;   ld s9,56(sp)
;   ld s10,48(sp)
;   ld s11,40(sp)
;   addi sp,sp,128
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x80
;   sd s1, 0x78(sp)
;   sd s2, 0x70(sp)
;   sd s3, 0x68(sp)
;   sd s4, 0x60(sp)
;   sd s5, 0x58(sp)
;   sd s6, 0x50(sp)
;   sd s7, 0x48(sp)
;   sd s8, 0x40(sp)
;   sd s9, 0x38(sp)
;   sd s10, 0x30(sp)
;   sd s11, 0x28(sp)
; block1: ; offset 0x40
;   addi a1, zero, 0xa
;   sd a1, 0x10(sp)
;   addi a1, zero, 0xf
;   sd a1, 8(sp)
;   addi a4, zero, 0x14
;   addi a5, zero, 0x19
;   addi a2, zero, 0x1e
;   addi s3, zero, 0x23
;   addi s4, zero, 0x28
;   addi s5, zero, 0x2d
;   addi s6, zero, 0x32
;   addi s7, zero, 0x37
;   addi s8, zero, 0x3c
;   addi s9, zero, 0x41
;   addi s10, zero, 0x46
;   addi s11, zero, 0x4b
;   addi t0, zero, 0x50
;   addi t1, zero, 0x55
;   addi t2, zero, 0x5a
;   addi a6, zero, 0x5f
;   addi a7, zero, 0x64
;   addi t3, zero, 0x69
;   addi t4, zero, 0x6e
;   addi s1, zero, 0x73
;   addi s2, zero, 0x78
;   addi a3, zero, 0x7d
;   sd a3, 0(sp)
;   addi a1, zero, 0x82
;   addi a3, zero, 0x87
;   sd a4, 0(a0)
;   sd a5, 8(a0)
;   sd a2, 0x10(a0)
;   sd s3, 0x18(a0)
;   sd s4, 0x20(a0)
;   sd s5, 0x28(a0)
;   sd s6, 0x30(a0)
;   sd s7, 0x38(a0)
;   sd s8, 0x40(a0)
;   sd s9, 0x48(a0)
;   sd s10, 0x50(a0)
;   sd s11, 0x58(a0)
;   sd t0, 0x60(a0)
;   sd t1, 0x68(a0)
;   sd t2, 0x70(a0)
;   sd a6, 0x78(a0)
;   sd a7, 0x80(a0)
;   sd t3, 0x88(a0)
;   sd t4, 0x90(a0)
;   sd s1, 0x98(a0)
;   sd s2, 0xa0(a0)
;   ld a4, 0(sp)
;   sd a4, 0xa8(a0)
;   sd a1, 0xb0(a0)
;   sd a3, 0xb8(a0)
;   ld a0, 0x10(sp)
;   ld a1, 8(sp)
;   ld s1, 0x78(sp)
;   ld s2, 0x70(sp)
;   ld s3, 0x68(sp)
;   ld s4, 0x60(sp)
;   ld s5, 0x58(sp)
;   ld s6, 0x50(sp)
;   ld s7, 0x48(sp)
;   ld s8, 0x40(sp)
;   ld s9, 0x38(sp)
;   ld s10, 0x30(sp)
;   ld s11, 0x28(sp)
;   addi sp, sp, 0x80
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %tail_caller_stack_rets() -> i64 tail {
    fn0 = %tail_callee_stack_rets() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail

block0:
    v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25 = call fn0()
    return v25
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-192
; block0:
;   load_addr a0,0(sp)
;   load_sym a4,%tail_callee_stack_rets+0
;   callind a4
;   ld a5,0(sp)
;   ld a1,8(sp)
;   ld a3,16(sp)
;   ld a5,24(sp)
;   ld a1,32(sp)
;   ld a3,40(sp)
;   ld a5,48(sp)
;   ld a1,56(sp)
;   ld a3,64(sp)
;   ld a5,72(sp)
;   ld a1,80(sp)
;   ld a3,88(sp)
;   ld a5,96(sp)
;   ld a1,104(sp)
;   ld a3,112(sp)
;   ld a5,120(sp)
;   ld a1,128(sp)
;   ld a3,136(sp)
;   ld a5,144(sp)
;   ld a1,152(sp)
;   ld a3,160(sp)
;   ld a5,168(sp)
;   ld a1,176(sp)
;   ld a0,184(sp)
;   addi sp,sp,192
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0xc0
; block1: ; offset 0x14
;   mv a0, sp
;   auipc a4, 0
;   ld a4, 0xc(a4)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_rets 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   jalr a4
;   ld a5, 0(sp)
;   ld a1, 8(sp)
;   ld a3, 0x10(sp)
;   ld a5, 0x18(sp)
;   ld a1, 0x20(sp)
;   ld a3, 0x28(sp)
;   ld a5, 0x30(sp)
;   ld a1, 0x38(sp)
;   ld a3, 0x40(sp)
;   ld a5, 0x48(sp)
;   ld a1, 0x50(sp)
;   ld a3, 0x58(sp)
;   ld a5, 0x60(sp)
;   ld a1, 0x68(sp)
;   ld a3, 0x70(sp)
;   ld a5, 0x78(sp)
;   ld a1, 0x80(sp)
;   ld a3, 0x88(sp)
;   ld a5, 0x90(sp)
;   ld a1, 0x98(sp)
;   ld a3, 0xa0(sp)
;   ld a5, 0xa8(sp)
;   ld a1, 0xb0(sp)
;   ld a0, 0xb8(sp)
;   addi sp, sp, 0xc0
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

;; Test the `tail` calling convention with non-tail calls and both stack
;; arguments and stack returns.

function %tail_callee_stack_args_and_rets(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64, v6: i64, v7: i64, v8: i64, v9: i64, v10: i64, v11: i64, v12: i64, v13: i64, v14: i64, v15: i64, v16: i64, v17: i64, v18: i64, v19: i64, v20: i64, v21: i64, v22: i64, v23: i64, v24: i64, v25: i64):
    return v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-128
;   sd s1,120(sp)
;   sd s2,112(sp)
;   sd s3,104(sp)
;   sd s4,96(sp)
;   sd s5,88(sp)
;   sd s6,80(sp)
;   sd s7,72(sp)
;   sd s8,64(sp)
;   sd s9,56(sp)
;   sd s10,48(sp)
;   sd s11,40(sp)
; block0:
;   sd a1,0(slot)
;   sd a2,8(slot)
;   sd a7,16(slot)
;   ld s3,-160(incoming_arg)
;   ld s5,-152(incoming_arg)
;   ld s7,-144(incoming_arg)
;   ld s9,-136(incoming_arg)
;   ld s11,-128(incoming_arg)
;   ld t1,-120(incoming_arg)
;   ld t3,-112(incoming_arg)
;   ld a7,-104(incoming_arg)
;   ld t4,-96(incoming_arg)
;   ld s2,-88(incoming_arg)
;   ld s4,-80(incoming_arg)
;   ld s6,-72(incoming_arg)
;   ld s8,-64(incoming_arg)
;   ld s10,-56(incoming_arg)
;   ld t0,-48(incoming_arg)
;   ld t2,-40(incoming_arg)
;   ld s1,-32(incoming_arg)
;   ld a1,-24(incoming_arg)
;   ld a2,-16(incoming_arg)
;   sd a3,0(a0)
;   sd a4,8(a0)
;   sd a5,16(a0)
;   sd a6,24(a0)
;   ld a5,16(slot)
;   sd a5,32(a0)
;   sd s3,40(a0)
;   sd s5,48(a0)
;   sd s7,56(a0)
;   sd s9,64(a0)
;   sd s11,72(a0)
;   sd t1,80(a0)
;   sd t3,88(a0)
;   sd a7,96(a0)
;   sd t4,104(a0)
;   sd s2,112(a0)
;   sd s4,120(a0)
;   sd s6,128(a0)
;   sd s8,136(a0)
;   sd s10,144(a0)
;   sd t0,152(a0)
;   sd t2,160(a0)
;   sd s1,168(a0)
;   sd a1,176(a0)
;   sd a2,184(a0)
;   ld a0,0(slot)
;   ld a1,8(slot)
;   ld s1,120(sp)
;   ld s2,112(sp)
;   ld s3,104(sp)
;   ld s4,96(sp)
;   ld s5,88(sp)
;   ld s6,80(sp)
;   ld s7,72(sp)
;   ld s8,64(sp)
;   ld s9,56(sp)
;   ld s10,48(sp)
;   ld s11,40(sp)
;   addi sp,sp,128
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   addi sp,sp,160
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x80
;   sd s1, 0x78(sp)
;   sd s2, 0x70(sp)
;   sd s3, 0x68(sp)
;   sd s4, 0x60(sp)
;   sd s5, 0x58(sp)
;   sd s6, 0x50(sp)
;   sd s7, 0x48(sp)
;   sd s8, 0x40(sp)
;   sd s9, 0x38(sp)
;   sd s10, 0x30(sp)
;   sd s11, 0x28(sp)
; block1: ; offset 0x40
;   sd a1, 0(sp)
;   sd a2, 8(sp)
;   sd a7, 0x10(sp)
;   ld s3, 0x90(sp)
;   ld s5, 0x98(sp)
;   ld s7, 0xa0(sp)
;   ld s9, 0xa8(sp)
;   ld s11, 0xb0(sp)
;   ld t1, 0xb8(sp)
;   ld t3, 0xc0(sp)
;   ld a7, 0xc8(sp)
;   ld t4, 0xd0(sp)
;   ld s2, 0xd8(sp)
;   ld s4, 0xe0(sp)
;   ld s6, 0xe8(sp)
;   ld s8, 0xf0(sp)
;   ld s10, 0xf8(sp)
;   ld t0, 0x100(sp)
;   ld t2, 0x108(sp)
;   ld s1, 0x110(sp)
;   ld a1, 0x118(sp)
;   ld a2, 0x120(sp)
;   sd a3, 0(a0)
;   sd a4, 8(a0)
;   sd a5, 0x10(a0)
;   sd a6, 0x18(a0)
;   ld a5, 0x10(sp)
;   sd a5, 0x20(a0)
;   sd s3, 0x28(a0)
;   sd s5, 0x30(a0)
;   sd s7, 0x38(a0)
;   sd s9, 0x40(a0)
;   sd s11, 0x48(a0)
;   sd t1, 0x50(a0)
;   sd t3, 0x58(a0)
;   sd a7, 0x60(a0)
;   sd t4, 0x68(a0)
;   sd s2, 0x70(a0)
;   sd s4, 0x78(a0)
;   sd s6, 0x80(a0)
;   sd s8, 0x88(a0)
;   sd s10, 0x90(a0)
;   sd t0, 0x98(a0)
;   sd t2, 0xa0(a0)
;   sd s1, 0xa8(a0)
;   sd a1, 0xb0(a0)
;   sd a2, 0xb8(a0)
;   ld a0, 0(sp)
;   ld a1, 8(sp)
;   ld s1, 0x78(sp)
;   ld s2, 0x70(sp)
;   ld s3, 0x68(sp)
;   ld s4, 0x60(sp)
;   ld s5, 0x58(sp)
;   ld s6, 0x50(sp)
;   ld s7, 0x48(sp)
;   ld s8, 0x40(sp)
;   ld s9, 0x38(sp)
;   ld s10, 0x30(sp)
;   ld s11, 0x28(sp)
;   addi sp, sp, 0x80
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   addi sp, sp, 0xa0
;   ret

function %tail_caller_stack_args_and_rets() -> i64 tail {
    fn0 = %tail_callee_stack_args_and_rets(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64) -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 tail

block0:
    v0 = iconst.i64 10
    v1 = iconst.i64 15
    v2 = iconst.i64 20
    v3 = iconst.i64 25
    v4 = iconst.i64 30
    v5 = iconst.i64 35
    v6 = iconst.i64 40
    v7 = iconst.i64 45
    v8 = iconst.i64 50
    v9 = iconst.i64 55
    v10 = iconst.i64 60
    v11 = iconst.i64 65
    v12 = iconst.i64 70
    v13 = iconst.i64 75
    v14 = iconst.i64 80
    v15 = iconst.i64 85
    v16 = iconst.i64 90
    v17 = iconst.i64 95
    v18 = iconst.i64 100
    v19 = iconst.i64 105
    v20 = iconst.i64 110
    v21 = iconst.i64 115
    v22 = iconst.i64 120
    v23 = iconst.i64 125
    v24 = iconst.i64 130
    v25 = iconst.i64 135
    v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51 = call fn0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25)
    return v51
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
;   addi sp,sp,-464
;   sd s1,456(sp)
;   sd s2,448(sp)
;   sd s3,440(sp)
;   sd s4,432(sp)
;   sd s5,424(sp)
;   sd s6,416(sp)
;   sd s7,408(sp)
;   sd s8,400(sp)
;   sd s9,392(sp)
;   sd s10,384(sp)
;   sd s11,376(sp)
; block0:
;   li a2,10
;   sd a2,8(slot)
;   li a3,15
;   sd a3,0(slot)
;   li a3,20
;   li a4,25
;   li a5,30
;   li a6,35
;   li a7,40
;   li a0,45
;   li s11,50
;   li t0,55
;   li t1,60
;   li t2,65
;   li t3,70
;   li t4,75
;   li s1,80
;   li s2,85
;   li s3,90
;   li s4,95
;   li s5,100
;   li s6,105
;   li s7,110
;   li s8,115
;   li s9,120
;   li s10,125
;   li a1,130
;   li a2,135
;   sd a0,0(sp)
;   sd s11,8(sp)
;   sd t0,16(sp)
;   sd t1,24(sp)
;   sd t2,32(sp)
;   sd t3,40(sp)
;   sd t4,48(sp)
;   sd s1,56(sp)
;   sd s2,64(sp)
;   sd s3,72(sp)
;   sd s4,80(sp)
;   sd s5,88(sp)
;   sd s6,96(sp)
;   sd s7,104(sp)
;   sd s8,112(sp)
;   sd s9,120(sp)
;   sd s10,128(sp)
;   sd a1,136(sp)
;   sd a2,144(sp)
;   load_addr a0,160(sp)
;   load_sym t1,%tail_callee_stack_args_and_rets+0
;   ld a1,8(slot)
;   ld a2,0(slot)
;   callind t1
;   ld a2,160(sp)
;   ld a4,168(sp)
;   ld a0,176(sp)
;   ld a2,184(sp)
;   ld a4,192(sp)
;   ld a0,200(sp)
;   ld a2,208(sp)
;   ld a4,216(sp)
;   ld a0,224(sp)
;   ld a2,232(sp)
;   ld a4,240(sp)
;   ld a0,248(sp)
;   ld a2,256(sp)
;   ld a4,264(sp)
;   ld a0,272(sp)
;   ld a2,280(sp)
;   ld a4,288(sp)
;   ld a0,296(sp)
;   ld a2,304(sp)
;   ld a4,312(sp)
;   ld a0,320(sp)
;   ld a2,328(sp)
;   ld a4,336(sp)
;   ld a0,344(sp)
;   ld s1,456(sp)
;   ld s2,448(sp)
;   ld s3,440(sp)
;   ld s4,432(sp)
;   ld s5,424(sp)
;   ld s6,416(sp)
;   ld s7,408(sp)
;   ld s8,400(sp)
;   ld s9,392(sp)
;   ld s10,384(sp)
;   ld s11,376(sp)
;   addi sp,sp,464
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
;   addi sp, sp, -0x1d0
;   sd s1, 0x1c8(sp)
;   sd s2, 0x1c0(sp)
;   sd s3, 0x1b8(sp)
;   sd s4, 0x1b0(sp)
;   sd s5, 0x1a8(sp)
;   sd s6, 0x1a0(sp)
;   sd s7, 0x198(sp)
;   sd s8, 0x190(sp)
;   sd s9, 0x188(sp)
;   sd s10, 0x180(sp)
;   sd s11, 0x178(sp)
; block1: ; offset 0x40
;   addi a2, zero, 0xa
;   sd a2, 0x168(sp)
;   addi a3, zero, 0xf
;   sd a3, 0x160(sp)
;   addi a3, zero, 0x14
;   addi a4, zero, 0x19
;   addi a5, zero, 0x1e
;   addi a6, zero, 0x23
;   addi a7, zero, 0x28
;   addi a0, zero, 0x2d
;   addi s11, zero, 0x32
;   addi t0, zero, 0x37
;   addi t1, zero, 0x3c
;   addi t2, zero, 0x41
;   addi t3, zero, 0x46
;   addi t4, zero, 0x4b
;   addi s1, zero, 0x50
;   addi s2, zero, 0x55
;   addi s3, zero, 0x5a
;   addi s4, zero, 0x5f
;   addi s5, zero, 0x64
;   addi s6, zero, 0x69
;   addi s7, zero, 0x6e
;   addi s8, zero, 0x73
;   addi s9, zero, 0x78
;   addi s10, zero, 0x7d
;   addi a1, zero, 0x82
;   addi a2, zero, 0x87
;   sd a0, 0(sp)
;   sd s11, 8(sp)
;   sd t0, 0x10(sp)
;   sd t1, 0x18(sp)
;   sd t2, 0x20(sp)
;   sd t3, 0x28(sp)
;   sd t4, 0x30(sp)
;   sd s1, 0x38(sp)
;   sd s2, 0x40(sp)
;   sd s3, 0x48(sp)
;   sd s4, 0x50(sp)
;   sd s5, 0x58(sp)
;   sd s6, 0x60(sp)
;   sd s7, 0x68(sp)
;   sd s8, 0x70(sp)
;   sd s9, 0x78(sp)
;   sd s10, 0x80(sp)
;   sd a1, 0x88(sp)
;   sd a2, 0x90(sp)
;   addi a0, sp, 0xa0
;   auipc t1, 0
;   ld t1, 0xc(t1)
;   j 0xc
;   .byte 0x00, 0x00, 0x00, 0x00 ; reloc_external Abs8 %tail_callee_stack_args_and_rets 0
;   .byte 0x00, 0x00, 0x00, 0x00
;   ld a1, 0x168(sp)
;   ld a2, 0x160(sp)
;   jalr t1
;   addi sp, sp, -0xa0
;   ld a2, 0xa0(sp)
;   ld a4, 0xa8(sp)
;   ld a0, 0xb0(sp)
;   ld a2, 0xb8(sp)
;   ld a4, 0xc0(sp)
;   ld a0, 0xc8(sp)
;   ld a2, 0xd0(sp)
;   ld a4, 0xd8(sp)
;   ld a0, 0xe0(sp)
;   ld a2, 0xe8(sp)
;   ld a4, 0xf0(sp)
;   ld a0, 0xf8(sp)
;   ld a2, 0x100(sp)
;   ld a4, 0x108(sp)
;   ld a0, 0x110(sp)
;   ld a2, 0x118(sp)
;   ld a4, 0x120(sp)
;   ld a0, 0x128(sp)
;   ld a2, 0x130(sp)
;   ld a4, 0x138(sp)
;   ld a0, 0x140(sp)
;   ld a2, 0x148(sp)
;   ld a4, 0x150(sp)
;   ld a0, 0x158(sp)
;   ld s1, 0x1c8(sp)
;   ld s2, 0x1c0(sp)
;   ld s3, 0x1b8(sp)
;   ld s4, 0x1b0(sp)
;   ld s5, 0x1a8(sp)
;   ld s6, 0x1a0(sp)
;   ld s7, 0x198(sp)
;   ld s8, 0x190(sp)
;   ld s9, 0x188(sp)
;   ld s10, 0x180(sp)
;   ld s11, 0x178(sp)
;   addi sp, sp, 0x1d0
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

