test compile precise-output
set enable_multi_ret_implicit_sret
set unwind_info=false
target riscv64 has_v

;; Interleaves vector operations to ensure that `vsetivli` is emitted
function %iadd_multi(i8x16, i16x8) -> i8x16, i16x8  {
block0(v0: i8x16, v1: i16x8):
    v4 = iadd v0, v0
    v5 = iadd v1, v1
    v6 = iadd v5, v5
    return v4, v6
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vadd.vv v8,v9,v9 #avl=16, #vtype=(e8, m1, ta, ma)
;   vadd.vv v9,v11,v11 #avl=8, #vtype=(e16, m1, ta, ma)
;   vadd.vv v9,v9,v9 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v8,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v9,16(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x84, 0x94, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0xd7, 0x84, 0xb5, 0x02
;   .byte 0xd7, 0x84, 0x94, 0x02
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x04, 0x05, 0x02
;   addi t6, a0, 0x10
;   .byte 0xa7, 0x84, 0x0f, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

;; When the block changes, we need to reemit the vector state instruction
;; Even if vtype is the same.
function %(i8x16, i8x16) -> i8x16  {
block0(v0: i8x16, v1: i8x16):
    v2 = iadd v0, v1
    jump block1(v1, v2)

block1(v3: i8x16, v4: i8x16):
    v5 = iadd v3, v4
    jump block2(v4, v5)

block2(v6: i8x16, v7: i8x16):
    v8 = iadd v6, v7
    return v8
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-32(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vle8.v v11,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vadd.vv v8,v9,v11 #avl=16, #vtype=(e8, m1, ta, ma)
;   j label1
; block1:
;   vadd.vv v9,v11,v8 #avl=16, #vtype=(e8, m1, ta, ma)
;   j label2
; block2:
;   vadd.vv v10,v8,v9 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi t6, sp, 0x20
;   .byte 0x87, 0x85, 0x0f, 0x02
;   .byte 0x57, 0x84, 0x95, 0x02
; block2: ; offset 0x28
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0xd7, 0x04, 0xb4, 0x02
; block3: ; offset 0x30
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x57, 0x85, 0x84, 0x02
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

