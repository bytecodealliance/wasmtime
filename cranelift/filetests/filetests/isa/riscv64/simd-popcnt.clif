test compile precise-output
set enable_multi_ret_implicit_sret
set unwind_info=false
target riscv64 has_v

function %popcnt_i8x16(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = popcnt v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   li a4,85
;   vsrl.vi v14,v9,1 #avl=16, #vtype=(e8, m1, ta, ma)
;   vand.vx v8,v14,a4 #avl=16, #vtype=(e8, m1, ta, ma)
;   vsub.vv v10,v9,v8 #avl=16, #vtype=(e8, m1, ta, ma)
;   li a1,51
;   vsrl.vi v14,v10,2 #avl=16, #vtype=(e8, m1, ta, ma)
;   vand.vx v8,v14,a1 #avl=16, #vtype=(e8, m1, ta, ma)
;   vand.vx v10,v10,a1 #avl=16, #vtype=(e8, m1, ta, ma)
;   vadd.vv v12,v10,v8 #avl=16, #vtype=(e8, m1, ta, ma)
;   li a4,15
;   vsrl.vi v8,v12,4 #avl=16, #vtype=(e8, m1, ta, ma)
;   vadd.vv v10,v12,v8 #avl=16, #vtype=(e8, m1, ta, ma)
;   vand.vx v12,v10,a4 #avl=16, #vtype=(e8, m1, ta, ma)
;   li a1,1
;   vmul.vx v8,v12,a1 #avl=16, #vtype=(e8, m1, ta, ma)
;   li a4,0
;   vsrl.vx v12,v8,a4 #avl=16, #vtype=(e8, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   addi a4, zero, 0x55
;   .byte 0x57, 0xb7, 0x90, 0xa2
;   .byte 0x57, 0x44, 0xe7, 0x26
;   .byte 0x57, 0x05, 0x94, 0x0a
;   addi a1, zero, 0x33
;   .byte 0x57, 0x37, 0xa1, 0xa2
;   .byte 0x57, 0xc4, 0xe5, 0x26
;   .byte 0x57, 0xc5, 0xa5, 0x26
;   .byte 0x57, 0x06, 0xa4, 0x02
;   addi a4, zero, 0xf
;   .byte 0x57, 0x34, 0xc2, 0xa2
;   .byte 0x57, 0x05, 0xc4, 0x02
;   .byte 0x57, 0x46, 0xa7, 0x26
;   addi a1, zero, 1
;   .byte 0x57, 0xe4, 0xc5, 0x96
;   mv a4, zero
;   .byte 0x57, 0x46, 0x87, 0xa2
;   .byte 0x27, 0x06, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %popcnt_i16x8(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = popcnt v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   lui a4,5
;   addi a1,a4,1365
;   vsrl.vi v8,v9,1 #avl=8, #vtype=(e16, m1, ta, ma)
;   vand.vx v10,v8,a1 #avl=8, #vtype=(e16, m1, ta, ma)
;   vsub.vv v12,v9,v10 #avl=8, #vtype=(e16, m1, ta, ma)
;   lui a2,3
;   addi a4,a2,819
;   vsrl.vi v10,v12,2 #avl=8, #vtype=(e16, m1, ta, ma)
;   vand.vx v13,v10,a4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vand.vx v14,v12,a4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vadd.vv v8,v14,v13 #avl=8, #vtype=(e16, m1, ta, ma)
;   lui a2,1
;   addi a4,a2,-241
;   vsrl.vi v14,v8,4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vadd.vv v8,v8,v14 #avl=8, #vtype=(e16, m1, ta, ma)
;   vand.vx v10,v8,a4 #avl=8, #vtype=(e16, m1, ta, ma)
;   li a1,257
;   vmul.vx v14,v10,a1 #avl=8, #vtype=(e16, m1, ta, ma)
;   li a4,8
;   vsrl.vx v10,v14,a4 #avl=8, #vtype=(e16, m1, ta, ma)
;   vse8.v v10,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   lui a4, 5
;   addi a1, a4, 0x555
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0xb4, 0x90, 0xa2
;   .byte 0x57, 0xc5, 0x85, 0x26
;   .byte 0x57, 0x06, 0x95, 0x0a
;   lui a2, 3
;   addi a4, a2, 0x333
;   .byte 0x57, 0x35, 0xc1, 0xa2
;   .byte 0xd7, 0x46, 0xa7, 0x26
;   .byte 0x57, 0x47, 0xc7, 0x26
;   .byte 0x57, 0x84, 0xe6, 0x02
;   lui a2, 1
;   addi a4, a2, -0xf1
;   .byte 0x57, 0x37, 0x82, 0xa2
;   .byte 0x57, 0x04, 0x87, 0x02
;   .byte 0x57, 0x45, 0x87, 0x26
;   addi a1, zero, 0x101
;   .byte 0x57, 0xe7, 0xa5, 0x96
;   addi a4, zero, 8
;   .byte 0x57, 0x45, 0xe7, 0xa2
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x05, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %popcnt_i32x4(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = popcnt v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   lui a4,349525
;   addi a1,a4,1365
;   vsrl.vi v8,v9,1 #avl=4, #vtype=(e32, m1, ta, ma)
;   vand.vx v10,v8,a1 #avl=4, #vtype=(e32, m1, ta, ma)
;   vsub.vv v12,v9,v10 #avl=4, #vtype=(e32, m1, ta, ma)
;   lui a2,209715
;   addi a4,a2,819
;   vsrl.vi v10,v12,2 #avl=4, #vtype=(e32, m1, ta, ma)
;   vand.vx v13,v10,a4 #avl=4, #vtype=(e32, m1, ta, ma)
;   vand.vx v14,v12,a4 #avl=4, #vtype=(e32, m1, ta, ma)
;   vadd.vv v8,v14,v13 #avl=4, #vtype=(e32, m1, ta, ma)
;   lui a2,61681
;   addi a4,a2,-241
;   vsrl.vi v14,v8,4 #avl=4, #vtype=(e32, m1, ta, ma)
;   vadd.vv v8,v8,v14 #avl=4, #vtype=(e32, m1, ta, ma)
;   vand.vx v10,v8,a4 #avl=4, #vtype=(e32, m1, ta, ma)
;   lui a1,4112
;   addi a2,a1,257
;   vmul.vx v8,v10,a2 #avl=4, #vtype=(e32, m1, ta, ma)
;   li a1,24
;   vsrl.vx v12,v8,a1 #avl=4, #vtype=(e32, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   lui a4, 0x55555
;   addi a1, a4, 0x555
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0xb4, 0x90, 0xa2
;   .byte 0x57, 0xc5, 0x85, 0x26
;   .byte 0x57, 0x06, 0x95, 0x0a
;   lui a2, 0x33333
;   addi a4, a2, 0x333
;   .byte 0x57, 0x35, 0xc1, 0xa2
;   .byte 0xd7, 0x46, 0xa7, 0x26
;   .byte 0x57, 0x47, 0xc7, 0x26
;   .byte 0x57, 0x84, 0xe6, 0x02
;   lui a2, 0xf0f1
;   addi a4, a2, -0xf1
;   .byte 0x57, 0x37, 0x82, 0xa2
;   .byte 0x57, 0x04, 0x87, 0x02
;   .byte 0x57, 0x45, 0x87, 0x26
;   lui a1, 0x1010
;   addi a2, a1, 0x101
;   .byte 0x57, 0x64, 0xa6, 0x96
;   addi a1, zero, 0x18
;   .byte 0x57, 0xc6, 0x85, 0xa2
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x06, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %popcnt_i64x2(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = popcnt v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v9,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld a4,[const(0)]
;   vsrl.vi v14,v9,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vand.vx v8,v14,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vsub.vv v10,v9,v8 #avl=2, #vtype=(e64, m1, ta, ma)
;   ld a1,[const(1)]
;   vsrl.vi v14,v10,2 #avl=2, #vtype=(e64, m1, ta, ma)
;   vand.vx v8,v14,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vand.vx v10,v10,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vadd.vv v12,v10,v8 #avl=2, #vtype=(e64, m1, ta, ma)
;   ld a4,[const(2)]
;   vsrl.vi v8,v12,4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vadd.vv v10,v12,v8 #avl=2, #vtype=(e64, m1, ta, ma)
;   vand.vx v12,v10,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   ld a1,[const(3)]
;   vmul.vx v8,v12,a1 #avl=2, #vtype=(e64, m1, ta, ma)
;   li a4,56
;   vsrl.vx v12,v8,a4 #avl=2, #vtype=(e64, m1, ta, ma)
;   vse8.v v12,0(a0) #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x87, 0x84, 0x0f, 0x02
;   auipc a4, 0
;   ld a4, 0x74(a4)
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb7, 0x90, 0xa2
;   .byte 0x57, 0x44, 0xe7, 0x26
;   .byte 0x57, 0x05, 0x94, 0x0a
;   auipc a1, 0
;   ld a1, 0x64(a1)
;   .byte 0x57, 0x37, 0xa1, 0xa2
;   .byte 0x57, 0xc4, 0xe5, 0x26
;   .byte 0x57, 0xc5, 0xa5, 0x26
;   .byte 0x57, 0x06, 0xa4, 0x02
;   auipc a4, 0
;   ld a4, 0x54(a4)
;   .byte 0x57, 0x34, 0xc2, 0xa2
;   .byte 0x57, 0x05, 0xc4, 0x02
;   .byte 0x57, 0x46, 0xa7, 0x26
;   auipc a1, 0
;   ld a1, 0x48(a1)
;   .byte 0x57, 0xe4, 0xc5, 0x96
;   addi a4, zero, 0x38
;   .byte 0x57, 0x46, 0x87, 0xa2
;   .byte 0x57, 0x70, 0x08, 0xcc
;   .byte 0x27, 0x06, 0x05, 0x02
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret
;   .byte 0x00, 0x00, 0x00, 0x00
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0x55, 0x55, 0x55, 0x55
;   .byte 0x33, 0x33, 0x33, 0x33
;   .byte 0x33, 0x33, 0x33, 0x33
;   .byte 0x0f, 0x0f, 0x0f, 0x0f
;   .byte 0x0f, 0x0f, 0x0f, 0x0f
;   .byte 0x01, 0x01, 0x01, 0x01
;   .byte 0x01, 0x01, 0x01, 0x01

