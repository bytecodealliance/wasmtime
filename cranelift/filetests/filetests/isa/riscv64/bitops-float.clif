test compile precise-output
set unwind_info=false
target riscv64 has_zbb

;; This is a regression test for a bug in the RISC-V backend where
;; When enabling `Zbb` the backend would try to use one of the
;; integer instructions (`orn`) to implement a float operation
;; causing a regalloc panic.

function %or_not_optimization_float() -> i32 system_v {
block0:
    v0 = iconst.i32 0
    v1 = f32const 0.0
    v2 = bnot v1
    v3 = bor v2, v2
    br_table v0, block1(v3), [block1(v1)]

block1(v4: f32):
    return v0
}

; VCode:
; block0:
;   li a0,0
;   fmv.w.x fa5,zero
;   fmv.x.w a3,fa5
;   not a5,a3
;   fmv.w.x fa1,a5
;   fmv.x.w a2,fa1
;   fmv.x.w a4,fa1
;   or a1,a2,a4
;   fmv.w.x fa2,a1
;   br_table a0,[MachLabel(1),MachLabel(2)]##tmp1=a4,tmp2=a5
; block1:
;   j label3
; block2:
;   fmv.d fa2,fa5
;   j label3
; block3:
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   mv a0, zero
;   fmv.w.x fa5, zero
;   fmv.x.w a3, fa5
;   not a5, a3
;   fmv.w.x fa1, a5
;   fmv.x.w a2, fa1
;   fmv.x.w a4, fa1
;   or a1, a2, a4
;   fmv.w.x fa2, a1
;   slli t6, a0, 0x20
;   srli t6, t6, 0x20
;   addi a5, zero, 1
;   bltu t6, a5, 0xc
;   auipc a5, 0
;   jalr zero, a5, 0x28
;   auipc a4, 0
;   slli a5, t6, 3
;   add a4, a4, a5
;   jalr zero, a4, 0x10
;   auipc a5, 0
;   jalr zero, a5, 0xc
; block1: ; offset 0x54
;   j 8
; block2: ; offset 0x58
;   fmv.d fa2, fa5
; block3: ; offset 0x5c
;   ret

