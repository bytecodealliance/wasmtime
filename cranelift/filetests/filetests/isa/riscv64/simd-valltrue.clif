test compile precise-output
set enable_multi_ret_implicit_sret
set unwind_info=false
target riscv64 has_v

function %vall_true_i8x16(i8x16) -> i8 {
block0(v0: i8x16):
    v1 = vall_true v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v10,1 #avl=16, #vtype=(e8, m1, ta, ma)
;   vredminu.vs v12,v8,v10 #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.x.s a0,v12 #avl=16, #vtype=(e8, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0xb5, 0x00, 0x5e
;   .byte 0x57, 0x26, 0x85, 0x12
;   .byte 0x57, 0x25, 0xc0, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %vall_true_i16x8(i16x8) -> i8 {
block0(v0: i16x8):
    v1 = vall_true v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v10,1 #avl=8, #vtype=(e16, m1, ta, ma)
;   vredminu.vs v12,v8,v10 #avl=8, #vtype=(e16, m1, ta, ma)
;   vmv.x.s a0,v12 #avl=8, #vtype=(e16, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x84, 0xcc
;   .byte 0x57, 0xb5, 0x00, 0x5e
;   .byte 0x57, 0x26, 0x85, 0x12
;   .byte 0x57, 0x25, 0xc0, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %vall_true_i32x4(i32x4) -> i8 {
block0(v0: i32x4):
    v1 = vall_true v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v10,1 #avl=4, #vtype=(e32, m1, ta, ma)
;   vredminu.vs v12,v8,v10 #avl=4, #vtype=(e32, m1, ta, ma)
;   vmv.x.s a0,v12 #avl=4, #vtype=(e32, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x02, 0xcd
;   .byte 0x57, 0xb5, 0x00, 0x5e
;   .byte 0x57, 0x26, 0x85, 0x12
;   .byte 0x57, 0x25, 0xc0, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

function %vall_true_i64x2(i64x2) -> i8 {
block0(v0: i64x2):
    v1 = vall_true v0
    return v1
}

; VCode:
;   addi sp,sp,-16
;   sd ra,8(sp)
;   sd fp,0(sp)
;   mv fp,sp
; block0:
;   vle8.v v8,-16(incoming_arg) #avl=16, #vtype=(e8, m1, ta, ma)
;   vmv.v.i v10,1 #avl=2, #vtype=(e64, m1, ta, ma)
;   vredminu.vs v12,v8,v10 #avl=2, #vtype=(e64, m1, ta, ma)
;   vmv.x.s a0,v12 #avl=2, #vtype=(e64, m1, ta, ma)
;   ld ra,8(sp)
;   ld fp,0(sp)
;   addi sp,sp,16
;   ret
;
; Disassembled:
; block0: ; offset 0x0
;   addi sp, sp, -0x10
;   sd ra, 8(sp)
;   sd s0, 0(sp)
;   mv s0, sp
; block1: ; offset 0x10
;   .byte 0x57, 0x70, 0x08, 0xcc
;   addi t6, sp, 0x10
;   .byte 0x07, 0x84, 0x0f, 0x02
;   .byte 0x57, 0x70, 0x81, 0xcd
;   .byte 0x57, 0xb5, 0x00, 0x5e
;   .byte 0x57, 0x26, 0x85, 0x12
;   .byte 0x57, 0x25, 0xc0, 0x42
;   ld ra, 8(sp)
;   ld s0, 0(sp)
;   addi sp, sp, 0x10
;   ret

