test compile precise-output
target pulley64

function %brif_i8(i8) -> i8 {
block0(v0: i8):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   br_if x0, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 03 00 0a 00 00 00               br_if x0, 0xa    // target = 0xa
;        6: 14 00 00                        xconst8 x0, 0
;        9: 00                              ret
;        a: 14 00 01                        xconst8 x0, 1
;        d: 00                              ret

function %brif_i16(i16) -> i8 {
block0(v0: i16):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   br_if x0, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 03 00 0a 00 00 00               br_if x0, 0xa    // target = 0xa
;        6: 14 00 00                        xconst8 x0, 0
;        9: 00                              ret
;        a: 14 00 01                        xconst8 x0, 1
;        d: 00                              ret

function %brif_i32(i32) -> i8 {
block0(v0: i32):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   br_if x0, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 03 00 0a 00 00 00               br_if x0, 0xa    // target = 0xa
;        6: 14 00 00                        xconst8 x0, 0
;        9: 00                              ret
;        a: 14 00 01                        xconst8 x0, 1
;        d: 00                              ret

function %brif_i64(i64) -> i8 {
block0(v0: i64):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   br_if x0, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 03 00 0a 00 00 00               br_if x0, 0xa    // target = 0xa
;        6: 14 00 00                        xconst8 x0, 0
;        9: 00                              ret
;        a: 14 00 01                        xconst8 x0, 1
;        d: 00                              ret

function %brif_icmp_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = icmp eq v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   x5 = xeq32 x0, x1
;   br_if x5, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 20 05 04                        xeq32 x5, x0, x1
;        3: 03 05 0a 00 00 00               br_if x5, 0xa    // target = 0xd
;        9: 14 00 00                        xconst8 x0, 0
;        c: 00                              ret
;        d: 14 00 01                        xconst8 x0, 1
;       10: 00                              ret

function %brif_icmp_i16(i16, i16) -> i8 {
block0(v0: i16, v1: i16):
  v2 = icmp ne v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   x5 = xneq32 x0, x1
;   br_if x5, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 21 05 04                        xneq32 x5, x0, x1
;        3: 03 05 0a 00 00 00               br_if x5, 0xa    // target = 0xd
;        9: 14 00 00                        xconst8 x0, 0
;        c: 00                              ret
;        d: 14 00 01                        xconst8 x0, 1
;       10: 00                              ret

function %brif_icmp_i32(i32, i32) -> i8 {
block0(v0: i32, v1: i32):
  v2 = icmp slt v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   br_if_xslt32 x0, x1, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 07 00 01 0b 00 00 00            br_if_xslt32 x0, x1, 0xb    // target = 0xb
;        7: 14 00 00                        xconst8 x0, 0
;        a: 00                              ret
;        b: 14 00 01                        xconst8 x0, 1
;        e: 00                              ret

function %brif_icmp_i64(i64, i64) -> i8 {
block0(v0: i64, v1: i64):
  v2 = icmp uge v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   x5 = xulteq64 x1, x0
;   br_if x5, label2; jump label1
; block1:
;   x0 = xconst8 0
;   ret
; block2:
;   x0 = xconst8 1
;   ret
;
; Disassembled:
;        0: 1f 25 00                        xulteq64 x5, x1, x0
;        3: 03 05 0a 00 00 00               br_if x5, 0xa    // target = 0xd
;        9: 14 00 00                        xconst8 x0, 0
;        c: 00                              ret
;        d: 14 00 01                        xconst8 x0, 1
;       10: 00                              ret

