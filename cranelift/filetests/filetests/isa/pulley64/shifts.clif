test compile precise-output
target pulley64

function %i32_imm(i32) -> i32 {
block0(v0: i32):
  v2 = ishl_imm v0, 7
  return v2
}

; VCode:
; block0:
;   xshl32_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshl32_u6 x0, x0, 7
; ret

function %i32_imm2(i32) -> i32 {
block0(v0: i32):
  v2 = ishl_imm v0, 0x187
  return v2
}

; VCode:
; block0:
;   xshl32_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshl32_u6 x0, x0, 7
; ret

function %i64_imm(i64) -> i64 {
block0(v0: i64):
  v2 = ishl_imm v0, 7
  return v2
}

; VCode:
; block0:
;   xshl64_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshl64_u6 x0, x0, 7
; ret

function %i64_imm2(i64) -> i64 {
block0(v0: i64):
  v2 = ishl_imm v0, 0x187
  return v2
}

; VCode:
; block0:
;   xshl64_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshl64_u6 x0, x0, 7
; ret

function %i32_ushr_imm(i32) -> i32 {
block0(v0: i32):
  v2 = ushr_imm v0, 7
  return v2
}

; VCode:
; block0:
;   xshr32_u_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr32_u_u6 x0, x0, 7
; ret

function %i32_ushr_imm2(i32) -> i32 {
block0(v0: i32):
  v2 = ushr_imm v0, 0x187
  return v2
}

; VCode:
; block0:
;   xshr32_u_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr32_u_u6 x0, x0, 7
; ret

function %i64_ushr_imm(i64) -> i64 {
block0(v0: i64):
  v2 = ushr_imm v0, 7
  return v2
}

; VCode:
; block0:
;   xshr64_u_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr64_u_u6 x0, x0, 7
; ret

function %i64_ushr_imm2(i64) -> i64 {
block0(v0: i64):
  v2 = ushr_imm v0, 0x187
  return v2
}

; VCode:
; block0:
;   xshr64_u_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr64_u_u6 x0, x0, 7
; ret

function %i32_sshr_imm(i32) -> i32 {
block0(v0: i32):
  v2 = sshr_imm v0, 7
  return v2
}

; VCode:
; block0:
;   xshr32_s_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr32_s_u6 x0, x0, 7
; ret

function %i32_sshr_imm2(i32) -> i32 {
block0(v0: i32):
  v2 = sshr_imm v0, 0x187
  return v2
}

; VCode:
; block0:
;   xshr32_s_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr32_s_u6 x0, x0, 7
; ret

function %i64_sshr_imm(i64) -> i64 {
block0(v0: i64):
  v2 = sshr_imm v0, 7
  return v2
}

; VCode:
; block0:
;   xshr64_s_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr64_s_u6 x0, x0, 7
; ret

function %i64_sshr_imm2(i64) -> i64 {
block0(v0: i64):
  v2 = sshr_imm v0, 0x187
  return v2
}

; VCode:
; block0:
;   xshr64_s_u6 x0, x0, 7
;   ret
;
; Disassembled:
; xshr64_s_u6 x0, x0, 7
; ret

