test compile precise-output
target pulley32

function %brif_i8(i8) -> i8 {
block0(v0: i8):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   zext8 x4, x0
;   br_if32 x4, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; zext8 x4, x0
; br_if32 x4, 0xa    // target = 0xd
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_i16(i16) -> i8 {
block0(v0: i16):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   zext16 x4, x0
;   br_if32 x4, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; zext16 x4, x0
; br_if32 x4, 0xa    // target = 0xd
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_i32(i32) -> i8 {
block0(v0: i32):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   br_if32 x0, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; br_if32 x0, 0xa    // target = 0xa
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_i64(i64) -> i8 {
block0(v0: i64):
  brif v0, block1, block2

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
; block0:
;   xconst8 x4, 0
;   br_if_xneq64 x0, x4, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; xconst8 x4, 0
; br_if_xneq64 x0, x4, 0xb    // target = 0xe
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_icmp_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = icmp eq v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   xeq32 x6, x0, x1
;   zext8 x6, x6
;   br_if32 x6, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; xeq32 x6, x0, x1
; zext8 x6, x6
; br_if32 x6, 0xa    // target = 0x10
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_icmp_i16(i16, i16) -> i8 {
block0(v0: i16, v1: i16):
  v2 = icmp ne v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   xneq32 x6, x0, x1
;   zext8 x6, x6
;   br_if32 x6, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; xneq32 x6, x0, x1
; zext8 x6, x6
; br_if32 x6, 0xa    // target = 0x10
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_icmp_i32(i32, i32) -> i8 {
block0(v0: i32, v1: i32):
  v2 = icmp slt v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   br_if_xslt32 x0, x1, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; br_if_xslt32 x0, x1, 0xb    // target = 0xb
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

function %brif_icmp_i64(i64, i64) -> i8 {
block0(v0: i64, v1: i64):
  v2 = icmp uge v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i8 1
  return v3

block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
; block0:
;   br_if_xulteq64 x1, x0, label2; jump label1
; block1:
;   xconst8 x0, 0
;   ret
; block2:
;   xconst8 x0, 1
;   ret
;
; Disassembled:
; br_if_xulteq64 x1, x0, 0xb    // target = 0xb
; xconst8 x0, 0
; ret
; xconst8 x0, 1
; ret

