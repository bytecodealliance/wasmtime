test compile precise-output
set enable_multi_ret_implicit_sret
target pulley32

function %colocated_args_i64_rets_i64() -> i64 {
    fn0 = colocated %g(i64) -> i64

block0:
    v0 = iconst.i64 0
    v1 = call fn0(v0)
    v2 = iconst.i64 1
    return v2
}

; VCode:
;   push_frame
; block0:
;   xconst8 x2, 0
;   call CallInfo { dest: PulleyCall { name: TestCase(%g), args: [XReg(p2i)] }, uses: [], defs: [CallRetPair { vreg: Writable { reg: p0i }, preg: p0i }], clobbers: PRegSet { bits: [65534, 65535, 4294967295, 0] }, callee_conv: Fast, caller_conv: Fast, callee_pop_size: 0 }
;   xconst8 x0, 1
;   pop_frame
;   ret
;
; Disassembled:
; push_frame
; xconst8 x2, 0
; call1 x2, 0x0    // target = 0x4
; xconst8 x0, 1
; pop_frame
; ret

function %colocated_args_i32_rets_i32() -> i32 {
    fn0 = colocated %g(i32) -> i32

block0:
    v0 = iconst.i32 0
    v1 = call fn0(v0)
    v2 = iconst.i32 1
    return v2
}

; VCode:
;   push_frame
; block0:
;   xconst8 x2, 0
;   call CallInfo { dest: PulleyCall { name: TestCase(%g), args: [XReg(p2i)] }, uses: [], defs: [CallRetPair { vreg: Writable { reg: p0i }, preg: p0i }], clobbers: PRegSet { bits: [65534, 65535, 4294967295, 0] }, callee_conv: Fast, caller_conv: Fast, callee_pop_size: 0 }
;   xconst8 x0, 1
;   pop_frame
;   ret
;
; Disassembled:
; push_frame
; xconst8 x2, 0
; call1 x2, 0x0    // target = 0x4
; xconst8 x0, 1
; pop_frame
; ret

function %colocated_args_i64_i32_i64_i32() {
    fn0 = colocated %g(i64, i32, i64, i32)

block0:
    v0 = iconst.i64 0
    v1 = iconst.i32 1
    v2 = iconst.i64 2
    v3 = iconst.i32 3
    call fn0(v0, v1, v2, v3)
    return
}

; VCode:
;   push_frame
; block0:
;   xconst8 x3, 0
;   xconst8 x4, 1
;   xconst8 x5, 2
;   xconst8 x6, 3
;   call CallInfo { dest: PulleyCall { name: TestCase(%g), args: [XReg(p3i), XReg(p4i), XReg(p5i), XReg(p6i)] }, uses: [], defs: [], clobbers: PRegSet { bits: [65535, 65535, 4294967295, 0] }, callee_conv: Fast, caller_conv: Fast, callee_pop_size: 0 }
;   pop_frame
;   ret
;
; Disassembled:
; push_frame
; xconst8 x3, 0
; xconst8 x4, 1
; xconst8 x5, 2
; xconst8 x6, 3
; call4 x3, x4, x5, x6, 0x0    // target = 0xd
; pop_frame
; ret

function %colocated_rets_i64_i64_i64_i64() -> i64 {
    fn0 = colocated %g() -> i64, i64, i64, i64

block0:
    v0, v1, v2, v3 = call fn0()
    v4 = iadd v0, v2
    v5 = iadd v1, v3
    v6 = iadd v4, v5
    return v6
}

; VCode:
;   push_frame
; block0:
;   call CallInfo { dest: PulleyCall { name: TestCase(%g), args: [] }, uses: [], defs: [CallRetPair { vreg: Writable { reg: p0i }, preg: p0i }, CallRetPair { vreg: Writable { reg: p1i }, preg: p1i }, CallRetPair { vreg: Writable { reg: p2i }, preg: p2i }, CallRetPair { vreg: Writable { reg: p3i }, preg: p3i }], clobbers: PRegSet { bits: [65520, 65535, 4294967295, 0] }, callee_conv: Fast, caller_conv: Fast, callee_pop_size: 0 }
;   xadd64 x4, x0, x2
;   xadd64 x3, x1, x3
;   xadd64 x0, x4, x3
;   pop_frame
;   ret
;
; Disassembled:
; push_frame
; call 0x0    // target = 0x1
; xadd64 x4, x0, x2
; xadd64 x3, x1, x3
; xadd64 x0, x4, x3
; pop_frame
; ret

function %colocated_stack_args() {
    fn0 = colocated %g(i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)

block0:
    v0 = iconst.i64 0
    call fn0(v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0, v0)
    return
}

; VCode:
;   push_frame_save 48, {}
; block0:
;   xconst8 x15, 0
;   xstore64 OutgoingArg(0), x15 // flags =  notrap aligned
;   xstore64 OutgoingArg(8), x15 // flags =  notrap aligned
;   xstore64 OutgoingArg(16), x15 // flags =  notrap aligned
;   xstore64 OutgoingArg(24), x15 // flags =  notrap aligned
;   xstore64 OutgoingArg(32), x15 // flags =  notrap aligned
;   xstore64 OutgoingArg(40), x15 // flags =  notrap aligned
;   xmov x4, x15
;   xmov x5, x15
;   xmov x6, x15
;   xmov x7, x15
;   xmov x8, x15
;   xmov x9, x15
;   xmov x10, x15
;   xmov x11, x15
;   xmov x12, x15
;   xmov x13, x15
;   xmov x14, x15
;   call CallInfo { dest: PulleyCall { name: TestCase(%g), args: [XReg(p15i), XReg(p15i), XReg(p15i), XReg(p15i)] }, uses: [CallArgPair { vreg: p4i, preg: p4i }, CallArgPair { vreg: p5i, preg: p5i }, CallArgPair { vreg: p6i, preg: p6i }, CallArgPair { vreg: p7i, preg: p7i }, CallArgPair { vreg: p8i, preg: p8i }, CallArgPair { vreg: p9i, preg: p9i }, CallArgPair { vreg: p10i, preg: p10i }, CallArgPair { vreg: p11i, preg: p11i }, CallArgPair { vreg: p12i, preg: p12i }, CallArgPair { vreg: p13i, preg: p13i }, CallArgPair { vreg: p14i, preg: p14i }, CallArgPair { vreg: p15i, preg: p15i }], defs: [], clobbers: PRegSet { bits: [65535, 65535, 4294967295, 0] }, callee_conv: Fast, caller_conv: Fast, callee_pop_size: 0 }
;   pop_frame_restore 48, {}
;   ret
;
; Disassembled:
; push_frame_save 48, 
; xconst8 x15, 0
; xstore64le_offset8 sp, 0, x15
; xstore64le_offset8 sp, 8, x15
; xstore64le_offset8 sp, 16, x15
; xstore64le_offset8 sp, 24, x15
; xstore64le_offset8 sp, 32, x15
; xstore64le_offset8 sp, 40, x15
; xmov x4, x15
; xmov x5, x15
; xmov x6, x15
; xmov x7, x15
; xmov x8, x15
; xmov x9, x15
; xmov x10, x15
; xmov x11, x15
; xmov x12, x15
; xmov x13, x15
; xmov x14, x15
; call4 x15, x15, x15, x15, 0x0    // target = 0x45
; pop_frame_restore 48, 
; ret

function %colocated_stack_rets() -> i64 {
    fn0 = colocated %g() -> i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64

block0:
    v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 = call fn0()

    v22 = iadd v0, v1
    v23 = iadd v2, v3
    v24 = iadd v4, v5
    v25 = iadd v6, v7
    v26 = iadd v8, v9
    v27 = iadd v10, v11
    v28 = iadd v12, v13
    v29 = iadd v14, v15
    v30 = iadd v16, v17
    v31 = iadd v17, v18
    v32 = iadd v19, v20

    v33 = iadd v22, v23
    v34 = iadd v24, v25
    v35 = iadd v26, v27
    v36 = iadd v28, v29
    v37 = iadd v30, v31
    v38 = iadd v32, v32

    v39 = iadd v33, v34
    v40 = iadd v35, v36
    v41 = iadd v37, v38

    v42 = iadd v39, v40
    v43 = iadd v41, v41

    v44 = iadd v42, v43
    return v44
}

; VCode:
;   push_frame_save 112, {x17, x18, x20, x21, x22, x23, x29}
; block0:
;   x12 = load_addr OutgoingArg(0)
;   call CallInfo { dest: PulleyCall { name: TestCase(%g), args: [XReg(p12i)] }, uses: [], defs: [CallRetPair { vreg: Writable { reg: p0i }, preg: p0i }, CallRetPair { vreg: Writable { reg: p1i }, preg: p1i }, CallRetPair { vreg: Writable { reg: p2i }, preg: p2i }, CallRetPair { vreg: Writable { reg: p3i }, preg: p3i }, CallRetPair { vreg: Writable { reg: p4i }, preg: p4i }, CallRetPair { vreg: Writable { reg: p5i }, preg: p5i }, CallRetPair { vreg: Writable { reg: p6i }, preg: p6i }, CallRetPair { vreg: Writable { reg: p7i }, preg: p7i }, CallRetPair { vreg: Writable { reg: p8i }, preg: p8i }, CallRetPair { vreg: Writable { reg: p9i }, preg: p9i }, CallRetPair { vreg: Writable { reg: p10i }, preg: p10i }, CallRetPair { vreg: Writable { reg: p11i }, preg: p11i }, CallRetPair { vreg: Writable { reg: p12i }, preg: p12i }, CallRetPair { vreg: Writable { reg: p13i }, preg: p13i }, CallRetPair { vreg: Writable { reg: p14i }, preg: p14i }, CallRetPair { vreg: Writable { reg: p15i }, preg: p15i }], clobbers: PRegSet { bits: [0, 65535, 4294967295, 0] }, callee_conv: Fast, caller_conv: Fast, callee_pop_size: 0 }
;   xmov x20, x13
;   xmov x22, x11
;   x29 = xload64 OutgoingArg(0) // flags = notrap aligned
;   x11 = xload64 OutgoingArg(8) // flags = notrap aligned
;   x13 = xload64 OutgoingArg(16) // flags = notrap aligned
;   x21 = xload64 OutgoingArg(24) // flags = notrap aligned
;   x23 = xload64 OutgoingArg(32) // flags = notrap aligned
;   xadd64 x18, x0, x1
;   xadd64 x17, x2, x3
;   xadd64 x5, x4, x5
;   xadd64 x6, x6, x7
;   xadd64 x7, x8, x9
;   xmov x0, x22
;   xadd64 x4, x10, x0
;   xmov x10, x20
;   xadd64 x8, x12, x10
;   xadd64 x14, x14, x15
;   xadd64 x15, x29, x11
;   xadd64 x13, x11, x13
;   xadd64 x0, x21, x23
;   xadd64 x1, x18, x17
;   xadd64 x2, x5, x6
;   xadd64 x3, x7, x4
;   xadd64 x14, x8, x14
;   xadd64 x13, x15, x13
;   xadd64 x15, x0, x0
;   xadd64 x0, x1, x2
;   xadd64 x14, x3, x14
;   xadd64 x13, x13, x15
;   xadd64 x14, x0, x14
;   xadd64 x13, x13, x13
;   xadd64 x0, x14, x13
;   pop_frame_restore 112, {x17, x18, x20, x21, x22, x23, x29}
;   ret
;
; Disassembled:
; push_frame_save 112, x17, x18, x20, x21, x22, x23, x29
; xmov x12, sp
; call1 x12, 0x0    // target = 0xc
; xmov x20, x13
; xmov x22, x11
; xload64le_offset8 x29, sp, 0
; xload64le_offset8 x11, sp, 8
; xload64le_offset8 x13, sp, 16
; xload64le_offset8 x21, sp, 24
; xload64le_offset8 x23, sp, 32
; xadd64 x18, x0, x1
; xadd64 x17, x2, x3
; xadd64 x5, x4, x5
; xadd64 x6, x6, x7
; xadd64 x7, x8, x9
; xmov x0, x22
; xadd64 x4, x10, x0
; xmov x10, x20
; xadd64 x8, x12, x10
; xadd64 x14, x14, x15
; xadd64 x15, x29, x11
; xadd64 x13, x11, x13
; xadd64 x0, x21, x23
; xadd64 x1, x18, x17
; xadd64 x2, x5, x6
; xadd64 x3, x7, x4
; xadd64 x14, x8, x14
; xadd64 x13, x15, x13
; xadd64 x15, x0, x0
; xadd64 x0, x1, x2
; xadd64 x14, x3, x14
; xadd64 x13, x13, x15
; xadd64 x14, x0, x14
; xadd64 x13, x13, x13
; xadd64 x0, x14, x13
; pop_frame_restore 112, x17, x18, x20, x21, x22, x23, x29
; ret

function %call_indirect(i32) -> i64 {
    sig0 = () -> i64 tail

block0(v0: i32):
    v1 = call_indirect sig0, v0()
    return v1
}

; VCode:
;   push_frame
; block0:
;   indirect_call x0, CallInfo { dest: XReg(p0i), uses: [], defs: [CallRetPair { vreg: Writable { reg: p0i }, preg: p0i }], clobbers: PRegSet { bits: [65534, 65535, 4294967295, 0] }, callee_conv: Tail, caller_conv: Fast, callee_pop_size: 0 }
;   pop_frame
;   ret
;
; Disassembled:
; push_frame
; call_indirect x0
; pop_frame
; ret

