test inline precise-output
target x86_64

function %f0(i64 vmctx) -> i64 {
    gv0 = vmctx
    gv1 = load.i64 notrap aligned gv0+16
block0(v0: i64):
    v1 = global_value.i64 gv1
    return v1
}

; (no functions inlined into %f0)

function %f1(i64 vmctx) -> i64 {
    gv0 = vmctx
    gv1 = symbol %other_vmctx
    fn0 = %f0(i64 vmctx) -> i64
block0(v0: i64):
    ;; Note: the callee's vmctx is *not* the same as the caller's vmctx!
    v1 = symbol_value.i64 gv1
    v2 = call fn0(v1)
    return v2
}

; function %f1(i64 vmctx) -> i64 fast {
;     gv0 = vmctx
;     gv1 = symbol %other_vmctx
;     gv2 = vmctx
;     gv3 = load.i64 notrap aligned gv2+16
;     sig0 = (i64 vmctx) -> i64 fast
;     fn0 = %f0 sig0
;
; block0(v0: i64):
;     v1 = symbol_value.i64 gv1
;     jump block1
;
; block1:
;     v4 = load.i64 notrap aligned v1+16
;     jump block2(v4)
;
; block2(v3: i64):
;     v2 -> v3
;     return v2
; }

