test inline precise-output
target x86_64

function %f0(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = iadd v0, v1
    return v2

;; This block is unreachable, despite it being in the function's layout! We
;; should not include this block in callers' layouts when inlining because we
;; will skip copying its instructions over into the caller due to how we use a
;; reachability-based DFS traversal when inlining instructions. Ideally, we
;; wouldn't even include it in callers' entity maps at all, but that is not
;; required for correctness, while producing valid CLIF that does not have empty
;; blocks without terminators is.
block1:
    trap user42

}

; (no functions inlined into %f0)

function %f1() -> i32 {
    fn0 = %f0(i32, i32) -> i32
block0():
    v0 = iconst.i32 10
    v1 = call fn0(v0, v0)
    return v1
}

; function %f1() -> i32 fast {
;     sig0 = (i32, i32) -> i32 fast
;     fn0 = %f0 sig0
;
; block0:
;     v0 = iconst.i32 10
;     jump block1
;
; block1:
;     v3 = iadd.i32 v0, v0  ; v0 = 10, v0 = 10
;     jump block3(v3)
;
; block3(v2: i32):
;     v1 -> v2
;     return v1
; }

;; A similar test as above, but with multiple and indirectly unreachable blocks.
function %f3() -> i32 {
block0:
    jump block1
block1:
    v0 = iconst.i32 42
    return v0
block2:
    jump block3
block3:
    trap user42
}

; (no functions inlined into %f3)

function %f4() -> i32 {
    fn0 = %f3() -> i32
block0:
    v0 = call fn0()
    return v0
}

; function %f4() -> i32 fast {
;     sig0 = () -> i32 fast
;     fn0 = %f3 sig0
;
; block0:
;     jump block1
;
; block1:
;     jump block2
;
; block2:
;     v2 = iconst.i32 42
;     jump block5(v2)  ; v2 = 42
;
; block5(v1: i32):
;     v0 -> v1
;     return v0
; }

