test inline precise-output
target x86_64

;; Inlining a `call` site whose callee contains a `try_call`.

function %f0(i32) -> i64 tail {
    sig0 = (i32) -> i64 tail
    fn0 = %foo(i32) -> i64 tail
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = iconst.i32 1
    try_call fn0(v0), sig0, block1(ret0, v2), [tag1: block1(exn0, v1)]
block1(v3: i64, v4: i32):
    v5 = iconst.i64 0
    v6 = select v4, v3, v5
    return v6
}

; (no functions inlined into %f0)

function %f1() -> i64 tail {
    fn0 = %f0(i32) -> i64 tail
block0:
    v0 = iconst.i32 99
    v1 = call fn0(v0)
    v2 = iconst.i64 1
    v3 = iadd v1, v2
    return v3
}

; function %f1() -> i64 tail {
;     sig0 = (i32) -> i64 tail
;     sig1 = (i32) -> i64 tail
;     sig2 = (i32) -> i64 tail
;     fn0 = %f0 sig0
;     fn1 = %foo sig2
;
; block0:
;     v0 = iconst.i32 99
;     jump block1
;
; block1:
;     v7 = iconst.i32 0
;     v8 = iconst.i32 1
;     try_call fn1(v0), sig1, block2(ret0, v8), [ tag1: block2(exn0, v7) ]  ; v0 = 99, v7 = 0, v8 = 1
;
; block2(v4: i64, v5: i32):
;     v9 = iconst.i64 0
;     v10 = select v5, v4, v9  ; v9 = 0
;     jump block3(v10)
;
; block3(v6: i64):
;     v1 -> v6
;     v2 = iconst.i64 1
;     v3 = iadd v1, v2  ; v2 = 1
;     return v3
; }

;; Inlining a `try_call` site whose callee contains a `try_call`.

function %f2() -> i64 tail {
    sig0 = (i32) -> i64 tail
    fn0 = %f0(i32) -> i64 tail
block0:
    v0 = iconst.i32 99
    try_call fn0(v0), sig0, block1(ret0), [default: block2(exn0)]
block1(v1: i64):
    v2 = iconst.i64 1
    v3 = iadd v1, v2
    return v3
block2(v4: i64):
    return v4
}

; function %f2() -> i64 tail {
;     sig0 = (i32) -> i64 tail
;     sig1 = (i32) -> i64 tail
;     sig2 = (i32) -> i64 tail
;     sig3 = (i32) -> i64 tail
;     fn0 = %f0 sig1
;     fn1 = %foo sig3
;
; block0:
;     v0 = iconst.i32 99
;     jump block3
;
; block3:
;     v7 = iconst.i32 0
;     v8 = iconst.i32 1
;     try_call fn1(v0), sig2, block4(ret0, v8), [ tag1: block4(exn0, v7), default: block2(exn0) ]  ; v0 = 99, v7 = 0, v8 = 1
;
; block4(v5: i64, v6: i32):
;     v9 = iconst.i64 0
;     v10 = select v6, v5, v9  ; v9 = 0
;     jump block1(v10)
;
; block1(v1: i64):
;     v2 = iconst.i64 1
;     v3 = iadd v1, v2  ; v2 = 1
;     return v3
;
; block2(v4: i64):
;     return v4
; }

;; Inlining a `try_call` site whose callee contains a `call` and
;; `call_indirect`.

function %f3() -> i64 tail {
    sig0 = () -> i64 tail
    fn0 = %bar(i64) -> i64 tail
block0:
    v0 = iconst.i64 36
    v1 = call fn0(v0)
    v2 = call_indirect sig0, v1()
    return v2
}

; (no functions inlined into %f3)

function %f4() -> i64 tail {
    sig0 = () -> i64 tail
    fn0 = %f3() -> i64 tail
block0:
    v0 = iconst.i64 0
    ;; The inliner should rewrite the callee's `call` instructions into
    ;; `try_call`s and use this `try_call`'s exception table.
    try_call fn0(), sig0, block1(ret0), [tag1: block2, tag2: block3(v0), default: block3(exn0)]
block1(v1: i64):
    return v1
block2:
    v2 = iconst.i64 1
    return v2
block3(v3: i64):
    return v3
}

; function %f4() -> i64 tail {
;     sig0 = () -> i64 tail
;     sig1 = () -> i64 tail
;     sig2 = () -> i64 tail
;     sig3 = (i64) -> i64 tail
;     fn0 = %f3 sig1
;     fn1 = %bar sig3
;
; block0:
;     v0 = iconst.i64 0
;     jump block4
;
; block4:
;     v4 = iconst.i64 36
;     try_call fn1(v4), sig3, block5(ret0), [ tag1: block2, tag2: block3(v0), default: block3(exn0) ]  ; v4 = 36, v0 = 0
;
; block5(v7: i64):
;     v5 -> v7
;     try_call_indirect v5(), sig2, block6(ret0), [ tag1: block2, tag2: block3(v0), default: block3(exn0) ]  ; v0 = 0
;
; block6(v8: i64):
;     v6 -> v8
;     jump block1(v6)
;
; block1(v1: i64):
;     return v1
;
; block2:
;     v2 = iconst.i64 1
;     return v2  ; v2 = 1
;
; block3(v3: i64):
;     return v3
; }

;; Inlining `try_call` sites whose normal-return edge does not simply pass along
;; the call's return values.

function %f5() -> i64, i64 tail {
    fn0 = %whatever() -> i64 tail
block0:
    v0 = call fn0()
    v1 = iconst.i64 1
    v2 = iadd v0, v1
    return v0, v2
}

; (no functions inlined into %f5)

function %f6() -> i64, i32 tail {
    fn0 = %f5() -> i64, i64 tail
block0:
    v0 = iconst.i32 42
    ;; Note: we do not just forward the return values in the normal-return
    ;; branch! The inlined version of our callee should not attempt to pass
    ;; arguments directly to `block1`, and should instead create a temporary
    ;; block for "returns" in front of `block1`.
    try_call fn0(), sig0, block1(ret1, v0), [default: block2(exn0)]
block1(v1: i64, v2: i32):
    return v1, v2
block2(v3: i64):
    v4 = iconst.i32 0
    return v3, v4
}

; function %f6() -> i64, i32 tail {
;     sig0 = () -> i64, i64 tail
;     sig1 = () -> i64 tail
;     fn0 = %f5 sig0
;     fn1 = %whatever sig1
;
; block0:
;     v0 = iconst.i32 42
;     jump block3
;
; block3:
;     try_call fn1(), sig1, block5(ret0), [ default: block2(exn0) ]
;
; block5(v10: i64):
;     v7 -> v10
;     v8 = iconst.i64 1
;     v9 = iadd v7, v8  ; v8 = 1
;     jump block4(v7, v9)
;
; block4(v5: i64, v6: i64):
;     jump block1(v6, v0)  ; v0 = 42
;
; block1(v1: i64, v2: i32):
;     return v1, v2
;
; block2(v3: i64):
;     v4 = iconst.i32 0
;     return v3, v4  ; v4 = 0
; }

;; Inlining a `try_call` site whose callee ends in a `return_call`.

function %f7() -> i64 tail {
    fn0 = %foo() -> i64 tail
block0:
    ;; When inlined, this should become a `try_call` followed by a branch to the
    ;; control-flow join point.
    return_call fn0()
}

; (no functions inlined into %f7)

function %f8() -> i32 {
    sig0 = () -> i64 tail
    fn0 = %f7 sig0
block0:
    try_call fn0(), sig0, block1(ret0), [default: block2(exn0)]
block1(v0: i64):
    v1 = ireduce.i32 v0
    return v1
block2(v2: i64):
    v3 = iconst.i32 1
    v4 = ireduce.i32 v2
    v5 = iadd v3, v4
    return v5
}

; function %f8() -> i32 fast {
;     sig0 = () -> i64 tail
;     sig1 = () -> i64 tail
;     fn0 = %f7 sig0
;     fn1 = %foo sig1
;
; block0:
;     jump block3
;
; block3:
;     try_call fn1(), sig1, block4(ret0), [ default: block2(exn0) ]
;
; block4(v7: i64):
;     v6 -> v7
;     jump block1(v6)
;
; block1(v0: i64):
;     v1 = ireduce.i32 v0
;     return v1
;
; block2(v2: i64):
;     v3 = iconst.i32 1
;     v4 = ireduce.i32 v2
;     v5 = iadd v3, v4  ; v3 = 1
;     return v5
; }

;; Inlining a `try_call` site whose callee ends in a `return_call_indirect`.

function %f9(i64) -> i64 tail {
    sig0 = () -> i64 tail
block0(v0: i64):
    ;; When inlined, this should become a `try_call_indirect` followed by a
    ;; branch to the control-flow join point.
    return_call_indirect sig0, v0()
}

; (no functions inlined into %f9)

function %f10(i64) -> i32 {
    sig0 = (i64) -> i64 tail
    fn0 = %f9 sig0
block0(v0: i64):
    try_call fn0(v0), sig0, block1(ret0), [default: block2(exn0)]
block1(v1: i64):
    v2 = ireduce.i32 v1
    return v2
block2(v3: i64):
    v4 = iconst.i32 1
    v5 = ireduce.i32 v3
    v6 = iadd v4, v5
    return v6
}

; function %f10(i64) -> i32 fast {
;     sig0 = (i64) -> i64 tail
;     sig1 = () -> i64 tail
;     fn0 = %f9 sig0
;
; block0(v0: i64):
;     jump block3
;
; block3:
;     try_call_indirect.i64 v0(), sig1, block4(ret0), [ default: block2(exn0) ]
;
; block4(v8: i64):
;     v7 -> v8
;     jump block1(v7)
;
; block1(v1: i64):
;     v2 = ireduce.i32 v1
;     return v2
;
; block2(v3: i64):
;     v4 = iconst.i32 1
;     v5 = ireduce.i32 v3
;     v6 = iadd v4, v5  ; v4 = 1
;     return v6
; }
