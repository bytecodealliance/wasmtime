test optimize precise-output
set opt_level=speed
target x86_64

;; Masking the result of a comparison with 1 always results in the comparison
;; itself (comparisons in wasm may sometimes be hidden behind extensions):
function %mask_icmp_result(i64, i64) -> i8 {
block0(v1: i64, v2: i64):
    v3 = icmp ult v1, v2
    v4 = iconst.i8 1
    v5 = band v3, v4
    return v5
}

; function %mask_icmp_result(i64, i64) -> i8 fast {
; block0(v1: i64, v2: i64):
;     v3 = icmp ult v1, v2
;     return v3
; }

function %mask_icmp_extend_result(i64, i64) -> i64 {
block0(v1: i64, v2: i64):
    v3 = icmp ult v1, v2
    v4 = uextend.i64 v3
    v5 = iconst.i64 1
    v6 = band v4, v5
    return v6
}

; function %mask_icmp_extend_result(i64, i64) -> i64 fast {
; block0(v1: i64, v2: i64):
;     v3 = icmp ult v1, v2
;     v4 = uextend.i64 v3
;     return v4
; }

function %icmp_simplify_does_not_build_iconst_i128() -> i8 {
block0:
    v0 = iconst.i64 0x6350_5050_5050_3750
    v1 = iconcat v0, v0
    v2 = bmask.i8 v1
    v3 = iconst.i8 0
    v4 = icmp ugt v2, v3
    return v4
}

; function %icmp_simplify_does_not_build_iconst_i128() -> i8 fast {
; block0:
;     v0 = iconst.i64 0x6350_5050_5050_3750
;     v1 = iconcat v0, v0  ; v0 = 0x6350_5050_5050_3750, v0 = 0x6350_5050_5050_3750
;     v2 = bmask.i8 v1
;     v3 = iconst.i8 0
;     v5 = icmp ne v2, v3  ; v3 = 0
;     return v5
; }

function %sge_one(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 1
    v2 = icmp sge v0, v1
    return v2
}

; function %sge_one(i64) -> i8 fast {
; block0(v0: i64):
;     v3 = iconst.i64 0
;     v4 = icmp sgt v0, v3  ; v3 = 0
;     return v4
; }

function %slt_one(i16) -> i8 {
block0(v0: i16):
    v1 = iconst.i16 1
    v2 = icmp slt v0, v1
    return v2
}

; function %slt_one(i16) -> i8 fast {
; block0(v0: i16):
;     v1 = iconst.i16 1
;     v9 = icmp slt v0, v1  ; v1 = 1
;     return v9
; }

function %uge_one(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 1
    v2 = icmp uge v0, v1
    return v2
}

; function %uge_one(i32) -> i8 fast {
; block0(v0: i32):
;     v3 = iconst.i32 0
;     v5 = icmp ne v0, v3  ; v3 = 0
;     return v5
; }

function %ult_one(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i8 1
    v2 = icmp ult v0, v1
    return v2
}

; function %ult_one(i8) -> i8 fast {
; block0(v0: i8):
;     v3 = iconst.i8 0
;     v4 = icmp eq v0, v3  ; v3 = 0
;     return v4
; }

function %byte_icmp_ucmp(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i8 0
    v2 = icmp sge v0, v1
    v3 = icmp eq v2, v1
    return v3
}

; function %byte_icmp_ucmp(i8) -> i8 fast {
; block0(v0: i8):
;     v1 = iconst.i8 0
;     v4 = icmp slt v0, v1  ; v1 = 0
;     return v4
; }

function %eq_one_of_icmp(i8) -> i8 fast {
block0(v0: i8):
    v1 = iconst.i8 5
    v2 = icmp eq v0, v1
    v3 = iconst.i8 1
    v4 = icmp eq v2, v3
    return v4
}

; function %eq_one_of_icmp(i8) -> i8 fast {
; block0(v0: i8):
;     v1 = iconst.i8 5
;     v2 = icmp eq v0, v1  ; v1 = 5
;     return v2
; }

function %ne_one_of_icmp(i8) -> i8 fast {
block0(v0: i8):
    v1 = iconst.i8 5
    v2 = icmp eq v0, v1
    v3 = iconst.i8 1
    v4 = icmp ne v2, v3
    return v4
}

; function %ne_one_of_icmp(i8) -> i8 fast {
; block0(v0: i8):
;     v1 = iconst.i8 5
;     v5 = icmp ne v0, v1  ; v1 = 5
;     return v5
; }

function %negate_lt(i8, i8) -> i8 fast {
block0(v0: i8, v1: i8):
    v2 = icmp ult v0, v1
    v3 = iconst.i8 1
    v4 = icmp ne v2, v3
    return v4
}

; function %negate_lt(i8, i8) -> i8 fast {
; block0(v0: i8, v1: i8):
;     v5 = icmp uge v0, v1
;     return v5
; }
