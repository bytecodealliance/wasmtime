test optimize precise-output
set opt_level=speed
target x86_64

function %remove_trapz() {
block0:
    v0 = iconst.i32 1
    trapz v0, user42
    return
}

; function %remove_trapz() fast {
; block0:
;     return
; }

function %remove_trapnz() {
block0:
    v0 = iconst.i32 0
    trapnz v0, user42
    return
}

; function %remove_trapnz() fast {
; block0:
;     return
; }

function %cprop_uadd_overflow_trap() -> i64 {
block0:
    v0 = iconst.i64 2
    v1 = iconst.i64 3
    v2 = uadd_overflow_trap v0, v1, user42
    return v2
}

; function %cprop_uadd_overflow_trap() -> i64 fast {
; block0:
;     v3 = iconst.i64 5
;     v2 -> v3
;     return v3  ; v3 = 5
; }

function %uadd_overflow_trap_of_uextends(i32, i32) -> i64 {
block0(v0: i32, v1: i32):
    v2 = uextend.i64 v0
    v3 = uextend.i64 v1
    v4 = uadd_overflow_trap v2, v3, user42
    return v4
}

; function %uadd_overflow_trap_of_uextends(i32, i32) -> i64 fast {
; block0(v0: i32, v1: i32):
;     v2 = uextend.i64 v0
;     v3 = uextend.i64 v1
;     v5 = iadd v2, v3
;     v4 -> v5
;     return v5
; }

;; Test that if we replace a side effectful instruction with a pure one, we then
;; do further rewrites and GVN and all that on the pure instruction.
function %gvn_after_uadd_overflow_trap_to_iadd(i32, i32) -> i64, i64 {
block0(v0: i32, v1: i32):
    v2 = uextend.i64 v0
    v3 = uextend.i64 v1
    v4 = iadd v2, v3
    v5 = uextend.i64 v0
    v6 = uextend.i64 v1
    v7 = uadd_overflow_trap v5, v6, user42
    return v4, v7
}

; function %gvn_after_uadd_overflow_trap_to_iadd(i32, i32) -> i64, i64 fast {
; block0(v0: i32, v1: i32):
;     v2 = uextend.i64 v0
;     v3 = uextend.i64 v1
;     v4 = iadd v2, v3
;     v7 -> v4
;     return v4, v4
; }

function %cprop_udiv() -> i32 {
block0:
    v0 = iconst.i32 13
    v1 = iconst.i32 7
    v2 = udiv v0, v1
    return v2
}

; function %cprop_udiv() -> i32 fast {
; block0:
;     v18 = iconst.i32 1
;     v2 -> v18
;     return v18  ; v18 = 1
; }

function %cprop_sdiv() -> i32 {
block0:
    v0 = iconst.i32 -7
    v1 = iconst.i32 7
    v2 = sdiv v0, v1
    return v2
}

; function %cprop_sdiv() -> i32 fast {
; block0:
;     v11 = iconst.i32 -1
;     v2 -> v11
;     return v11  ; v11 = -1
; }

function %udiv_by_one(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 1
    v2 = udiv v0, v1
    return v2
}

; function %udiv_by_one(i32) -> i32 fast {
; block0(v0: i32):
;     v2 -> v0
;     return v0
; }

function %sdiv_by_one(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 1
    v2 = sdiv v0, v1
    return v2
}

; function %sdiv_by_one(i32) -> i32 fast {
; block0(v0: i32):
;     v2 -> v0
;     return v0
; }

;;;;;;;;;; Tests for `simplify_skeleton` TODOs ;;;;;;;;;;;;
;;
;; What follows are tests for patterns that `simplify_skeleton` *should* clean
;; up, but is unable to at this moment in time.

function %int_min_sdiv_neg_one() -> i32 {
block0():
    v0 = iconst.i32 0x80000000
    v1 = iconst.i32 -1
    v2 = sdiv v0, v1
    return v2
}

; function %int_min_sdiv_neg_one() -> i32 fast {
; block0:
;     v0 = iconst.i32 -2147483648
;     v1 = iconst.i32 -1
;     v2 = sdiv v0, v1  ; v0 = -2147483648, v1 = -1
;     return v2
; }

function %sdiv_zero(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = sdiv v0, v1
    return v2
}

; function %sdiv_zero(i32) -> i32 fast {
; block0(v0: i32):
;     v1 = iconst.i32 0
;     v2 = sdiv v0, v1  ; v1 = 0
;     return v2
; }

function %udiv_zero(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = udiv v0, v1
    return v2
}

; function %udiv_zero(i32) -> i32 fast {
; block0(v0: i32):
;     v1 = iconst.i32 0
;     v2 = udiv v0, v1  ; v1 = 0
;     return v2
; }

function %always_trapping_trapz() -> i32 {
block0:
    v0 = iconst.i32 0
    trapz v0, user42
    return v0
}

; function %always_trapping_trapz() -> i32 fast {
; block0:
;     v0 = iconst.i32 0
;     trapz v0, user42  ; v0 = 0
;     return v0  ; v0 = 0
; }

function %always_trapping_trapnz() -> i32 {
block0:
    v0 = iconst.i32 1
    trapnz v0, user42
    return v0
}

; function %always_trapping_trapnz() -> i32 fast {
; block0:
;     v0 = iconst.i32 1
;     trapnz v0, user42  ; v0 = 1
;     return v0  ; v0 = 1
; }

function %always_trapping_uadd_overflow_trap() -> i32 {
block0:
    v0 = iconst.i32 0xffffffff
    v1 = iconst.i32 1
    v2 = uadd_overflow_trap v0, v1, user42
    return v2
}

; function %always_trapping_uadd_overflow_trap() -> i32 fast {
; block0:
;     v0 = iconst.i32 -1
;     v1 = iconst.i32 1
;     v2 = uadd_overflow_trap v0, v1, user42  ; v0 = -1, v1 = 1
;     return v2
; }

