test optimize
set opt_level=speed
target x86_64

function %f0(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 4
    v2 = imul v0, v1
    ; check: v3 = iconst.i32 2
    ; check: v4 = ishl v0, v3  ; v3 = 2
    ; check: return v4
    return v2
}

function %double_ineg(i32) -> i32 {
block0(v0: i32):
    v1 = ineg v0
    v2 = ineg v1
    return v2
    ; check: return v0
}

function %add_ineg(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ineg v1
    v3 = iadd v0, v2
    return v3
    ; check: v4 = isub v0, v1
    ; check: return v4
}

function %ineg_add(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ineg v0
    v3 = iadd v2, v1
    return v3
    ; check: v4 = isub v1, v0
    ; check: return v4
}

function %sub_ineg(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ineg v1
    v3 = isub v0, v2
    return v3
    ; check: v4 = iadd v0, v1
    ; check: return v4
}

function %sub_then_ineg(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = isub v0, v1
    v3 = ineg v2
    return v3
    ; check: v4 = isub v1, v0
    ; check: return v4
}

function %imul_ineg_cancel(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ineg v0
    v3 = ineg v1
    v4 = imul v2, v3
    return v4
    ; check: v5 = imul v0, v1
    ; check: return v5
}

function %iabs_ineg(i32) -> i32 {
block0(v0: i32):
    v1 = ineg v0
    v2 = iabs v1
    return v2
    ; check: v3 = iabs v0
    ; check: return v3
}

function %iabs_iabs(i32) -> i32 {
block0(v0: i32):
    v1 = iabs v0
    v2 = iabs v1
    return v2
    ; check: return v1
}

function %isub_self(i32) -> i32 {
block0(v0: i32):
    v1 = isub v0, v0
    return v1
    ; check: v2 = iconst.i32 0
    ; check: return v2
}

function %zero_plus(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = iadd v1, v0
    return v2
    ; check: return v0
}

function %zero_times(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = imul v1, v0
    return v2
    ; check: return v1
}

function %one_times(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 1
    v2 = imul v1, v0
    return v2
    ; check: return v0
}

function %two_times(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 2
    v2 = imul v1, v0
    return v2
    ; check: v6 = iadd v0, v0
    ; check: return v6
}

function %mul2_ne_add(i32, i32) -> i8 {
block0(v0: i32, v1: i32):
    v2 = iconst.i32 2
    v3 = imul v0, v2
    v4 = iadd v1, v0
    v5 = icmp ne v3, v4
    return v5
    ; check: v11 = icmp ne v0, v1
    ; check: return v11
}

function %mul_minus_one(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0xffff_ffff ; -1
    v2 = imul v0, v1
    return v2
    ; check: v3 = ineg v0
    ; check: return v3
}

function %mul_minus_one_commuted(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0xffff_ffff ; -1
    v2 = imul v1, v0
    return v2
    ; check: v4 = ineg v0
    ; check: return v4
}

function %ineg_not_plus_one(i32) -> i32 {
block0(v0: i32):
    v1 = bnot v0
    v2 = iconst.i32 1
    v3 = iadd v1, v2
    return v3
}

; check: v4 = ineg v0
; check: return v4

function %ineg_not_plus_one_reverse(i32) -> i32 {
block0(v0: i32):
    v1 = bnot v0
    v2 = iconst.i32 1
    v3 = iadd v2, v1
    return v3
}

; check: v5 = ineg v0
; check: return v5

function %ineg_not_minus_neg_1(i32) -> i32 {
block0(v0: i32):
    v1 = bnot v0
    v2 = iconst.i32 -1
    v3 = isub v1, v2
    return v3
}

; check: v6 = ineg v0
; check: return v6

function %ineg_not_sub_one(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 1
    v2 = isub v0, v1
    v3 = bnot v2
    return v3
}

; check: v4 = ineg v0
; check: return v4

function %ineg_not_add_neg_one(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 -1
    v2 = iadd v0, v1
    v3 = bnot v2
    return v3
}

; check: v4 = ineg v0
; check: return v4

function %ineg_not_add_neg_one_reverse(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 -1
    v2 = iadd v1, v0
    v3 = bnot v2
    return v3
}

; check: v6 = ineg v0
; check: return v6

function %byte_sub_smax_twice(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i8 127
    v2 = isub v0, v1
    v3 = isub v2, v1
    return v3
}

; check: v6 = iconst.i8 2
; check: v7 = iadd v0, v6  ; v6 = 2
; check: return v7

function %double_fneg(f32) -> f32 {
block0(v1: f32):
    v2 = fneg v1
    v3 = fneg v2
    return v3
}

; check: return v1

function %fma_double_fneg(f32, f32, f32) -> f32 {
block0(v1: f32, v2: f32, v3: f32):
    v4 = fneg v1
    v5 = fneg v2
    v6 = fma v4, v5, v3
    return v6
}

; check: v7 = fma v1, v2, v3
; check: return v7

function %fmul_double_fneg(f32, f32) -> f32 {
block0(v1: f32, v2: f32):
    v3 = fneg v1
    v4 = fneg v2
    v5 = fmul v3, v4
    return v5
}

; check: v6 = fmul v1, v2
; check: return v6

function %manual_smulhi_32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = sextend.i64 v0
    v3 = sextend.i64 v1
    v4 = imul v2, v3
    v5 = iconst.i32 32
    v6 = sshr v4, v5
    v7 = ireduce.i32 v6
    return v7
}

; check: v8 = smulhi v0, v1
; check: return v8

function %manual_smulhi_64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = sextend.i128 v0
    v3 = sextend.i128 v1
    v4 = imul v2, v3
    v5 = iconst.i32 64
    v6 = sshr v4, v5
    v7 = ireduce.i64 v6
    return v7
}

; check: v8 = smulhi v0, v1
; check: return v8

function %manual_umulhi_32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = uextend.i64 v0
    v3 = uextend.i64 v1
    v4 = imul v2, v3
    v5 = iconst.i32 32
    v6 = ushr v4, v5
    v7 = ireduce.i32 v6
    return v7
}

; check: v8 = umulhi v0, v1
; check: return v8

function %manual_umulhi_64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = uextend.i128 v0
    v3 = uextend.i128 v1
    v4 = imul v2, v3
    v5 = iconst.i32 64
    v6 = ushr v4, v5
    v7 = ireduce.i64 v6
    return v7
}

; check: v8 = umulhi v0, v1
; check: return v8

function %u64_widening_mul(i64, i64, i64) {
block0(v0: i64, v1: i64, v2: i64):
    v3 = uextend.i128 v1
    v4 = uextend.i128 v2
    v5 = imul v3, v4
    v6 = iconst.i32 64
    v7 = ushr v5, v6
    v8 = ireduce.i64 v7
    v9 = ireduce.i64 v5
    store.i64 v9, v0
    store.i64 v8, v0+8
    return
}

; check: v15 = imul v1, v2
; check: store v15, v0
; check: v10 = umulhi v1, v2
; check: store v10, v0+8

function %char_plus_one(i8) -> i8 {
block0(v0: i8):
    v1 = sextend.i32 v0
    v2 = iconst.i32 257
    v3 = iadd v1, v2
    v4 = ireduce.i8 v3
    return v4
}

; check: v7 = iconst.i8 1
; check: v8 = iadd v0, v7  ; v7 = 1
; check: return v8

;; Adding three `short`s together and storing them in a `short`,
;; which in C involves extending them to `int`s in the middle.
function %extend_iadd_iadd_reduce(i16, i16, i16) -> i16 {
block0(v0: i16, v1: i16, v2: i16):
    v3 = sextend.i32 v0
    v4 = sextend.i32 v1
    v5 = sextend.i32 v2
    v6 = iadd v3, v4
    v7 = iadd v6, v5
    v8 = ireduce.i16 v7
    return v8
}

; check: v12 = iadd v0, v1
; check: v15 = iadd v12, v2
; check: return v15
