test interpret
test run
target aarch64
target s390x
target x86_64
target riscv64
target riscv64 has_c has_zcb
target pulley32
target pulley32be
target pulley64
target pulley64be

; This test is also a regression test for aarch64.
; We were not correctly handling the fact that the rhs constant value
; overflows its type when viewed as a signed value, and thus encoding the wrong
; value into the resulting instruction.
function %overflow_rhs_const(i8) -> i8 {
block0(v0: i8):
    v1 = iconst.i8 192
    v2 = icmp sge v0, v1
    return v2
}
; run: %overflow_rhs_const(49) == 1
; run: %overflow_rhs_const(-65) == 0

function %ugt_sub_swap(i32, i32) -> i8 fast {
block0(v0: i32, v1: i32):
    v2 = isub v0, v1
    v3 = icmp ugt v2, v0
    return v3
}

; run: %ugt_sub_swap(1, -49) == 1
; run: %ugt_sub_swap(1, 2) == 1
; run: %ugt_sub_swap(2, 1) == 0

function %ule_sub_swap(i32, i32) -> i8 fast {
block0(v0: i32, v1: i32):
    v2 = isub v0, v1
    v3 = icmp ule v2, v0
    return v3
}

; run: %ule_sub_swap(1, -88) == 0
; run: %ule_sub_swap(1, 2) == 0
; run: %ule_sub_swap(2, 1) == 1

function %fold_cmp_over_nots1(i8, i8) -> i8 {
block0(v0: i8, v2: i8):
    v1 = bnot v0
    v3 = bnot v2
    v4 = icmp ult v1, v3
    return v4
}

; run: %fold_cmp_over_nots1(2, 1) == 1

function %fold_cmp_over_nots2(i8, i8) -> i8 {
block0(v0: i8, v2: i8):
    v1 = bnot v0
    v3 = bnot v2
    v4 = icmp slt v1, v3
    return v4
}

; run: %fold_cmp_over_nots2(2, 1) == 1

