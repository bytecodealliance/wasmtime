test interpret
test run
target aarch64
target x86_64
target x86_64 has_avx
target s390x
target riscv64
target riscv64 has_c has_zcb
target pulley32
target pulley32be
target pulley64
target pulley64be

function %fneg_f32(f32) -> f32 {
block0(v0: f32):
    v1 = fneg v0
    return v1
}
; run: %fneg_f32(0x9.0) == -0x9.0
; run: %fneg_f32(-0x9.0) == 0x9.0
; run: %fneg_f32(0x0.0) == -0x0.0
; run: %fneg_f32(-0x0.0) == 0x0.0

; F32 Inf
; run: %fneg_f32(Inf) == -Inf
; run: %fneg_f32(-Inf) == +Inf

; F32 Epsilon  / Max / Min Positive
; run: %fneg_f32(0x1.000000p-23) == -0x1.000000p-23
; run: %fneg_f32(-0x1.000000p-23) == 0x1.000000p-23
; run: %fneg_f32(0x1.fffffep127) == -0x1.fffffep127
; run: %fneg_f32(-0x1.fffffep127) == 0x1.fffffep127
; run: %fneg_f32(0x1.000000p-126) == -0x1.000000p-126
; run: %fneg_f32(-0x1.000000p-126) == 0x1.000000p-126

; F32 Subnormals
; run: %fneg_f32(0x0.800000p-126) == -0x0.800000p-126
; run: %fneg_f32(-0x0.800000p-126) == 0x0.800000p-126
; run: %fneg_f32(0x0.000002p-126) == -0x0.000002p-126
; run: %fneg_f32(-0x0.000002p-126) == 0x0.000002p-126

; F32 NaN's
; Unlike with other operations fneg is guaranteed to only affect the sign bit
; run: %fneg_f32(+NaN) == -NaN
; run: %fneg_f32(-NaN) == +NaN
; run: %fneg_f32(+NaN:0x0) == -NaN:0x0
; run: %fneg_f32(+NaN:0x1) == -NaN:0x1
; run: %fneg_f32(+NaN:0x300001) == -NaN:0x300001
; run: %fneg_f32(-NaN:0x0) == +NaN:0x0
; run: %fneg_f32(-NaN:0x1) == +NaN:0x1
; run: %fneg_f32(-NaN:0x300001) == +NaN:0x300001
; run: %fneg_f32(+sNaN:0x1) == -sNaN:0x1
; run: %fneg_f32(-sNaN:0x1) == +sNaN:0x1
; run: %fneg_f32(+sNaN:0x200001) == -sNaN:0x200001
; run: %fneg_f32(-sNaN:0x200001) == +sNaN:0x200001



function %fneg_f64(f64) -> f64 {
block0(v0: f64):
    v1 = fneg v0
    return v1
}
; run: %fneg_f64(0x9.0) == -0x9.0
; run: %fneg_f64(-0x9.0) == 0x9.0
; run: %fneg_f64(0x0.0) == -0x0.0
; run: %fneg_f64(-0x0.0) == 0x0.0

; F64 Inf
; run: %fneg_f64(+Inf) == -Inf
; run: %fneg_f64(-Inf) == +Inf

; F64 Epsilon / Max / Min Positive
; run: %fneg_f64(0x1.0000000000000p-52) == -0x1.0000000000000p-52
; run: %fneg_f64(-0x1.0000000000000p-52) == 0x1.0000000000000p-52
; run: %fneg_f64(0x1.fffffffffffffp1023) == -0x1.fffffffffffffp1023
; run: %fneg_f64(-0x1.fffffffffffffp1023) == 0x1.fffffffffffffp1023
; run: %fneg_f64(0x1.0000000000000p-1022) == -0x1.0000000000000p-1022
; run: %fneg_f64(-0x1.0000000000000p-1022) == 0x1.0000000000000p-1022

; F64 Subnormals
; run: %fneg_f64(0x0.8000000000000p-1022) == -0x0.8000000000000p-1022
; run: %fneg_f64(-0x0.8000000000000p-1022) == 0x0.8000000000000p-1022
; run: %fneg_f64(0x0.0000000000001p-1022) == -0x0.0000000000001p-1022
; run: %fneg_f64(-0x0.0000000000001p-1022) == 0x0.0000000000001p-1022

; F64 NaN's
; Unlike with other operations fneg is guaranteed to only affect the sign bit
; run: %fneg_f64(+NaN) == -NaN
; run: %fneg_f64(-NaN) == +NaN
; run: %fneg_f64(+NaN:0x0) == -NaN:0x0
; run: %fneg_f64(+NaN:0x1) == -NaN:0x1
; run: %fneg_f64(+NaN:0x4000000000001) == -NaN:0x4000000000001
; run: %fneg_f64(-NaN:0x0) == +NaN:0x0
; run: %fneg_f64(-NaN:0x1) == +NaN:0x1
; run: %fneg_f64(-NaN:0x4000000000001) == +NaN:0x4000000000001
; run: %fneg_f64(+sNaN:0x1) == -sNaN:0x1
; run: %fneg_f64(-sNaN:0x1) == +sNaN:0x1
; run: %fneg_f64(+sNaN:0x4000000000001) == -sNaN:0x4000000000001
; run: %fneg_f64(-sNaN:0x4000000000001) == +sNaN:0x4000000000001
