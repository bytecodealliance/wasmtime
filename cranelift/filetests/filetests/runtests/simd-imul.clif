test interpret
test run
target aarch64
target s390x
target x86_64
target x86_64 skylake
set enable_multi_ret_implicit_sret
target riscv64 has_v
target riscv64 has_v has_c has_zcb
target pulley32
target pulley32be
target pulley64
target pulley64be

function %imul_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0:i16x8, v1:i16x8):
    v2 = imul v0, v1
    return v2
}
; run: %imul_i16x8([1 2 3 4 5 6 7 8], [1 -2 3 -4 5 -6 7 -8]) == [1 -4 9 -16 25 -36 49 -64]
; run: %imul_i16x8([-1 0 1 0x7f_ff 0 0 0 0], [2 2 2 2 0 0 0 0]) == [-2 0 2 0xff_fe 0 0 0 0]


function %imul_i32x4(i32x4, i32x4) -> i32x4 {
block0(v0:i32x4, v1:i32x4):
    v2 = imul v0, v1
    return v2
}
; run: %imul_i32x4([1 2 3 4], [1 -2 3 -4]) == [1 -4 9 -16]

; run: %imul_i32x4([-1 0 1 0x80_00_00_01], [2 2 2 2]) == [-2 0 2 2]
; Note above how bits are truncated: 0x80_00_00_01 * 2 == 0x1_00_00_00_02, but
; the leading 1 is dropped.



function %imul_i64x2(i64x2, i64x2) -> i64x2 {
block0(v0:i64x2, v1:i64x2):
    v2 = imul v0, v1
    return v2
}
; run: %imul_i64x2([1 1], [1 2]) == [1 2]
; run: %imul_i64x2([2 2], [-1 5]) == [-2 10]
