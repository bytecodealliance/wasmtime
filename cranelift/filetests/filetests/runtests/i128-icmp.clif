test interpret
test run
set enable_llvm_abi_extensions=true
target aarch64
target s390x
target x86_64
target riscv64
target riscv64 has_c has_zcb
target pulley32
target pulley32be
target pulley64
target pulley64be

function %icmp_eq_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
    v2 = icmp.i128 eq v0, v1
    return v2
}
; run: %icmp_eq_i128(0, 0) == 1
; run: %icmp_eq_i128(-1, -1) == 1
; run: %icmp_eq_i128(-1, 0) == 0
; run: %icmp_eq_i128(-1, 0x00000000_00000000_FFFFFFFF_FFFFFFFF) == 0
; run: %icmp_eq_i128(0x00000000_00000000_FFFFFFFF_FFFFFFFF, -1) == 0
; run: %icmp_eq_i128(0xFFFFFFFF_FFFFFFFF_00000000_00000000, -1) == 0
; run: %icmp_eq_i128(0xDECAFFFF_C0FFEEEE_C0FFEEEE_DECAFFFF, 0xDECAFFFF_C0FFEEEE_C0FFEEEE_DECAFFFF) == 1
; run: %icmp_eq_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF, 0x00000000_00000001_00000000_00000001) == 0
; run: %icmp_eq_i128(0x00000000_00000001_FFFFFFFF_FFFFFFFF, 0x00000000_00000001_00000000_00000001) == 0
; run: %icmp_eq_i128(0xffffffff_ffffffff, 0) == 0

; This is a regression test for aarch64, see: https://github.com/bytecodealliance/wasmtime/issues/4705
; run: %icmp_eq_i128(36893488147419103231, 0) == 0


function %icmp_ne_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 ne v0, v1
  return v2
}
; run: %icmp_ne_i128(0, 0) == 0
; run: %icmp_ne_i128(-1, -1) == 0
; run: %icmp_ne_i128(-1, 0) == 1
; run: %icmp_ne_i128(-1, 0x00000000_00000000_FFFFFFFF_FFFFFF) == 1
; run: %icmp_ne_i128(0x00000000_00000000_FFFFFFFF_FFFFFFFF, -1) == 1
; run: %icmp_ne_i128(0xFFFFFFFF_FFFFFFFF_00000000_00000000, -1) == 1
; run: %icmp_ne_i128(0xDECAFFFF_C0FFEEEE_C0FFEEEE_DECAFFFF, 0xDECAFFFF_C0FFEEEE_C0FFEEEE_DECAFFFF) == 0
; run: %icmp_ne_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF, 0x00000000_00000001_00000000_00000001) == 1
; run: %icmp_ne_i128(0x00000000_00000001_FFFFFFFF_FFFFFFFF, 0x00000000_00000001_00000000_00000001) == 1
; run: %icmp_ne_i128(0xffffffff_ffffffff, 0) == 1



function %icmp_slt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 slt v0, v1
  return v2
}
; run: %icmp_slt_i128(0, 0) == 0
; run: %icmp_slt_i128(1, 1) == 0
; run: %icmp_slt_i128(0, 1) == 1
; run: %icmp_slt_i128(-1, 0) == 1
; run: %icmp_slt_i128(0, -1) == 0
; run: %icmp_slt_i128(-1, -1) == 0
; run: %icmp_slt_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 1
; run: %icmp_slt_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 1
; run: %icmp_slt_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 0
; run: %icmp_slt_i128(0xffffffff_ffffffff, 0) == 0


function %icmp_ult_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
    v2 = icmp.i128 ult v0, v1
    return v2
}
; run: %icmp_ult_i128(0, 0) == 0
; run: %icmp_ult_i128(1, 1) == 0
; run: %icmp_ult_i128(0, 1) == 1
; run: %icmp_ult_i128(-1, 0) == 0
; run: %icmp_ult_i128(0, -1) == 1
; run: %icmp_ult_i128(-1, -1) == 0
; run: %icmp_ult_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 1
; run: %icmp_ult_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 1
; run: %icmp_ult_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 0
; run: %icmp_ult_i128(0xffffffff_ffffffff, 0) == 0


function %icmp_sle_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sle v0, v1
  return v2
}
; run: %icmp_sle_i128(0, 0) == 1
; run: %icmp_sle_i128(1, 1) == 1
; run: %icmp_sle_i128(0, 1) == 1
; run: %icmp_sle_i128(-1, 0) == 1
; run: %icmp_sle_i128(0, -1) == 0
; run: %icmp_sle_i128(-1, -1) == 1
; run: %icmp_sle_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 1
; run: %icmp_sle_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 1
; run: %icmp_sle_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 0
; run: %icmp_sle_i128(0xffffffff_ffffffff, 0) == 0


function %icmp_ule_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
    v2 = icmp.i128 ule v0, v1
    return v2
}
; run: %icmp_ule_i128(0, 0) == 1
; run: %icmp_ule_i128(1, 1) == 1
; run: %icmp_ule_i128(0, 1) == 1
; run: %icmp_ule_i128(-1, 0) == 0
; run: %icmp_ule_i128(0, -1) == 1
; run: %icmp_ule_i128(-1, -1) == 1
; run: %icmp_ule_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 1
; run: %icmp_ule_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 1
; run: %icmp_ule_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 0
; run: %icmp_ule_i128(0xffffffff_ffffffff, 0) == 0


function %icmp_sgt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sgt v0, v1
  return v2
}
; run: %icmp_sgt_i128(0, 0) == 0
; run: %icmp_sgt_i128(1, 1) == 0
; run: %icmp_sgt_i128(0, 1) == 0
; run: %icmp_sgt_i128(-1, 0) == 0
; run: %icmp_sgt_i128(0, -1) == 1
; run: %icmp_sgt_i128(-1, -1) == 0
; run: %icmp_sgt_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 0
; run: %icmp_sgt_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 0
; run: %icmp_sgt_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 1
; run: %icmp_sgt_i128(0xffffffff_ffffffff, 0) == 1


function %icmp_ugt_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
    v2 = icmp.i128 ugt v0, v1
    return v2
}
; run: %icmp_ugt_i128(0, 0) == 0
; run: %icmp_ugt_i128(1, 1) == 0
; run: %icmp_ugt_i128(0, 1) == 0
; run: %icmp_ugt_i128(-1, 0) == 1
; run: %icmp_ugt_i128(0, -1) == 0
; run: %icmp_ugt_i128(-1, -1) == 0
; run: %icmp_ugt_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 0
; run: %icmp_ugt_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 0
; run: %icmp_ugt_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 1
; run: %icmp_ugt_i128(0xffffffff_ffffffff, 0) == 1


function %icmp_sge_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
  v2 = icmp.i128 sge v0, v1
  return v2
}
; run: %icmp_sge_i128(0, 0) == 1
; run: %icmp_sge_i128(1, 1) == 1
; run: %icmp_sge_i128(0, 1) == 0
; run: %icmp_sge_i128(-1, 0) == 0
; run: %icmp_sge_i128(0, -1) == 1
; run: %icmp_sge_i128(-1, -1) == 1
; run: %icmp_sge_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 0
; run: %icmp_sge_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 0
; run: %icmp_sge_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 1
; run: %icmp_sge_i128(0xffffffff_ffffffff, 0) == 1


function %icmp_uge_i128(i128, i128) -> i8 {
block0(v0: i128, v1: i128):
    v2 = icmp.i128 uge v0, v1
    return v2
}
; run: %icmp_uge_i128(0, 0) == 1
; run: %icmp_uge_i128(1, 1) == 1
; run: %icmp_uge_i128(0, 1) == 0
; run: %icmp_uge_i128(-1, 0) == 1
; run: %icmp_uge_i128(0, -1) == 0
; run: %icmp_uge_i128(-1, -1) == 1
; run: %icmp_uge_i128(0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFD, 0xFFFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == 0
; run: %icmp_uge_i128(0xC0FFEEEE_C0FFEEEE_00000000_00000000, 0xDECAFFFF_DECAFFFF_00000000_00000000) == 0
; run: %icmp_uge_i128(0xDECAFFFF_DECAFFFF_00000000_00000000, 0xC0FFEEEE_C0FFEEEE_00000000_00000000) == 1
; run: %icmp_uge_i128(0xffffffff_ffffffff, 0) == 1


; Icmp Imm Tests
function %icmp_imm_eq_i128() -> i8 {
block0:
    v11 = iconst.i64 0x0
    v12 = iconst.i64 0x0
    v1 = iconcat v11, v12
    v10 = icmp_imm.i128 eq v1, 0x0
    return v10
}

; run: %icmp_imm_eq_i128() == 1

function %icmp_imm_ne_i128() -> i8 {
block0:
    v11 = iconst.i64 0x0
    v12 = iconst.i64 0x0
    v1 = iconcat v11, v12
    v10 = icmp_imm.i128 ne v1, 0x1
    return v10
}

; run: %icmp_imm_ne_i128() == 1
