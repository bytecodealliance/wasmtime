test interpret
test run
target aarch64
target s390x
target x86_64
target riscv64
target riscv64 has_c has_zcb
target pulley32
target pulley32be
target pulley64
target pulley64be

function %select_icmp_i8_f32(i8, f32, f32) -> f32 {
block0(v0: i8, v1: f32, v2: f32):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}
; run: %select_icmp_i8_f32(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i8_f32(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i8_f32(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i8_f32(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i8_f32(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i8_f32(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i8_f32(42, 0x0.800000p-126, -0x0.800000p-126) == 0x0.800000p-126
; run: %select_icmp_i8_f32(10, 0x0.800000p-126, -0x0.800000p-126) == -0x0.800000p-126


function %select_icmp_i8_f64(i8, f64, f64) -> f64 {
block0(v0: i8, v1: f64, v2: f64):
  v3 = iconst.i8 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}
; run: %select_icmp_i8_f64(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i8_f64(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i8_f64(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i8_f64(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i8_f64(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i8_f64(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i8_f64(42, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == 0x0.8000000000000p-1022
; run: %select_icmp_i8_f64(10, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == -0x0.8000000000002p-1022


function %select_icmp_i16_f32(i16, f32, f32) -> f32 {
block0(v0: i16, v1: f32, v2: f32):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}
; run: %select_icmp_i16_f32(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i16_f32(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i16_f32(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i16_f32(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i16_f32(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i16_f32(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i16_f32(42, 0x0.800000p-126, -0x0.800000p-126) == 0x0.800000p-126
; run: %select_icmp_i16_f32(10, 0x0.800000p-126, -0x0.800000p-126) == -0x0.800000p-126


function %select_icmp_i16_f64(i16, f64, f64) -> f64 {
block0(v0: i16, v1: f64, v2: f64):
  v3 = iconst.i16 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}
; run: %select_icmp_i16_f64(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i16_f64(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i16_f64(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i16_f64(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i16_f64(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i16_f64(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i16_f64(42, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == 0x0.8000000000000p-1022
; run: %select_icmp_i16_f64(10, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == -0x0.8000000000002p-1022


function %select_icmp_i32_f32(i32, f32, f32) -> f32 {
block0(v0: i32, v1: f32, v2: f32):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}
; run: %select_icmp_i32_f32(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i32_f32(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i32_f32(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i32_f32(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i32_f32(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i32_f32(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i32_f32(42, 0x0.800000p-126, -0x0.800000p-126) == 0x0.800000p-126
; run: %select_icmp_i32_f32(10, 0x0.800000p-126, -0x0.800000p-126) == -0x0.800000p-126


function %select_icmp_i32_f64(i32, f64, f64) -> f64 {
block0(v0: i32, v1: f64, v2: f64):
  v3 = iconst.i32 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}
; run: %select_icmp_i32_f64(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i32_f64(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i32_f64(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i32_f64(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i32_f64(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i32_f64(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i32_f64(42, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == 0x0.8000000000000p-1022
; run: %select_icmp_i32_f64(10, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == -0x0.8000000000002p-1022


function %select_icmp_i64_f32(i64, f32, f32) -> f32 {
block0(v0: i64, v1: f32, v2: f32):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.f32 v4, v1, v2
  return v5
}
; run: %select_icmp_i64_f32(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i64_f32(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i64_f32(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i64_f32(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i64_f32(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i64_f32(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i64_f32(42, 0x0.800000p-126, -0x0.800000p-126) == 0x0.800000p-126
; run: %select_icmp_i64_f32(10, 0x0.800000p-126, -0x0.800000p-126) == -0x0.800000p-126


function %select_icmp_i64_f64(i64, f64, f64) -> f64 {
block0(v0: i64, v1: f64, v2: f64):
  v3 = iconst.i64 42
  v4 = icmp eq v0, v3
  v5 = select.f64 v4, v1, v2
  return v5
}
; run: %select_icmp_i64_f64(42, 0x0.0, 0x1.0) == 0x0.0
; run: %select_icmp_i64_f64(10, 0x0.0, 0x1.0) == 0x1.0
; run: %select_icmp_i64_f64(42, +Inf, -Inf) == +Inf
; run: %select_icmp_i64_f64(10, +Inf, -Inf) == -Inf
; run: %select_icmp_i64_f64(42, +NaN, -NaN) == +NaN
; run: %select_icmp_i64_f64(10, +NaN, -NaN) == -NaN
; run: %select_icmp_i64_f64(42, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == 0x0.8000000000000p-1022
; run: %select_icmp_i64_f64(10, 0x0.8000000000000p-1022, -0x0.8000000000002p-1022) == -0x0.8000000000002p-1022
