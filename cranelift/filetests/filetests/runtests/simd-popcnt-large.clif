test interpret
test run
target s390x
set enable_multi_ret_implicit_sret
target riscv64 has_v
target riscv64 has_v has_c has_zcb

;; This file contains tests for the popcnt instruction with element sizes larger than i8.
;; X86 does not support these yet, but we should merge this with the main file once it does.

function %popcnt_i16x8(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = popcnt v0
    return v1
}
; run: %popcnt_i16x8([1 1 1 1 1 1 1 1]) == [1 1 1 1 1 1 1 1]
; run: %popcnt_i16x8([0x4000 0x4000 0x4000 0x4000 0x4000 0x4000 0x4000 0x4000]) == [1 1 1 1 1 1 1 1]
; run: %popcnt_i16x8([-1 -1 -1 -1 -1 -1 -1 -1]) == [16 16 16 16 16 16 16 16]
; run: %popcnt_i16x8([0 0 0 0 0 0 0 0]) == [0 0 0 0 0 0 0 0]

function %popcnt_i32x4(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = popcnt v0
    return v1
}
; run: %popcnt_i32x4([1 1 1 1]) == [1 1 1 1]
; run: %popcnt_i32x4([0x40000000 0x40000000 0x40000000 0x40000000]) == [1 1 1 1]
; run: %popcnt_i32x4([-1 -1 -1 -1]) == [32 32 32 32]
; run: %popcnt_i32x4([0 0 0 0]) == [0 0 0 0]

function %popcnt_i64x2(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = popcnt v0
    return v1
}
; run: %popcnt_i64x2([1 1]) == [1 1]
; run: %popcnt_i64x2([0x4000000000000000 0x4000000000000000]) == [1 1]
; run: %popcnt_i64x2([-1 -1]) == [64 64]
; run: %popcnt_i64x2([0 0]) == [0 0]
