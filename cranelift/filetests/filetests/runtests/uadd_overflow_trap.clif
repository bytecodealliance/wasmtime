test run
test interpret
target x86_64
target aarch64
target riscv64
target riscv64 has_c has_zcb
target s390x
target pulley32
target pulley32be
target pulley64
target pulley64be

; NOTE: we don't currently have infrastructure for testing for traps, so these
; tests can only test the happy path. Once we eventually have annotations for
; expected traps, the cases here should be expanded.

function %f0(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0x7f
    v2 = uadd_overflow_trap v0, v1, user1
    return v2
}

; run: %f0(0) == 0x7f
; run: %f0(0x80) == 0xff

function %f1(i32) -> i32 {
block0(v0: i32):
    v1 = iconst.i32 0x7f
    v2 = uadd_overflow_trap v1, v0, user1
    return v2
}

; run: %f0(0) == 0x7f
; run: %f0(0x80) == 0xff

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = uadd_overflow_trap v0, v1, user1
    return v2
}

; run: %f2(0, 0) == 0x0
; run: %f2(0x80, 0x7f) == 0xff

function %f3(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 0x7f
    v2 = uadd_overflow_trap v0, v1, user1
    return v2
}

; run: %f3(0) == 0x7f
; run: %f3(0x80) == 0xff

function %f4(i64) -> i64 {
block0(v0: i64):
    v1 = iconst.i64 0x7f
    v2 = uadd_overflow_trap v1, v0, user1
    return v2
}

; run: %f4(0) == 0x7f
; run: %f4(0x80) == 0xff

function %f5(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = uadd_overflow_trap v0, v1, user1
    return v2
}

; run: %f5(0, 0) == 0x0
; run: %f5(0x80, 0x7f) == 0xff
