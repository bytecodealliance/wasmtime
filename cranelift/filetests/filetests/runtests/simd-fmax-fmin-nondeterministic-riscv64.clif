; Test the non-deterministic aspects of the SIMD arithmetic operations.
; If you change this file, you should most likely update
; simd-arithmetic-nondeterministic*.clif as well.
test run
set enable_multi_ret_implicit_sret
target riscv64 has_v
target riscv64 has_v has_c has_zcb

;; With the current implementation on RISC-V we always return a positive Canonical NaN
;; if any input is NaN. This is compatible with the spec but different from the
;; other architectures.

function %fmax_f64x2(f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2):
    v2 = fmax v0, v1
    return v2
}
; run: %fmax_f64x2([NaN:0x42 0.0], [0x1.0 0.0]) == [NaN 0.0]
; run: %fmax_f64x2([-NaN NaN], [0x0.0 0x100.0]) == [NaN NaN]
; run: %fmax_f64x2([NaN 0.0], [0.0 0.0]) == [NaN 0.0]
; run: %fmax_f64x2([-NaN 0.0], [0x1.0 0.0]) == [NaN 0.0]

function %fmin_f64x2(f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2):
    v2 = fmin v0, v1
    return v2
}
; run: %fmin_f64x2([-NaN 0x100.0], [0.0 NaN]) == [NaN NaN]
; run: %fmin_f64x2([NaN 0.0], [0.0 0.0]) == [NaN 0.0]
; run: %fmin_f64x2([NaN:0x42 0.0], [0x1.0 0.0]) == [NaN 0.0]
; run: %fmin_f64x2([-NaN 0.0], [0x1.0 0.0]) == [NaN 0.0]
