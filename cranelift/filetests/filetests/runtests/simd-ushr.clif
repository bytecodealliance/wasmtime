test interpret
test run
target aarch64
target s390x
target x86_64 skylake
set enable_multi_ret_implicit_sret
target riscv64 has_v
target riscv64 has_v has_c has_zcb


function %ushr_i8x16(i8x16, i32) -> i8x16 {
block0(v0: i8x16, v1: i32):
    v2 = ushr v0, v1
    return v2
}
; run: %ushr_i8x16([0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15], 1) == [0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7]
; run: %ushr_i8x16([0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15], 9) == [0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7]

function %ushr_i16x8(i16x8, i32) -> i16x8 {
block0(v0: i16x8, v1: i32):
    v2 = ushr v0, v1
    return v2
}
; run: %ushr_i16x8([0 1 2 3 4 5 6 7], 1) == [0 0 1 1 2 2 3 3]
; run: %ushr_i16x8([0 1 2 3 4 5 6 7], 17) == [0 0 1 1 2 2 3 3]
; run: %ushr_i16x8([1 2 4 -8 0 0 0 0], 1) == [0 1 2 32764 0 0 0 0]

function %ushr_i32x4(i32x4, i32) -> i32x4 {
block0(v0: i32x4, v1: i32):
    v2 = ushr v0, v1
    return v2
}
; run: %ushr_i32x4([1 2 4 8], 1) == [0 1 2 4]
; run: %ushr_i32x4([1 2 4 8], 33) == [0 1 2 4]

function %ushr_i64x2(i64x2, i32) -> i64x2 {
block0(v0: i64x2, v1: i32):
    v2 = ushr v0, v1
    return v2
}
; run: %ushr_i64x2([1 2], 1) == [0 1]
; run: %ushr_i64x2([1 2], 65) == [0 1]


function %ushr_imm_i16x8() -> i16x8 {
block0:
    v1 = vconst.i16x8 [1 2 4 -8 0 0 0 0]
    v2 = ushr_imm v1, 1
    return v2
}
; run: %ushr_imm_i16x8() == [0 1 2 32764 0 0 0 0]


function %i8x16_ushr_const(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = iconst.i32 2
    v2 = ushr v0, v1
    return v2
}
; run: %i8x16_ushr_const([0x01 0x02 0x04 0x08 0x10 0x20 0x40 0x80 0 0 0 0 0 0 0 0]) == [0 0 0x01 0x02 0x04 0x08 0x10 0x20 0 0 0 0 0 0 0 0]

function %i16x8_ushr_const(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = iconst.i32 4
    v2 = ushr v0, v1
    return v2
}
; run: %i16x8_ushr_const([0x0001 0x0002 0x0004 0x0008 0x0010 0x0020 0x0040 0x0080]) == [0 0 0 0 0x1 0x2 0x4 0x8]
; run: %i16x8_ushr_const([-1 -2 -4 -8 -16 16 0x8000 0x80f3]) == [0x0fff 0x0fff 0x0fff 0x0fff 0x0fff 1 0x0800 0x080f]

function %i32x4_ushr_const(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = iconst.i32 4
    v2 = ushr v0, v1
    return v2
}
; run: %i32x4_ushr_const([1 0xfc 0x80000000 0xf83f3000]) == [0 0xf 0x08000000 0x0f83f300]

function %i64x2_ushr_const(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i32 32
    v2 = ushr v0, v1
    return v2
}
; run: %i64x2_ushr_const([0x1 0xf]) == [0 0]
; run: %i64x2_ushr_const([0x100000000 0]) == [1 0]
; run: %i64x2_ushr_const([-1 -1]) == [0xffffffff 0xffffffff]
