test interpret
test run
target aarch64
target s390x
target x86_64
target x86_64 ssse3
target x86_64 sse42
target x86_64 sse42 has_avx
set enable_multi_ret_implicit_sret
target riscv64 has_v
target riscv64 has_v has_c has_zcb

function %band_splat_const_i8x16(i8x16) -> i8x16 {
block0(v0: i8x16):
    v1 = iconst.i8 5
    v2 = splat.i8x16 v1
    v3 = band v0, v2
    return v3
}
; run: %band_splat_const_i8x16(0x00000000000000000000000000000000) == 0x00000000000000000000000000000000
; run: %band_splat_const_i8x16(0x11111111111111111111111111111111) == 0x01010101010101010101010101010101
; run: %band_splat_const_i8x16(0x01010011000011110000000011111111) == 0x01010001000001010000000001010101
; run: %band_splat_const_i8x16(0x00000000000000001111111111111111) == 0x00000000000000000101010101010101

function %band_splat_const_i16x8(i16x8) -> i16x8 {
block0(v0: i16x8):
    v1 = iconst.i16 -16
    v2 = splat.i16x8 v1
    v3 = band v0, v2
    return v3
}
; run: %band_splat_const_i16x8(0x00000000000000000000000000000000) == 0x00000000000000000000000000000000
; run: %band_splat_const_i16x8(0x11111111111111111111111111111111) == 0x11101110111011101110111011101110
; run: %band_splat_const_i16x8(0x01010011000011110000000011111111) == 0x01000010000011100000000011101110
; run: %band_splat_const_i16x8(0x00000000000000001111111111111111) == 0x00000000000000001110111011101110

function %band_splat_const_i32x4(i32x4) -> i32x4 {
block0(v0: i32x4):
    v1 = iconst.i32 15
    v2 = splat.i32x4 v1
    v3 = band v0, v2
    return v3
}
; run: %band_splat_const_i32x4(0x00000000000000000000000000000000) == 0x00000000000000000000000000000000
; run: %band_splat_const_i32x4(0x11111111111111111111111111111111) == 0x00000001000000010000000100000001
; run: %band_splat_const_i32x4(0x01010011000011110000000011111111) == 0x00000001000000010000000000000001
; run: %band_splat_const_i32x4(0x00000000000000001111111111111111) == 0x00000000000000000000000100000001

function %band_splat_const_i64x2(i64x2) -> i64x2 {
block0(v0: i64x2):
    v1 = iconst.i64 -5
    v2 = splat.i64x2 v1
    v3 = band v2, v0
    return v3
}
; run: %band_splat_const_i64x2(0x00000000000000000000000000000000) == 0x00000000000000000000000000000000
; run: %band_splat_const_i64x2(0x11111111111111111111111111111111) == 0x11111111111111111111111111111111
; run: %band_splat_const_i64x2(0x01010011000011110000000011111111) == 0x01010011000011110000000011111111
; run: %band_splat_const_i64x2(0x00000000000000001111111111111111) == 0x00000000000000001111111111111111


function %band_splat_i8x16(i8x16, i8) -> i8x16 {
block0(v0: i8x16, v1: i8):
    v2 = splat.i8x16 v1
    v3 = band v0, v2
    return v3
}
; run: %band_splat_i8x16(0x00000000000000000000000000000000, 0x01) == 0x00000000000000000000000000000000
; run: %band_splat_i8x16(0x11111111111111111111111111111111, 0xff) == 0x11111111111111111111111111111111
; run: %band_splat_i8x16(0x01010011000011110000000011111111, 0x8e) == 0x00000000000000000000000000000000
; run: %band_splat_i8x16(0x00000000000000001111111111111111, 0xbe) == 0x00000000000000001010101010101010

function %band_splat_i16x8(i16x8, i16) -> i16x8 {
block0(v0: i16x8, v1: i16):
    v2 = splat.i16x8 v1
    v3 = band v0, v2
    return v3
}
; run: %band_splat_i16x8(0x00000000000000000000000000000000, 0x0001) == 0x00000000000000000000000000000000
; run: %band_splat_i16x8(0x11111111111111111111111111111111, 0xffff) == 0x11111111111111111111111111111111
; run: %band_splat_i16x8(0x01010011000011110000000011111111, 0x8e8e) == 0x00000000000000000000000000000000
; run: %band_splat_i16x8(0x00000000000000001111111111111111, 0xc0fe) == 0x00000000000000000010001000100010

function %band_splat_i32x4(i32x4, i32) -> i32x4 {
block0(v0: i32x4, v1: i32):
    v2 = splat.i32x4 v1
    v3 = band v0, v2
    return v3
}
; run: %band_splat_i32x4(0x00000000000000000000000000000000, 0x00000001) == 0x00000000000000000000000000000000
; run: %band_splat_i32x4(0x11111111111111111111111111111111, 0xffffffff) == 0x11111111111111111111111111111111
; run: %band_splat_i32x4(0x01010011000011110000000011111111, 0x8e8e8e8e) == 0x00000000000000000000000000000000
; run: %band_splat_i32x4(0x00000000000000001111111111111111, 0xc0ffeeee) == 0x00000000000000000011000000110000

function %band_splat_i64x2(i64x2, i64) -> i64x2 {
block0(v0: i64x2, v1: i64):
    v2 = splat.i64x2 v1
    v3 = band v2, v0
    return v3
}
; run: %band_splat_i64x2(0x00000000000000000000000000000000, 0x0000000000000001) == 0x00000000000000000000000000000000
; run: %band_splat_i64x2(0x11111111111111111111111111111111, 0xffffffffffffffff) == 0x11111111111111111111111111111111
; run: %band_splat_i64x2(0x01010011000011110000000011111111, 0x8e8e8e8e8e8e8e8e) == 0x00000000000000000000000000000000
; run: %band_splat_i64x2(0x00000000000000001111111111111111, 0xc0ffeeeec0ffeeee) == 0x00000000000000000011000000110000

function %band_splat_f32x4(f32x4, i32) -> f32x4 {
block0(v0: f32x4, v1: i32):
    v2 = bitcast.f32 v1
    v3 = splat.f32x4 v2
    v4 = band v0, v3
    return v4
}
; run: %band_splat_f32x4(0x00000000000000000000000000000000, 0x00000001) == 0x00000000000000000000000000000000
; run: %band_splat_f32x4(0x11111111111111111111111111111111, 0xffffffff) == 0x11111111111111111111111111111111
; run: %band_splat_f32x4(0x01010011000011110000000011111111, 0x8e8e8e8e) == 0x00000000000000000000000000000000
; run: %band_splat_f32x4(0x00000000000000001111111111111111, 0xc0ffeeee) == 0x00000000000000000011000000110000

function %band_splat_f64x2(f64x2, i64) -> f64x2 {
block0(v0: f64x2, v1: i64):
    v2 = bitcast.f64 v1
    v3 = splat.f64x2 v2
    v4 = band v0, v3
    return v4
}
; run: %band_splat_f64x2(0x00000000000000000000000000000000, 0x0000000000000001) == 0x00000000000000000000000000000000
; run: %band_splat_f64x2(0x11111111111111111111111111111111, 0xffffffffffffffff) == 0x11111111111111111111111111111111
; run: %band_splat_f64x2(0x01010011000011110000000011111111, 0x8e8e8e8e8e8e8e8e) == 0x00000000000000000000000000000000
; run: %band_splat_f64x2(0x00000000000000001111111111111111, 0xc0ffeeeec0ffeeee) == 0x00000000000000000011000000110000
