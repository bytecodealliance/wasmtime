test cat

; The smallest possible function.
function %minimal() {
block0:
    trap user1
}
; sameln: function %minimal() fast {
; nextln: block0:
; nextln:     trap user1
; nextln: }

; The same small function, but with empty parens on the first block.
function %minimal_empty_parens() {
block0():
    trap user1
}
; sameln: function %minimal_empty_parens() fast {
; nextln: block0:
; nextln:     trap user1
; nextln: }

; Create and use values.
; Polymorphic instructions with type suffix.
function %ivalues() {
block0:
    v0 = iconst.i32 2
    v1 = iconst.i8 6
    v2 = ishl v0, v1
}
; sameln: function %ivalues() fast {
; nextln: block0:
; nextln:     v0 = iconst.i32 2
; nextln:     v1 = iconst.i8 6
; nextln:     v2 = ishl v0, v1
; nextln: }

; Create and use values.
; Polymorphic instructions with type suffix.
function %bvalues() {
block0:
    v0 = iconst.i32 -1
    v1 = iconst.i8 0
    v2 = sextend.i32 v1
    v3 = bxor v0, v2
}
; sameln: function %bvalues() fast {
; nextln: block0:
; nextln:     v0 = iconst.i32 -1
; nextln:     v1 = iconst.i8 0
; nextln:     v2 = sextend.i32 v1
; nextln:     v3 = bxor v0, v2
; nextln: }

; Polymorphic instruction controlled by second operand.
function %select() {
block0(v90: i32, v91: i32, v92: i8):
    v0 = select v92, v90, v91
}
; sameln: function %select() fast {
; nextln: block0(v90: i32, v91: i32, v92: i8):
; nextln:     v0 = select v92, v90, v91
; nextln: }

; Polymorphic instruction controlled by third operand.
function %select() system_v {
block0(v95: i32, v96: i32, v97: i8):
    v99 = icmp eq v97, v95
    v98 = select v99, v95, v96
}
; sameln: function %select() system_v {
; nextln: block0(v95: i32, v96: i32, v97: i8):
; nextln: v99 = icmp eq v97, v95
; nextln: v98 = select v99, v95, v96
; nextln: }

; Lane indexes.
function %lanes(i32x4) {
block0(v0: i32x4):
    v1 = extractlane v0, 3
    v2 = insertlane v0, v1, 1
}
; sameln: function %lanes(i32x4) fast {
; nextln: block0(v0: i32x4):
; nextln:     v1 = extractlane v0, 3
; nextln:     v2 = insertlane v0, v1, 1
; nextln: }

; Integer condition codes.
function %icmp(i32, i32) {
block0(v90: i32, v91: i32):
    v0 = icmp eq v90, v91
    v1 = icmp ult v90, v91
    v2 = icmp_imm sge v90, -12
    v3 = irsub_imm v91, 45
    v4 = icmp eq v90, v91
    brif v4, block0(v91, v90), block0(v91, v90)
}
; sameln: function %icmp(i32, i32) fast {
; nextln: block0(v90: i32, v91: i32):
; nextln:     v0 = icmp eq v90, v91
; nextln:     v1 = icmp ult v90, v91
; nextln:     v2 = icmp_imm sge v90, -12
; nextln:     v3 = irsub_imm v91, 45
; nextln:     v4 = icmp eq v90, v91
; nextln:     brif v4, block0(v91, v90), block0(v91, v90)
; nextln: }

; Floating condition codes.
function %fcmp(f32, f32) {
block0(v90: f32, v91: f32):
    v0 = fcmp eq v90, v91
    v1 = fcmp uno v90, v91
    v2 = fcmp lt v90, v91
}
; sameln: function %fcmp(f32, f32) fast {
; nextln: block0(v90: f32, v91: f32):
; nextln:     v0 = fcmp eq v90, v91
; nextln:     v1 = fcmp uno v90, v91
; nextln:     v2 = fcmp lt v90, v91
; nextln: }

; The bitcast instruction has two type variables: The controlling type variable
; controls the output type, and the input type is a free variable.
function %bitcast(i32, f32) {
block0(v90: i32, v91: f32):
    v0 = bitcast.i8x4 v90
    v1 = bitcast.i32 v91
}
; sameln: function %bitcast(i32, f32) fast {
; nextln: block0(v90: i32, v91: f32):
; nextln:     v0 = bitcast.i8x4 v90
; nextln:     v1 = bitcast.i32 v91
; nextln: }

; Stack slot references
function %stack() {
    ss10 = explicit_slot 8
    ss2 = explicit_slot 4

block0:
    v1 = stack_load.i32 ss10
    v2 = stack_load.i32 ss10+4
    stack_store v1, ss10+2
    stack_store v2, ss2
}
; sameln: function %stack() fast {
; check:     ss2 = explicit_slot 4
; check:     ss10 = explicit_slot 8

; check: block0:
; nextln: v1 = stack_load.i32 ss10
; nextln: v2 = stack_load.i32 ss10+4
; nextln: stack_store v1, ss10+2
; nextln: stack_store v2, ss2

; Memory access instructions.
function %memory(i32) {
block0(v1: i32):
    v2 = load.i64 v1
    v3 = load.i64 aligned v1
    v4 = load.i64 notrap v1
    v5 = load.i64 notrap aligned v1
    v6 = load.i64 aligned notrap v1
    v7 = load.i64 v1-12
    v8 = load.i64 notrap v1+0x1_0000
    store v2, v1
    store aligned v3, v1+12
    store notrap aligned v3, v1-12
}
; sameln: function %memory(i32) fast {
; nextln: block0(v1: i32):
; nextln:     v2 = load.i64 v1
; nextln:     v3 = load.i64 aligned v1
; nextln:     v4 = load.i64 notrap v1
; nextln:     v5 = load.i64 notrap aligned v1
; nextln:     v6 = load.i64 notrap aligned v1
; nextln:     v7 = load.i64 v1-12
; nextln:     v8 = load.i64 notrap v1+0x0001_0000
; nextln:     store v2, v1
; nextln:     store aligned v3, v1+12
; nextln:     store notrap aligned v3, v1-12

function %cond_traps(i32) {
block0(v0: i32):
    trapz v0, stk_ovf
    v1 = icmp_imm ugt v0, 5
    trapnz v1, heap_oob
    v2 = bitcast.f32 v1
    v3 = fcmp uno v2, v2
    trapnz v3, int_ovf
    return
}
; sameln: function %cond_traps(i32)
; nextln: block0(v0: i32):
; nextln:     trapz v0, stk_ovf
; nextln:     v1 = icmp_imm ugt v0, 5
; nextln:     trapnz v1, heap_oob
; nextln:     v2 = bitcast.f32 v1
; nextln:     v3 = fcmp uno v2, v2
; nextln:     trapnz v3, int_ovf
; nextln:     return
; nextln: }
