test compile expect-fail
set enable_pcc=true
target aarch64
;; disabled until PCC is migrated to new assembler: target x86_64

function %f0(i32, i32) -> i32 {
block0(v0 ! range(32, 0, 0x100): i32, v1 ! range(32, 0, 0x80): i32):
    v2 ! range(32, 0, 0x17f) = iadd.i32 v0, v1
    return v2
}

function %f1(i32) -> i32 {
block0(v0 ! range(32, 0, 0x100): i32):
    v1 ! range(32, 0, 1) = iconst.i32 1
    v2 ! range(32, 0, 0x100) = iadd.i32 v0, v1
    return v2
}

function %f3(i32) -> i64 {
block0(v0: i32):
    v1 ! range(32, 0, 1) = iconst.i32 1
    v2 ! range(32, 0, 0xffff_fffe) = iadd.i32 v0, v1
    v3 ! range(64, 0, 0xffff_fffe) = uextend.i64 v2
    return v3
}

function %f3(i32) -> i64 {
block0(v0: i32):
    v1 ! range(32, 0, 1) = iconst.i32 1
    v2 ! range(32, 0, 0xffff_ffff) = iadd.i32 v0, v1
    v3 ! range(64, 0, 0xffff_ffff) = uextend.i64 v2
    v4 ! range(64, 0, 0x1) = iconst.i64 1
    v5 ! range(64, 0, 0xffff_ffff) = iadd.i64 v3, v4
    return v5
}

;; check merged ops:
function %f4(i32, i32) -> i32 {
block0(v0 ! range(32, 0, 0x100): i32, v1 ! range(32, 0, 0x200): i32):
  v2 = iconst.i32 2
  v3 ! range(32, 0, 0x400) = ishl.i32 v0, v2
  v4 ! range(32, 0, 0x5ff) = iadd.i32 v1, v3
  return v4
}

function %f5(i32, i64) -> i64 {
block0(v0 ! range(32, 0, 0x100): i32, v1 ! range(64, 0, 0x200): i64):
  v2 ! range(64, 0, 0x100) = uextend.i64 v0
  v3 ! range(64, 0, 0x2ff) = iadd.i64 v1, v2
  return v3
}
