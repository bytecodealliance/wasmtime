test verifier

function %entry_block_signature_mismatch(i32) {
    block0: ; error: entry block parameters (0) must match function signature (1)
        return
}

function %entry_block_arg_type(i32) {
    block0(v0: f32): ; error: entry block parameter 0 expected to have type i32, got f32
        return
}

function %incorrect_arg_type(i32, i8) -> i32 {
    block0(v0: i32, v1: i8):
        v2 = iadd v0, v1 ; error: arg 1 (v1) has type i8, expected i32
        return v2
}

function %incorrect_return_type() -> f32 {
    block0:
        v0 = iconst.i32 1
        return v0 ; error: result 0 has type i32, must match function signature of f32
}

function %too_many_return_values() {
    block0:
        v0 = iconst.i32 1
        return v0 ; error: arguments of return must match function signature
}

function %too_few_return_values() -> f32, i64 {
    block0:
        return ; error: arguments of return must match function signature
}

function %type_mismatch_controlling_variable() {
    block0:
        v0 = iconst.i32 5
        v1 = iconst.i64 6
        v2 = iadd v0, v1 ; error: arg 1 (v1) has type i64, expected i32
        return
}

function %fn_call_too_few_args() {
    fn2 = %great_fn(i32, f32)
    block0:
        call fn2() ; error: mismatched argument count for `call fn2()`: got 0, expected 2
        return
}

function %fn_call_too_many_args(i64, f32) {
    fn5 = %best_fn()
    block0(v0: i64, v1: f32):
        call fn5(v0, v1) ; error: mismatched argument count for `call fn5(v0, v1)`: got 2, expected 0
        return
}

function %fn_call_incorrect_arg_type(i64) {
    sig9 = (f32)
    block0(v0: i64):
        v1 = iconst.i32 56
        call_indirect sig9, v0(v1) ; error: arg 0 (v1) has type i32, expected f32
        return
}

function %jump_table_args() {
    block0:
        v0 = iconst.i32 0
        br_table v0, block2, [block1] ; error: mismatched argument count

    block1(v5: i32):
        return
    block2:
        return
}

function %jump_args() {
    block0:
        v0 = iconst.i16 10
        v3 = iconst.i64 20
        jump block1(v0, v3) ; error: arg v0 has type i16, expected i64
                            ; error: arg v3 has type i64, expected i16
    block1(v10: i64, v11: i16):
        return
}

function %jump_args2() {
    block0:
        v0 = iconst.i16 10
        v3 = iconst.i64 20
        brif v0, block1(v3, v0), block1(v0, v3) ; error: arg v0 has type i16, expected i64
                                                ; error: arg v3 has type i64, expected i16
    block1(v10: i64, v11: i16):
        return
}

function %brif_args() {
block0:
    v0 = iconst.i16 10
    v1 = iconst.i16 10
    brif v0, block1(v1), block2(v1)
    ; error: arg v1 has type i16, expected i64
    ; error: mismatched argument count

block1(v2: i64):
    return

block2(v3: f32, v4: i8):
    return
}

function %bad_extend(i128) {
block0(v0: i128):
    v1 = iconst.i32 10
    v2 = uextend.i16 v1 ; error: arg 0 (v1) with type i32 failed to satisfy type set
    v3 = uextend.i32 v1 ; error: arg 0 (v1) with type i32 failed to satisfy type set
    v4 = uextend.i128 v0 ; error: arg 0 (v0) with type i128 failed to satisfy type set
    return
}

function %bad_reduce() {
block0:
    v0 = iconst.i32 10
    v1 = ireduce.i32 v0 ; error: arg 0 (v0) with type i32 failed to satisfy type set
    v2 = ireduce.i64 v0 ; error: arg 0 (v0) with type i32 failed to satisfy type set
    v4 = iconst.i8 10
    v5 = ireduce.i64 v4 ; error: arg 0 (v4) with type i8 failed to satisfy type set
    return
}

function %bad_fdemote() {
block0:
    v0 = f32const 0xf.f
    v1 = fdemote.f64 v0 ; error: arg 0 (v0) with type f32 failed to satisfy type set
    v2 = fdemote.f32 v0 ; error: arg 0 (v0) with type f32 failed to satisfy type set
    return
}

function %bad_fpromote() {
block0:
    v0 = f64const 0xf.f
    v1 = fpromote.f32 v0 ; error: arg 0 (v0) with type f64 failed to satisfy type set
    v2 = fpromote.f64 v0 ; error: arg 0 (v0) with type f64 failed to satisfy type set
    return
}

function %bad_shuffle(i8x16, i8x16) {
block0(v0: i8x16, v1: i8x16):
    v2 = shuffle v0, v1, [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 32] ; error: shuffle immediate index 32 is larger than the maximum 31
    return
}
