test verifier
target x86_64

function %f0(i32) -> i32 {
    sig0 = (i32) -> f32 tail
    fn0 = %g(i32) -> f32 tail

    block0(v1: i32):
        v2 = f64const 0x1.0
        try_call fn0(v1), sig0, block1(ret0, v2), [ tag1: block2(exn0), default: block3(v2, exn0) ]

    block1(v3: f32, v4: f64):
        v5 = iconst.i32 1
        return v5

    block2(v6: i64):
        v7 = iconst.i32 2
        return v7

    block3(v8: f64, v9: i64):
        v10 = iconst.i32 3
        return v10
}

;; Non-matching function return type: v3 on block1.
function %f1(i32) -> i32 {
    sig0 = (i32) -> i32 tail
    fn0 = %g(i32) -> i32 tail

    block0(v1: i32):
        v2 = f64const 0x1.0
        try_call fn0(v1), sig0, block1(ret0, v2), [ tag1: block2(exn0), default: block3(exn0, v2) ] ; error: arg ret0 has type i32, expected f32

    block1(v3: f32, v4: f64):
        v5 = iconst.i32 1
        return v5

    block2(v6: i64):
        v7 = iconst.i32 2
        return v7

    block3(v8: i64, v9: f64):
        v10 = iconst.i32 3
        return v10
}

;; Non-matching exception payload type (not a pointer-width value): v6 on block2.
function %f2(i32) -> i32 {
    sig0 = (i32) -> i32 tail
    fn0 = %g(i32) -> i32 tail

    block0(v1: i32):
        v2 = f64const 0x1.0
        try_call fn0(v1), sig0, block1(ret0, v2), [ tag1: block2(exn0), default: block3(exn0, v2) ] ; error: arg exn0 has type i64, expected i32

    block1(v3: i32, v4: f64):
        v5 = iconst.i32 1
        return v5

    block2(v6: i32):
        v7 = iconst.i32 2
        return v7

    block3(v8: i64, v9: f64):
        v10 = iconst.i32 3
        return v10
}

;; Non-matching signature in exception table.
function %f3(i32) -> i32 {
    sig0 = (i32) -> i32 tail
    fn0 = %g(i64) -> i32 tail

    block0(v1: i32):
        v2 = f64const 0x1.0
        try_call fn0(v1), sig0, block1(ret0, v2), [ tag1: block2(exn0), default: block3(exn0, v2) ] ; error: exception table signature sig0 did not match function fn0's signature sig1

    block1(v3: i32, v4: f64):
        v5 = iconst.i32 1
        return v5

    block2(v6: i64):
        v7 = iconst.i32 2
        return v7

    block3(v8: i64, v9: f64):
        v10 = iconst.i32 3
        return v10
}

;; Too few blockparams (in explicit blockparam part).
function %f4(i32) -> i32 {
    sig0 = (i32) -> f32 tail
    fn0 = %g(i32) -> f32 tail

    block0(v1: i32):
        v2 = f64const 0x1.0
        try_call fn0(v1), sig0, block1(ret0, v2), [ tag1: block2(exn0), default: block3(exn0, v2) ] ; error: mismatched argument count

    block1(v3: f32):
        v5 = iconst.i32 1
        return v5

    block2(v6: i64):
        v7 = iconst.i32 2
        return v7

    block3(v8: i64, v9: f64):
        v10 = iconst.i32 3
        return v10
}

;; Non-supported calling convention.
function %f5(i32) -> i32 {
    sig0 = (i32) -> f32 windows_fastcall
    fn0 = %g(i32) -> f32 windows_fastcall

    block0(v1: i32):
        v2 = f64const 0x1.0
        try_call fn0(v1), sig0, block1(ret0, v2), [ tag1: block2(), default: block3(v2) ] ; error: calling convention `windows_fastcall` of callee does not support exceptions

    block1(v3: f32, v4: f64):
        v5 = iconst.i32 1
        return v5

    block2():
        v7 = iconst.i32 2
        return v7

    block3(v8: f64):
        v10 = iconst.i32 3
        return v10
}

;; Use the payloads of the callee, not the caller
function %f5() windows_fastcall {
    sig0 = () tail
    fn0 = %g() tail

    block0():
        try_call fn0(), sig0, block1(), [ tag1: block2(exn0), default: block3(exn1) ]

    block1():
        return

    block2(v0: i64):
        return

    block3(v1: i64):
        return
}

;; Out-of-bounds `exnN` paylaod
function %f5() {
    sig0 = () tail
    fn0 = %g() tail

    block0():
        try_call fn0(), sig0, block1(), [ default: block2(exn2) ] ; error: out-of-bounds `exnN` block argument

    block1():
        return

    block2(v1: i64):
        return
}

;; `exnN` only allowed in exceptional blocks
function %f5() {
    sig0 = () tail
    fn0 = %g() tail

    block0():
        try_call fn0(), sig0, block1(exn0), [ default: block2() ] ; error: `exnN` block argument used outside normal-return target of `try_call`

    block1(v1: i64):
        return

    block2():
        return
}

;; `retN` only allowed in normal return
function %f5() {
    sig0 = () -> i32 tail
    fn0 = %g() -> i32 tail

    block0():
        try_call fn0(), sig0, block1(ret0), [ default: block2(ret0) ] ; error: `retN` block argument used outside normal-return target of `try_call`

    block1(v1: i32):
        return

    block2(v2: i32):
        return
}

;; `system_v` has two payload slots
function %f5() {
    sig0 = () system_v
    fn0 = %g() system_v

    block0():
        try_call fn0(), sig0, block1(), [ default: block2(exn0, exn1) ]

    block1():
        return

    block2(v1: i64, v2: i64):
        return
}

;; invalid successor index on `get_exception_handler_address`
function %f6() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block1, 1 ; error: exception handler index 1 is out-of-range
        jump block1

    block1:
        try_call fn0(), sig0, block2(), [ default: block3() ]

    block2:
        return v1

    block3:
        return v1
}

;; invalid successor index on `get_exception_handler_address`
function %f7() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block1, -1 ; error: exception handler index -1 cannot be negative
        jump block1

    block1:
        try_call fn0(), sig0, block2(), [ default: block3() ]

    block2:
        return v1

    block3:
        return v1
}

;; invalid block on `get_exception_handler_address`
function %f8() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block17, 0 ; error: invalid block reference block17
        jump block1

    block1:
        try_call fn0(), sig0, block2(), [ default: block3() ]

    block2:
        return v1

    block3:
        return v1
}

;; invalid block terminator on `get_exception_handler_address`
function %f8() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block2, 0 ; error: referenced block block2 does not end in a try_call
        jump block1

    block1:
        try_call fn0(), sig0, block2(), [ default: block3() ]

    block2:
        return v1

    block3:
        return v1
}


;; invalid block terminator on `get_exception_handler_address`
function %f9() -> i64 {
    sig0 = () tail
    fn0 = %g() tail

    block0:
        v1 = get_exception_handler_address.i64 block1, 0 ; error: exception handler index 0 is out-of-range
        jump block1

    block1:
        try_call fn0(), sig0, block2(), []

    block2:
        return v1

    block3:
        return v1
}
