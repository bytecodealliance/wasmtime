(spec (lower arg)
    (provide (= result arg)))
(decl lower (Inst) InstOutput)

;; Instruction formats.
(type MInst
  (enum
))

(model ALUOp (enum
      (Add #x00) ;; 0
      (Sub #x01)
      (Orr #x02)
      (OrrNot #x03)
      (And #x04)
      (AndNot #x05)
      (Eor #x06)
      (EorNot #x07)
      (SubS #x08)
      (SDiv #x09)
      (UDiv #x0a)
      (RotR #x0b)
      (Lsr #x0c)
      (Asr #x0d)
      (Lsl #x0e)))

;; An ALU operation. This can be paired with several instruction formats
;; below (see `Inst`) in any combination.
(type ALUOp
  (enum
    (Add)
    (Sub)
    (Orr)
    (OrrNot)
    (And)
    (AndS)
    (AndNot)
    ;; XOR (AArch64 calls this "EOR")
    (Eor)
    ;; XNOR (AArch64 calls this "EOR-NOT")
    (EorNot)
    ;; Add, setting flags
    (AddS)
    ;; Sub setting flags
    (SubS)
    ;; Signed multiplyhigh-word result
    (SMulH)
    ;; Unsigned multiplyhigh-word result
    (UMulH)
    (SDiv)
    (UDiv)
    (RotR)
    (Lsr)
    (Asr)
    (Lsl)
    ;; Add with carry
    (Adc)
    ;; Add with carrysettings flags
    (AdcS)
    ;; Subtract with carry
    (Sbc)
    ;; Subtract with carrysettings flags
    (SbcS)
))

 (spec (do_shift op t a b)
   (provide
     (= result
        (switch op
          ((ALUOp.Lsr) (conv_to 64
            (bvlshr (conv_to t a)
                 (conv_to t (zero_ext 64
                   (bvand (conv_to (widthof b) (bvsub (int2bv 64 (widthof b)) #x0000000000000001)) b))))))
          ((ALUOp.Asr) (conv_to 64
            (bvashr (conv_to t a)
                  (conv_to t (zero_ext 64
                    (bvand (conv_to (widthof b) (bvsub (int2bv 64 (widthof b)) #x0000000000000001)) b))))))
          ((ALUOp.Lsl) (conv_to 64
            (bvshl (conv_to t a)
                 (conv_to t (zero_ext 64
                   (bvand (conv_to (widthof b) (bvsub (int2bv 64 (widthof b)) #x0000000000000001)) b)))))))))
   (require
     (or (= op (ALUOp.Lsr)) (= op (ALUOp.Asr)) (= op (ALUOp.Lsl)))
     (= t (widthof b))
     (or (= t 8) (= t 16) (= t 32) (= t 64))
     (switch op
       ((ALUOp.Lsr) (switch t
         (8 (= (extract 31 0 a) (zero_ext 32 (extract 7 0 a))))
         (16 (= (extract 31 0 a) (zero_ext 32 (extract 15 0 a))))
         (32 true)
         (64 true)))
      ((ALUOp.Asr) (switch t
        (8 (= (extract 31 0 a) (sign_ext 32 (extract 7 0 a))))
        (16 (= (extract 31 0 a) (sign_ext 32 (extract 15 0 a))))
        (32 true)
        (64 true)))
      ((ALUOp.Lsl) true))))
(instantiate do_shift
    ((args (bv 8) Int (bv 64) (bv 8)) (ret (bv 64)) (canon (bv 8)))
    ((args (bv 8) Int (bv 64) (bv 16)) (ret (bv 64)) (canon (bv 16)))
    ((args (bv 8) Int (bv 64) (bv 32)) (ret (bv 64)) (canon (bv 32)))
    ((args (bv 8) Int (bv 64) (bv 64)) (ret (bv 64)) (canon (bv 64)))
)
(decl do_shift (ALUOp Type Reg Value) Reg)
(extern constructor do_shift do_shift)

;; BROKEN: Asr instead of Lsl
;; Shift for i64.
(rule (lower (has_type $I64 (ishl x y)))
      (do_shift (ALUOp.Asr) $I64 x y))
