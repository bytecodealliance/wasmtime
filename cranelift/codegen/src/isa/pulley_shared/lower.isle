;; Pulley instruction selection and CLIF-to-MachInst lowering.

;; The main lowering constructor term: takes a clif `Inst` and returns the
;; register(s) within which the lowered instruction's result values live.
(decl partial lower (Inst) InstOutput)

;;;; Rules for Control Flow ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Helper to place a conditional `Value` provided into a register. Pulley
;; conditional values occupy the full low 32-bits of a register and so this
;; needs to handle situations such as when the `Value` is 64-bits an explicit
;; comparison must be made. Additionally if `Value` is smaller than 32-bits
;; then it must be sign-extended up to at least 32 bits.
(decl lower_cond (Value) XReg)
(rule (lower_cond val @ (value_type $I64)) (pulley_xneq64 val (pulley_xconst8 0)))
(rule (lower_cond val @ (value_type $I32)) val)
(rule (lower_cond val @ (value_type $I16)) (pulley_zext16 val))
(rule (lower_cond val @ (value_type $I8)) (pulley_zext8 val))

;; Peel away explicit `uextend` values to take a look at the inner value.
(rule 1 (lower_cond (uextend val)) (lower_cond val))

;; The main control-flow-lowering term: takes a control-flow instruction and
;; target(s) and emits the necessary instructions.
(decl partial lower_branch (Inst MachLabelSlice) Unit)

;; Unconditional jumps.
(rule (lower_branch (jump _) (single_target label))
      (emit_side_effect (pulley_jump label)))

;; Generic case for conditional branches.
(rule -1 (lower_branch (brif c _ _) (two_targets then else))
      (emit_side_effect (pulley_br_if32 (lower_cond c) then else)))

;; Conditional branches on `icmp`s.
(rule (lower_branch (brif (maybe_uextend (icmp cc a b @ (value_type $I32))) _ _)
                    (two_targets then else))
      (emit_side_effect (lower_brif_of_icmp32 cc a b then else)))

(decl lower_brif_of_icmp32 (IntCC Value Value MachLabel MachLabel) SideEffectNoResult)
(rule (lower_brif_of_icmp32 (IntCC.Equal) a b then else)
      (pulley_br_if_xeq32 a b then else))
(rule (lower_brif_of_icmp32 (IntCC.NotEqual) a b then else)
      (pulley_br_if_xneq32 a b then else))
(rule (lower_brif_of_icmp32 (IntCC.SignedLessThan) a b then else)
      (pulley_br_if_xslt32 a b then else))
(rule (lower_brif_of_icmp32 (IntCC.SignedLessThanOrEqual) a b then else)
      (pulley_br_if_xslteq32 a b then else))
(rule (lower_brif_of_icmp32 (IntCC.UnsignedLessThan) a b then else)
      (pulley_br_if_xult32 a b then else))
(rule (lower_brif_of_icmp32 (IntCC.UnsignedLessThanOrEqual) a b then else)
      (pulley_br_if_xulteq32 a b then else))

;; Pulley doesn't have instructions for `>` and `>=`, so we have to reverse the
;; operation.
(rule (lower_brif_of_icmp32 (IntCC.SignedGreaterThan) a b then else)
      (lower_brif_of_icmp32 (IntCC.SignedLessThan) b a then else))
(rule (lower_brif_of_icmp32 (IntCC.SignedGreaterThanOrEqual) a b then else)
      (lower_brif_of_icmp32 (IntCC.SignedLessThanOrEqual) b a then else))
(rule (lower_brif_of_icmp32 (IntCC.UnsignedGreaterThan) a b then else)
      (lower_brif_of_icmp32 (IntCC.UnsignedLessThan) b a then else))
(rule (lower_brif_of_icmp32 (IntCC.UnsignedGreaterThanOrEqual) a b then else)
      (lower_brif_of_icmp32 (IntCC.UnsignedLessThanOrEqual) b a then else))

;; Branch tables.
(rule (lower_branch (br_table index _) (jump_table_targets default targets))
      (gen_br_table index default targets))

;;;; Rules for `trap` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (trap code))
      (side_effect (pulley_trap code)))

;;;; Rules for `trapz` and `trapnz` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (trapz a @ (value_type (ty_32_or_64 ty)) code))
      (let ((zero Reg (pulley_xconst8 0)))
        (side_effect (pulley_trap_if (IntCC.Equal)
                                     (ty_to_operand_size ty)
                                     a
                                     zero
                                     code))))

(rule (lower (trapnz a @ (value_type (ty_32_or_64 ty)) code))
      (let ((zero Reg (pulley_xconst8 0)))
        (side_effect (pulley_trap_if (IntCC.NotEqual)
                                     (ty_to_operand_size ty)
                                     a
                                     zero
                                     code))))

;; Fold `(trap[n]z (icmp ...))` together.

(rule 1 (lower (trapz (icmp cc a b @ (value_type (ty_32_or_64 ty))) code))
      (side_effect (pulley_trap_if (intcc_complement cc)
                                   (ty_to_operand_size ty)
                                   a
                                   b
                                   code)))

(rule 1 (lower (trapnz (icmp cc a b @ (value_type (ty_32_or_64 ty))) code))
      (side_effect (pulley_trap_if cc
                                   (ty_to_operand_size ty)
                                   a
                                   b
                                   code)))

;; Fold `(trap[n]z (iconst ...))` together.

(rule 2 (lower (trapz (iconst (u64_from_imm64 (u64_nonzero _))) code))
      (output_none))

(rule 2 (lower (trapnz (iconst (u64_from_imm64 0)) code))
      (output_none))

;; TODO: These rules are disabled because they insert a block terminator into
;; the middle of the current block, which leads to regalloc errors. We should
;; ideally be able to lower conditional traps that will always trap into
;; unconditional traps though. This isn't very high priority though because
;; traps, pretty much by definition, are not hot paths.
;;
;; (rule 3 (lower (trapnz (iconst (u64_from_imm64 (u64_nonzero _))) code))
;;       (side_effect (pulley_trap code)))
;;
;; (rule 3 (lower (trapz (iconst (u64_from_imm64 0)) code))
;;       (side_effect (pulley_trap code)))

;;;; Rules for `get_stack_pointer` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (get_stack_pointer))
      (pulley_get_special (sp_reg)))

;;;; Rules for `get_frame_pointer` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (get_frame_pointer))
      (pulley_get_special (fp_reg)))

;;;; Rules for `get_return_address` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (get_return_address))
      (pulley_get_special (lr_reg)))

;;;; Rules for `return` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; N.B.: the `ret` itself is generated by the ABI.
(rule (lower (return args))
      (lower_return args))

;;;; Rules for calls ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (call (func_ref_data sig_ref extname dist) inputs))
      (gen_call sig_ref extname dist inputs))

(rule (lower (call_indirect sig_ref val inputs))
      (gen_call_indirect sig_ref val inputs))

;;;; Rules for `return_call` and `return_call_indirect` ;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (return_call (func_ref_data sig_ref extname dist) args))
      (gen_return_call sig_ref extname dist args))

(rule (lower (return_call_indirect sig_ref callee args))
      (gen_return_call_indirect sig_ref callee args))

;;;; Rules for `iconst` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type ty (iconst (u64_from_imm64 n))))
      (imm ty n))

;;;; Rules for `f32const`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (f32const (u32_from_ieee32 x)))
      (pulley_fconst32 x))

;;;; Rules for `f64const`;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (f64const (u64_from_ieee64 x)))
      (pulley_fconst64 x))

;;;; Rules for `iadd` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I8 (iadd a b)))
      (pulley_xadd32 a b))

(rule (lower (has_type $I16 (iadd a b)))
      (pulley_xadd32 a b))

(rule (lower (has_type $I32 (iadd a b)))
      (pulley_xadd32 a b))

(rule (lower (has_type $I64 (iadd a b)))
      (pulley_xadd64 a b))

;;;; Rules for `isub` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I8 (isub a b)))
      (pulley_xsub32 a b))

(rule (lower (has_type $I16 (isub a b)))
      (pulley_xsub32 a b))

(rule (lower (has_type $I32 (isub a b)))
      (pulley_xsub32 a b))

(rule (lower (has_type $I64 (isub a b)))
      (pulley_xsub64 a b))

;;;; Rules for `sdiv` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (sdiv a b))) (pulley_xdiv32_s a b))
(rule (lower (has_type $I64 (sdiv a b))) (pulley_xdiv64_s a b))

;;;; Rules for `srem` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (srem a b))) (pulley_xrem32_s a b))
(rule (lower (has_type $I64 (srem a b))) (pulley_xrem64_s a b))

;;;; Rules for `udiv` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (udiv a b))) (pulley_xdiv32_u a b))
(rule (lower (has_type $I64 (udiv a b))) (pulley_xdiv64_u a b))

;;;; Rules for `urem` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (urem a b))) (pulley_xrem32_u a b))
(rule (lower (has_type $I64 (urem a b))) (pulley_xrem64_u a b))

;;;; Rules for `ishl` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (ishl a b)))
  (pulley_xshl32 a b))

(rule (lower (has_type $I64 (ishl a b)))
  (pulley_xshl64 a b))

;;;; Rules for `ushr` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (ushr a b)))
  (pulley_xshr32_u a b))

(rule (lower (has_type $I64 (ushr a b)))
  (pulley_xshr64_u a b))

;;;; Rules for `sshr` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (sshr a b)))
  (pulley_xshr32_s a b))

(rule (lower (has_type $I64 (sshr a b)))
  (pulley_xshr64_s a b))

;;;; Rules for `band` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule 0 (lower (has_type (fits_in_32 _) (band a b)))
  (pulley_xand32 a b))

(rule 1 (lower (has_type $I64 (band a b)))
  (pulley_xand64 a b))

;;;; Rules for `bor` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule 0 (lower (has_type (fits_in_32 _) (bor a b)))
  (pulley_xor32 a b))

(rule 1 (lower (has_type $I64 (bor a b)))
  (pulley_xor64 a b))

;;;; Rules for `ctz` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (ctz a))) (pulley_xctz32 a))
(rule (lower (has_type $I64 (ctz a))) (pulley_xctz64 a))

;;;; Rules for `clz` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (clz a))) (pulley_xclz32 a))
(rule (lower (has_type $I64 (clz a))) (pulley_xclz64 a))

;;;; Rules for `icmp` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule 1 (lower (icmp cc a b @ (value_type $I64)))
      (lower_icmp $I64 cc a b))
(rule (lower (icmp cc a b @ (value_type (fits_in_32 _))))
      (lower_icmp $I32 cc a b))

(decl lower_icmp (Type IntCC Value Value) XReg)

(rule (lower_icmp $I64 (IntCC.Equal) a b)
      (pulley_xeq64 a b))

(rule (lower_icmp $I64 (IntCC.NotEqual) a b)
      (pulley_xneq64 a b))

(rule (lower_icmp $I64 (IntCC.SignedLessThan) a b)
      (pulley_xslt64 a b))

(rule (lower_icmp $I64 (IntCC.SignedLessThanOrEqual) a b)
      (pulley_xslteq64 a b))

(rule (lower_icmp $I64 (IntCC.UnsignedLessThan) a b)
      (pulley_xult64 a b))

(rule (lower_icmp $I64 (IntCC.UnsignedLessThanOrEqual) a b)
      (pulley_xulteq64 a b))

(rule (lower_icmp $I32 (IntCC.Equal) a b)
      (pulley_xeq32 a b))

(rule (lower_icmp $I32 (IntCC.NotEqual) a b)
      (pulley_xneq32 a b))

(rule (lower_icmp $I32 (IntCC.SignedLessThan) a b)
      (pulley_xslt32 a b))

(rule (lower_icmp $I32 (IntCC.SignedLessThanOrEqual) a b)
      (pulley_xslteq32 a b))

(rule (lower_icmp $I32 (IntCC.UnsignedLessThan) a b)
      (pulley_xult32 a b))

(rule (lower_icmp $I32 (IntCC.UnsignedLessThanOrEqual) a b)
      (pulley_xulteq32 a b))

;; Pulley doesn't have instructions for `>` and `>=`, so we have to reverse the
;; operation.
(rule (lower_icmp ty (IntCC.SignedGreaterThan) a b)
      (lower_icmp ty (IntCC.SignedLessThan) b a))
(rule (lower_icmp ty (IntCC.SignedGreaterThanOrEqual) a b)
      (lower_icmp ty (IntCC.SignedLessThanOrEqual) b a))
(rule (lower_icmp ty (IntCC.UnsignedGreaterThan) a b)
      (lower_icmp ty (IntCC.UnsignedLessThan) b a))
(rule (lower_icmp ty (IntCC.UnsignedGreaterThanOrEqual) a b)
      (lower_icmp ty (IntCC.UnsignedLessThanOrEqual) b a))

;;;; Rules for `fcmp` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (fcmp cc a b @ (value_type (ty_scalar_float ty))))
  (lower_fcmp ty cc a b))

(decl lower_fcmp (Type FloatCC Value Value) XReg)

(rule (lower_fcmp $F32 (FloatCC.Equal) a b) (pulley_feq32 a b))
(rule (lower_fcmp $F64 (FloatCC.Equal) a b) (pulley_feq64 a b))
(rule (lower_fcmp $F32 (FloatCC.NotEqual) a b) (pulley_fneq32 a b))
(rule (lower_fcmp $F64 (FloatCC.NotEqual) a b) (pulley_fneq64 a b))
(rule (lower_fcmp $F32 (FloatCC.LessThan) a b) (pulley_flt32 a b))
(rule (lower_fcmp $F64 (FloatCC.LessThan) a b) (pulley_flt64 a b))
(rule (lower_fcmp $F32 (FloatCC.LessThanOrEqual) a b) (pulley_flt32 a b))
(rule (lower_fcmp $F64 (FloatCC.LessThanOrEqual) a b) (pulley_flt64 a b))

;; NB: Pulley doesn't have lowerings for `Ordered` or `Unordered` `FloatCC`
;; conditions as that's not needed by wasm at this time.

;; Pulley doesn't have instructions for `>` and `>=`, so we have to reverse the
;; operation.
(rule (lower_fcmp ty (FloatCC.GreaterThan) a b)
  (lower_fcmp ty (FloatCC.LessThan) b a))
(rule (lower_fcmp ty (FloatCC.GreaterThanOrEqual) a b)
  (lower_fcmp ty (FloatCC.LessThanOrEqual) b a))

;;;; Rules for `load` and friends ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(decl amode (Value Offset32) Amode)
(rule (amode addr (offset32 offset)) (Amode.RegOffset addr offset))

(rule (lower (has_type (ty_int ty) (load flags addr offset)))
  (pulley_xload (amode addr offset) ty flags (ExtKind.None)))

(rule 1 (lower (has_type (ty_scalar_float ty) (load flags addr offset)))
  (pulley_fload (amode addr offset) ty flags))

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (uload8 flags addr offset)))
  (pulley_xload (amode addr offset) $I8 flags (ExtKind.Zero32)))

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (uload16 flags addr offset)))
  (pulley_xload (amode addr offset) $I16 flags (ExtKind.Zero32)))

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (uload32 flags addr offset)))
  (pulley_xload (amode addr offset) $I32 flags (ExtKind.None)))

(rule 1 (lower (has_type $I64 (uload8 flags addr offset)))
  (pulley_xload (amode addr offset) $I8 flags (ExtKind.Zero64)))

(rule 1 (lower (has_type $I64 (uload16 flags addr offset)))
  (pulley_xload (amode addr offset) $I16 flags (ExtKind.Zero64)))

(rule 1 (lower (has_type $I64 (uload32 flags addr offset)))
  (pulley_xload (amode addr offset) $I32 flags (ExtKind.Zero64)))

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (sload8 flags addr offset)))
  (pulley_xload (amode addr offset) $I8 flags (ExtKind.Sign32)))

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (sload16 flags addr offset)))
  (pulley_xload (amode addr offset) $I16 flags (ExtKind.Sign32)))

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (sload32 flags addr offset)))
  (pulley_xload (amode addr offset) $I32 flags (ExtKind.None)))

(rule 1 (lower (has_type $I64 (sload8 flags addr offset)))
  (pulley_xload (amode addr offset) $I8 flags (ExtKind.Sign64)))

(rule 1 (lower (has_type $I64 (sload16 flags addr offset)))
  (pulley_xload (amode addr offset) $I16 flags (ExtKind.Sign64)))

(rule 1 (lower (has_type $I64 (sload32 flags addr offset)))
  (pulley_xload (amode addr offset) $I32 flags (ExtKind.Sign64)))

;;;; Rules for `store` and friends ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (store flags src @ (value_type (ty_int ty)) addr offset))
  (side_effect (pulley_xstore (amode addr offset) src ty flags)))

(rule 1 (lower (store flags src @ (value_type (ty_scalar_float ty)) addr offset))
  (side_effect (pulley_fstore (amode addr offset) src ty flags)))

(rule (lower (istore8 flags src addr offset))
  (side_effect (pulley_xstore (amode addr offset) src $I8 flags)))

(rule (lower (istore16 flags src addr offset))
  (side_effect (pulley_xstore (amode addr offset) src $I16 flags)))

(rule (lower (istore32 flags src addr offset))
  (side_effect (pulley_xstore (amode addr offset) src $I32 flags)))

;;;; Rules for `stack_addr` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (stack_addr stack_slot offset))
      (lower_stack_addr stack_slot offset))

(decl lower_stack_addr (StackSlot Offset32) XReg)
(rule (lower_stack_addr stack_slot offset)
      (let ((dst WritableXReg (temp_writable_xreg))
            (_ Unit (emit (abi_stackslot_addr dst stack_slot offset))))
        dst))

;;;; Rules for `uextend` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type (fits_in_64 _) (uextend val @ (value_type $I32))))
  (pulley_zext32 val))

(rule (lower (has_type (fits_in_64 _) (uextend val @ (value_type $I16))))
  (pulley_zext16 val))

(rule (lower (has_type (fits_in_64 _) (uextend val @ (value_type $I8))))
  (pulley_zext8 val))

;;;; Rules for `sextend` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type (fits_in_64 _) (sextend val @ (value_type $I8))))
  (pulley_sext8 val))

(rule (lower (has_type (fits_in_64 _) (sextend val @ (value_type $I16))))
  (pulley_sext16 val))

(rule (lower (has_type (fits_in_64 _) (sextend val @ (value_type $I32))))
  (pulley_sext32 val))

;;;; Rules for `ireduce` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type (fits_in_64 _ty) (ireduce src)))
  src)

;;;; Rules for `uadd_overflow_trap` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule (lower (has_type $I32 (uadd_overflow_trap a b tc)))
  (pulley_xadd32_uoverflow_trap a b tc))

(rule (lower (has_type $I64 (uadd_overflow_trap a b tc)))
  (pulley_xadd64_uoverflow_trap a b tc))

;;;; Rules for `select` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rule 0 (lower (has_type (ty_int (fits_in_32 _)) (select c a b)))
  (pulley_xselect32 (lower_cond c) a b))

(rule 1 (lower (has_type $I64 (select c a b)))
  (pulley_xselect64 (lower_cond c) a b))

(rule 1 (lower (has_type $F32 (select c a b)))
  (pulley_fselect32 (lower_cond c) a b))

(rule 1 (lower (has_type $F64 (select c a b)))
  (pulley_fselect64 (lower_cond c) a b))
