package wasi:clocks@0.3.0-rc-2025-09-16;
/// WASI Monotonic Clock is a clock API intended to let users measure elapsed
/// time.
///
/// It is intended to be portable at least between Unix-family platforms and
/// Windows.
///
/// A monotonic clock is a clock which has an unspecified initial value, and
/// successive reads of the clock will produce non-decreasing values.
@since(version = 0.3.0-rc-2025-09-16)
interface monotonic-clock {
    use types.{duration};

    /// An instant in time, in nanoseconds. An instant is relative to an
    /// unspecified initial value, and can only be compared to instances from
    /// the same monotonic-clock.
    @since(version = 0.3.0-rc-2025-09-16)
    type instant = u64;

    /// Read the current value of the clock.
    ///
    /// The clock is monotonic, therefore calling this function repeatedly will
    /// produce a sequence of non-decreasing values.
    ///
    /// For completeness, this function traps if it's not possible to represent
    /// the value of the clock in an `instant`. Consequently, implementations
    /// should ensure that the starting time is low enough to avoid the
    /// possibility of overflow in practice.
    @since(version = 0.3.0-rc-2025-09-16)
    now: func() -> instant;

    /// Query the resolution of the clock. Returns the duration of time
    /// corresponding to a clock tick.
    @since(version = 0.3.0-rc-2025-09-16)
    get-resolution: func() -> duration;

    /// Wait until the specified instant has occurred.
    @since(version = 0.3.0-rc-2025-09-16)
    wait-until: async func(
        when: instant,
    );

    /// Wait for the specified duration to elapse.
    @since(version = 0.3.0-rc-2025-09-16)
    wait-for: async func(
        how-long: duration,
    );
}
